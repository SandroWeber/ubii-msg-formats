// automatically generated by the FlatBuffers compiler, do not modify

/**
 * @const
 * @namespace
 */
var ubii = ubii || {};

/**
 * @const
 * @namespace
 */
ubii.dataStructures = ubii.dataStructures || {};

/**
 * @constructor
 */
ubii.dataStructures.Vector8 = function() {
  /**
   * @type {flatbuffers.ByteBuffer}
   */
  this.bb = null;

  /**
   * @type {number}
   */
  this.bb_pos = 0;
};

/**
 * @param {number} i
 * @param {flatbuffers.ByteBuffer} bb
 * @returns {ubii.dataStructures.Vector8}
 */
ubii.dataStructures.Vector8.prototype.__init = function(i, bb) {
  this.bb_pos = i;
  this.bb = bb;
  return this;
};

/**
 * @returns {number}
 */
ubii.dataStructures.Vector8.prototype.v0 = function() {
  return this.bb.readFloat32(this.bb_pos);
};

/**
 * @returns {number}
 */
ubii.dataStructures.Vector8.prototype.v1 = function() {
  return this.bb.readFloat32(this.bb_pos + 4);
};

/**
 * @returns {number}
 */
ubii.dataStructures.Vector8.prototype.v2 = function() {
  return this.bb.readFloat32(this.bb_pos + 8);
};

/**
 * @returns {number}
 */
ubii.dataStructures.Vector8.prototype.v3 = function() {
  return this.bb.readFloat32(this.bb_pos + 12);
};

/**
 * @returns {number}
 */
ubii.dataStructures.Vector8.prototype.v4 = function() {
  return this.bb.readFloat32(this.bb_pos + 16);
};

/**
 * @returns {number}
 */
ubii.dataStructures.Vector8.prototype.v5 = function() {
  return this.bb.readFloat32(this.bb_pos + 20);
};

/**
 * @returns {number}
 */
ubii.dataStructures.Vector8.prototype.v6 = function() {
  return this.bb.readFloat32(this.bb_pos + 24);
};

/**
 * @returns {number}
 */
ubii.dataStructures.Vector8.prototype.v7 = function() {
  return this.bb.readFloat32(this.bb_pos + 28);
};

/**
 * @param {flatbuffers.Builder} builder
 * @param {number} v0
 * @param {number} v1
 * @param {number} v2
 * @param {number} v3
 * @param {number} v4
 * @param {number} v5
 * @param {number} v6
 * @param {number} v7
 * @returns {flatbuffers.Offset}
 */
ubii.dataStructures.Vector8.createVector8 = function(builder, v0, v1, v2, v3, v4, v5, v6, v7) {
  builder.prep(4, 32);
  builder.writeFloat32(v7);
  builder.writeFloat32(v6);
  builder.writeFloat32(v5);
  builder.writeFloat32(v4);
  builder.writeFloat32(v3);
  builder.writeFloat32(v2);
  builder.writeFloat32(v1);
  builder.writeFloat32(v0);
  return builder.offset();
};

// Exports for Node.js and RequireJS
this.ubii = ubii;
