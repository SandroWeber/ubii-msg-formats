// automatically generated by the FlatBuffers compiler, do not modify

package ubii.sessions;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class IOMapping extends Table {
  public static void ValidateVersion() { Constants.FLATBUFFERS_1_12_0(); }
  public static IOMapping getRootAsIOMapping(ByteBuffer _bb) { return getRootAsIOMapping(_bb, new IOMapping()); }
  public static IOMapping getRootAsIOMapping(ByteBuffer _bb, IOMapping obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __reset(_i, _bb); }
  public IOMapping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public String interactionId() { int o = __offset(4); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer interactionIdAsByteBuffer() { return __vector_as_bytebuffer(4, 1); }
  public ByteBuffer interactionIdInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 4, 1); }
  public ubii.sessions.InteractionInputMapping inputMappings(int j) { return inputMappings(new ubii.sessions.InteractionInputMapping(), j); }
  public ubii.sessions.InteractionInputMapping inputMappings(ubii.sessions.InteractionInputMapping obj, int j) { int o = __offset(6); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int inputMappingsLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ubii.sessions.InteractionInputMapping.Vector inputMappingsVector() { return inputMappingsVector(new ubii.sessions.InteractionInputMapping.Vector()); }
  public ubii.sessions.InteractionInputMapping.Vector inputMappingsVector(ubii.sessions.InteractionInputMapping.Vector obj) { int o = __offset(6); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }
  public ubii.sessions.InteractionOutputMapping outputMappings(int j) { return outputMappings(new ubii.sessions.InteractionOutputMapping(), j); }
  public ubii.sessions.InteractionOutputMapping outputMappings(ubii.sessions.InteractionOutputMapping obj, int j) { int o = __offset(8); return o != 0 ? obj.__assign(__indirect(__vector(o) + j * 4), bb) : null; }
  public int outputMappingsLength() { int o = __offset(8); return o != 0 ? __vector_len(o) : 0; }
  public ubii.sessions.InteractionOutputMapping.Vector outputMappingsVector() { return outputMappingsVector(new ubii.sessions.InteractionOutputMapping.Vector()); }
  public ubii.sessions.InteractionOutputMapping.Vector outputMappingsVector(ubii.sessions.InteractionOutputMapping.Vector obj) { int o = __offset(8); return o != 0 ? obj.__assign(__vector(o), 4, bb) : null; }

  public static int createIOMapping(FlatBufferBuilder builder,
      int interaction_idOffset,
      int input_mappingsOffset,
      int output_mappingsOffset) {
    builder.startTable(3);
    IOMapping.addOutputMappings(builder, output_mappingsOffset);
    IOMapping.addInputMappings(builder, input_mappingsOffset);
    IOMapping.addInteractionId(builder, interaction_idOffset);
    return IOMapping.endIOMapping(builder);
  }

  public static void startIOMapping(FlatBufferBuilder builder) { builder.startTable(3); }
  public static void addInteractionId(FlatBufferBuilder builder, int interactionIdOffset) { builder.addOffset(0, interactionIdOffset, 0); }
  public static void addInputMappings(FlatBufferBuilder builder, int inputMappingsOffset) { builder.addOffset(1, inputMappingsOffset, 0); }
  public static int createInputMappingsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startInputMappingsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addOutputMappings(FlatBufferBuilder builder, int outputMappingsOffset) { builder.addOffset(2, outputMappingsOffset, 0); }
  public static int createOutputMappingsVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startOutputMappingsVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static int endIOMapping(FlatBufferBuilder builder) {
    int o = builder.endTable();
    return o;
  }
  public static void finishIOMappingBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedIOMappingBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }

  public static final class Vector extends BaseVector {
    public Vector __assign(int _vector, int _element_size, ByteBuffer _bb) { __reset(_vector, _element_size, _bb); return this; }

    public IOMapping get(int j) { return get(new IOMapping(), j); }
    public IOMapping get(IOMapping obj, int j) {  return obj.__assign(__indirect(__element(j), bb), bb); }
  }
}

