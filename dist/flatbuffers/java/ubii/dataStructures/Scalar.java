// automatically generated by the FlatBuffers compiler, do not modify

package ubii.dataStructures;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class Scalar extends Table {
  public static Scalar getRootAsScalar(ByteBuffer _bb) { return getRootAsScalar(_bb, new Scalar()); }
  public static Scalar getRootAsScalar(ByteBuffer _bb, Scalar obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public Scalar __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public boolean bool() { int o = __offset(4); return o != 0 ? 0!=bb.get(o + bb_pos) : false; }
  public boolean boolList(int j) { int o = __offset(6); return o != 0 ? 0!=bb.get(__vector(o) + j * 1) : false; }
  public int boolListLength() { int o = __offset(6); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer boolListAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer boolListInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }
  public String string() { int o = __offset(8); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer stringAsByteBuffer() { return __vector_as_bytebuffer(8, 1); }
  public ByteBuffer stringInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 8, 1); }
  public String stringList(int j) { int o = __offset(10); return o != 0 ? __string(__vector(o) + j * 4) : null; }
  public int stringListLength() { int o = __offset(10); return o != 0 ? __vector_len(o) : 0; }
  public byte byte() { int o = __offset(12); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public int int32() { int o = __offset(14); return o != 0 ? bb.getInt(o + bb_pos) : 0; }
  public int int32List(int j) { int o = __offset(16); return o != 0 ? bb.getInt(__vector(o) + j * 4) : 0; }
  public int int32ListLength() { int o = __offset(16); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer int32ListAsByteBuffer() { return __vector_as_bytebuffer(16, 4); }
  public ByteBuffer int32ListInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 16, 4); }
  public float float() { int o = __offset(18); return o != 0 ? bb.getFloat(o + bb_pos) : 0.0f; }
  public float floatList(int j) { int o = __offset(20); return o != 0 ? bb.getFloat(__vector(o) + j * 4) : 0; }
  public int floatListLength() { int o = __offset(20); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer floatListAsByteBuffer() { return __vector_as_bytebuffer(20, 4); }
  public ByteBuffer floatListInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 20, 4); }
  public double double() { int o = __offset(22); return o != 0 ? bb.getDouble(o + bb_pos) : 0.0; }
  public double doubleList(int j) { int o = __offset(24); return o != 0 ? bb.getDouble(__vector(o) + j * 8) : 0; }
  public int doubleListLength() { int o = __offset(24); return o != 0 ? __vector_len(o) : 0; }
  public ByteBuffer doubleListAsByteBuffer() { return __vector_as_bytebuffer(24, 8); }
  public ByteBuffer doubleListInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 24, 8); }

  public static int createScalar(FlatBufferBuilder builder,
      boolean bool,
      int bool_listOffset,
      int stringOffset,
      int string_listOffset,
      byte byte,
      int int32,
      int int32_listOffset,
      float float,
      int float_listOffset,
      double double,
      int double_listOffset) {
    builder.startObject(11);
    Scalar.addDouble(builder, double);
    Scalar.addDoubleList(builder, double_listOffset);
    Scalar.addFloatList(builder, float_listOffset);
    Scalar.addFloat(builder, float);
    Scalar.addInt32List(builder, int32_listOffset);
    Scalar.addInt32(builder, int32);
    Scalar.addStringList(builder, string_listOffset);
    Scalar.addString(builder, stringOffset);
    Scalar.addBoolList(builder, bool_listOffset);
    Scalar.addByte(builder, byte);
    Scalar.addBool(builder, bool);
    return Scalar.endScalar(builder);
  }

  public static void startScalar(FlatBufferBuilder builder) { builder.startObject(11); }
  public static void addBool(FlatBufferBuilder builder, boolean bool) { builder.addBoolean(0, bool, false); }
  public static void addBoolList(FlatBufferBuilder builder, int boolListOffset) { builder.addOffset(1, boolListOffset, 0); }
  public static int createBoolListVector(FlatBufferBuilder builder, boolean[] data) { builder.startVector(1, data.length, 1); for (int i = data.length - 1; i >= 0; i--) builder.addBoolean(data[i]); return builder.endVector(); }
  public static void startBoolListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(1, numElems, 1); }
  public static void addString(FlatBufferBuilder builder, int stringOffset) { builder.addOffset(2, stringOffset, 0); }
  public static void addStringList(FlatBufferBuilder builder, int stringListOffset) { builder.addOffset(3, stringListOffset, 0); }
  public static int createStringListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addOffset(data[i]); return builder.endVector(); }
  public static void startStringListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addByte(FlatBufferBuilder builder, byte byte) { builder.addByte(4, byte, 0); }
  public static void addInt32(FlatBufferBuilder builder, int int32) { builder.addInt(5, int32, 0); }
  public static void addInt32List(FlatBufferBuilder builder, int int32ListOffset) { builder.addOffset(6, int32ListOffset, 0); }
  public static int createInt32ListVector(FlatBufferBuilder builder, int[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addInt(data[i]); return builder.endVector(); }
  public static void startInt32ListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addFloat(FlatBufferBuilder builder, float float) { builder.addFloat(7, float, 0.0f); }
  public static void addFloatList(FlatBufferBuilder builder, int floatListOffset) { builder.addOffset(8, floatListOffset, 0); }
  public static int createFloatListVector(FlatBufferBuilder builder, float[] data) { builder.startVector(4, data.length, 4); for (int i = data.length - 1; i >= 0; i--) builder.addFloat(data[i]); return builder.endVector(); }
  public static void startFloatListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(4, numElems, 4); }
  public static void addDouble(FlatBufferBuilder builder, double double) { builder.addDouble(9, double, 0.0); }
  public static void addDoubleList(FlatBufferBuilder builder, int doubleListOffset) { builder.addOffset(10, doubleListOffset, 0); }
  public static int createDoubleListVector(FlatBufferBuilder builder, double[] data) { builder.startVector(8, data.length, 8); for (int i = data.length - 1; i >= 0; i--) builder.addDouble(data[i]); return builder.endVector(); }
  public static void startDoubleListVector(FlatBufferBuilder builder, int numElems) { builder.startVector(8, numElems, 8); }
  public static int endScalar(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
}

