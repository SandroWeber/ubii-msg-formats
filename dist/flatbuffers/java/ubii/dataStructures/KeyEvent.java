// automatically generated by the FlatBuffers compiler, do not modify

package ubii.dataStructures;

import java.nio.*;
import java.lang.*;
import java.util.*;
import com.google.flatbuffers.*;

@SuppressWarnings("unused")
public final class KeyEvent extends Table {
  public static KeyEvent getRootAsKeyEvent(ByteBuffer _bb) { return getRootAsKeyEvent(_bb, new KeyEvent()); }
  public static KeyEvent getRootAsKeyEvent(ByteBuffer _bb, KeyEvent obj) { _bb.order(ByteOrder.LITTLE_ENDIAN); return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb)); }
  public void __init(int _i, ByteBuffer _bb) { bb_pos = _i; bb = _bb; vtable_start = bb_pos - bb.getInt(bb_pos); vtable_size = bb.getShort(vtable_start); }
  public KeyEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public byte type() { int o = __offset(4); return o != 0 ? bb.get(o + bb_pos) : 0; }
  public String key() { int o = __offset(6); return o != 0 ? __string(o + bb_pos) : null; }
  public ByteBuffer keyAsByteBuffer() { return __vector_as_bytebuffer(6, 1); }
  public ByteBuffer keyInByteBuffer(ByteBuffer _bb) { return __vector_in_bytebuffer(_bb, 6, 1); }

  public static int createKeyEvent(FlatBufferBuilder builder,
      byte type,
      int keyOffset) {
    builder.startObject(2);
    KeyEvent.addKey(builder, keyOffset);
    KeyEvent.addType(builder, type);
    return KeyEvent.endKeyEvent(builder);
  }

  public static void startKeyEvent(FlatBufferBuilder builder) { builder.startObject(2); }
  public static void addType(FlatBufferBuilder builder, byte type) { builder.addByte(0, type, 0); }
  public static void addKey(FlatBufferBuilder builder, int keyOffset) { builder.addOffset(1, keyOffset, 0); }
  public static int endKeyEvent(FlatBufferBuilder builder) {
    int o = builder.endObject();
    return o;
  }
  public static void finishKeyEventBuffer(FlatBufferBuilder builder, int offset) { builder.finish(offset); }
  public static void finishSizePrefixedKeyEventBuffer(FlatBufferBuilder builder, int offset) { builder.finishSizePrefixed(offset); }
}

