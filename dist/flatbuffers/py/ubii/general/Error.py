# automatically generated by the FlatBuffers compiler, do not modify

# namespace: general

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Error(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsError(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Error()
        x.Init(buf, n + offset)
        return x

    # Error
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Error
    def Title(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Error
    def Message(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Error
    def Stack(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ErrorStart(builder): builder.StartObject(3)
def ErrorAddTitle(builder, title): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(title), 0)
def ErrorAddMessage(builder, message): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(message), 0)
def ErrorAddStack(builder, stack): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(stack), 0)
def ErrorEnd(builder): return builder.EndObject()


class ErrorT(object):

    # ErrorT
    def __init__(self):
        self.title = None  # type: str
        self.message = None  # type: str
        self.stack = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        error = Error()
        error.Init(buf, pos)
        return cls.InitFromObj(error)

    @classmethod
    def InitFromObj(cls, error):
        x = ErrorT()
        x._UnPack(error)
        return x

    # ErrorT
    def _UnPack(self, error):
        if error is None:
            return
        self.title = error.Title()
        self.message = error.Message()
        self.stack = error.Stack()

    # ErrorT
    def Pack(self, builder):
        if self.title is not None:
            title = builder.CreateString(self.title)
        if self.message is not None:
            message = builder.CreateString(self.message)
        if self.stack is not None:
            stack = builder.CreateString(self.stack)
        ErrorStart(builder)
        if self.title is not None:
            ErrorAddTitle(builder, title)
        if self.message is not None:
            ErrorAddMessage(builder, message)
        if self.stack is not None:
            ErrorAddStack(builder, stack)
        error = ErrorEnd(builder)
        return error
