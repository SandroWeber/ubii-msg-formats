# automatically generated by the FlatBuffers compiler, do not modify

# namespace: dataStructures

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Vector8(object):
    __slots__ = ['_tab']

    # Vector8
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Vector8
    def V0(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Vector8
    def V1(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Vector8
    def V2(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # Vector8
    def V3(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # Vector8
    def V4(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # Vector8
    def V5(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))
    # Vector8
    def V6(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # Vector8
    def V7(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))

def CreateVector8(builder, v0, v1, v2, v3, v4, v5, v6, v7):
    builder.Prep(4, 32)
    builder.PrependFloat32(v7)
    builder.PrependFloat32(v6)
    builder.PrependFloat32(v5)
    builder.PrependFloat32(v4)
    builder.PrependFloat32(v3)
    builder.PrependFloat32(v2)
    builder.PrependFloat32(v1)
    builder.PrependFloat32(v0)
    return builder.Offset()


class Vector8T(object):

    # Vector8T
    def __init__(self):
        self.v0 = 0.0  # type: float
        self.v1 = 0.0  # type: float
        self.v2 = 0.0  # type: float
        self.v3 = 0.0  # type: float
        self.v4 = 0.0  # type: float
        self.v5 = 0.0  # type: float
        self.v6 = 0.0  # type: float
        self.v7 = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        vector8 = Vector8()
        vector8.Init(buf, pos)
        return cls.InitFromObj(vector8)

    @classmethod
    def InitFromObj(cls, vector8):
        x = Vector8T()
        x._UnPack(vector8)
        return x

    # Vector8T
    def _UnPack(self, vector8):
        if vector8 is None:
            return
        self.v0 = vector8.V0()
        self.v1 = vector8.V1()
        self.v2 = vector8.V2()
        self.v3 = vector8.V3()
        self.v4 = vector8.V4()
        self.v5 = vector8.V5()
        self.v6 = vector8.V6()
        self.v7 = vector8.V7()

    # Vector8T
    def Pack(self, builder):
        return CreateVector8(builder, self.v0, self.v1, self.v2, self.v3, self.v4, self.v5, self.v6, self.v7)
