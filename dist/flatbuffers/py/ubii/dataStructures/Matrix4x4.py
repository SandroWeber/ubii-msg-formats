# automatically generated by the FlatBuffers compiler, do not modify

# namespace: dataStructures

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Matrix4x4(object):
    __slots__ = ['_tab']

    # Matrix4x4
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Matrix4x4
    def M00(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Matrix4x4
    def M01(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Matrix4x4
    def M02(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # Matrix4x4
    def M03(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # Matrix4x4
    def M10(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # Matrix4x4
    def M11(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))
    # Matrix4x4
    def M12(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(24))
    # Matrix4x4
    def M13(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(28))
    # Matrix4x4
    def M20(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(32))
    # Matrix4x4
    def M21(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(36))
    # Matrix4x4
    def M22(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(40))
    # Matrix4x4
    def M23(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(44))
    # Matrix4x4
    def M30(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(48))
    # Matrix4x4
    def M31(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(52))
    # Matrix4x4
    def M32(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(56))
    # Matrix4x4
    def M33(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(60))

def CreateMatrix4x4(builder, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33):
    builder.Prep(4, 64)
    builder.PrependFloat32(m33)
    builder.PrependFloat32(m32)
    builder.PrependFloat32(m31)
    builder.PrependFloat32(m30)
    builder.PrependFloat32(m23)
    builder.PrependFloat32(m22)
    builder.PrependFloat32(m21)
    builder.PrependFloat32(m20)
    builder.PrependFloat32(m13)
    builder.PrependFloat32(m12)
    builder.PrependFloat32(m11)
    builder.PrependFloat32(m10)
    builder.PrependFloat32(m03)
    builder.PrependFloat32(m02)
    builder.PrependFloat32(m01)
    builder.PrependFloat32(m00)
    return builder.Offset()


class Matrix4x4T(object):

    # Matrix4x4T
    def __init__(self):
        self.m00 = 0.0  # type: float
        self.m01 = 0.0  # type: float
        self.m02 = 0.0  # type: float
        self.m03 = 0.0  # type: float
        self.m10 = 0.0  # type: float
        self.m11 = 0.0  # type: float
        self.m12 = 0.0  # type: float
        self.m13 = 0.0  # type: float
        self.m20 = 0.0  # type: float
        self.m21 = 0.0  # type: float
        self.m22 = 0.0  # type: float
        self.m23 = 0.0  # type: float
        self.m30 = 0.0  # type: float
        self.m31 = 0.0  # type: float
        self.m32 = 0.0  # type: float
        self.m33 = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        matrix4x4 = Matrix4x4()
        matrix4x4.Init(buf, pos)
        return cls.InitFromObj(matrix4x4)

    @classmethod
    def InitFromObj(cls, matrix4x4):
        x = Matrix4x4T()
        x._UnPack(matrix4x4)
        return x

    # Matrix4x4T
    def _UnPack(self, matrix4x4):
        if matrix4x4 is None:
            return
        self.m00 = matrix4x4.M00()
        self.m01 = matrix4x4.M01()
        self.m02 = matrix4x4.M02()
        self.m03 = matrix4x4.M03()
        self.m10 = matrix4x4.M10()
        self.m11 = matrix4x4.M11()
        self.m12 = matrix4x4.M12()
        self.m13 = matrix4x4.M13()
        self.m20 = matrix4x4.M20()
        self.m21 = matrix4x4.M21()
        self.m22 = matrix4x4.M22()
        self.m23 = matrix4x4.M23()
        self.m30 = matrix4x4.M30()
        self.m31 = matrix4x4.M31()
        self.m32 = matrix4x4.M32()
        self.m33 = matrix4x4.M33()

    # Matrix4x4T
    def Pack(self, builder):
        return CreateMatrix4x4(builder, self.m00, self.m01, self.m02, self.m03, self.m10, self.m11, self.m12, self.m13, self.m20, self.m21, self.m22, self.m23, self.m30, self.m31, self.m32, self.m33)
