# automatically generated by the FlatBuffers compiler, do not modify

# namespace: dataStructures

import flatbuffers

class Matrix3x2(object):
    __slots__ = ['_tab']

    # Matrix3x2
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Matrix3x2
    def M00(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Matrix3x2
    def M01(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Matrix3x2
    def M10(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # Matrix3x2
    def M11(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))
    # Matrix3x2
    def M20(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(16))
    # Matrix3x2
    def M21(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(20))

def CreateMatrix3x2(builder, m00, m01, m10, m11, m20, m21):
    builder.Prep(4, 24)
    builder.PrependFloat32(m21)
    builder.PrependFloat32(m20)
    builder.PrependFloat32(m11)
    builder.PrependFloat32(m10)
    builder.PrependFloat32(m01)
    builder.PrependFloat32(m00)
    return builder.Offset()
