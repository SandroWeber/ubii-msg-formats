# automatically generated by the FlatBuffers compiler, do not modify

# namespace: dataStructures

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Color(object):
    __slots__ = ['_tab']

    # Color
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Color
    def R(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(0))
    # Color
    def G(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(4))
    # Color
    def B(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(8))
    # Color
    def A(self): return self._tab.Get(flatbuffers.number_types.Float32Flags, self._tab.Pos + flatbuffers.number_types.UOffsetTFlags.py_type(12))

def CreateColor(builder, r, g, b, a):
    builder.Prep(4, 16)
    builder.PrependFloat32(a)
    builder.PrependFloat32(b)
    builder.PrependFloat32(g)
    builder.PrependFloat32(r)
    return builder.Offset()


class ColorT(object):

    # ColorT
    def __init__(self):
        self.r = 0.0  # type: float
        self.g = 0.0  # type: float
        self.b = 0.0  # type: float
        self.a = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        color = Color()
        color.Init(buf, pos)
        return cls.InitFromObj(color)

    @classmethod
    def InitFromObj(cls, color):
        x = ColorT()
        x._UnPack(color)
        return x

    # ColorT
    def _UnPack(self, color):
        if color is None:
            return
        self.r = color.R()
        self.g = color.G()
        self.b = color.B()
        self.a = color.A()

    # ColorT
    def Pack(self, builder):
        return CreateColor(builder, self.r, self.g, self.b, self.a)
