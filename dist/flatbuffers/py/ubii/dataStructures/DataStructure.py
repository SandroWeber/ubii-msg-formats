# automatically generated by the FlatBuffers compiler, do not modify

# namespace: dataStructures

import flatbuffers

class DataStructure(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDataStructure(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = DataStructure()
        x.Init(buf, n + offset)
        return x

    # DataStructure
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # DataStructure
    def Bool(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return bool(self._tab.Get(flatbuffers.number_types.BoolFlags, o + self._tab.Pos))
        return False

    # DataStructure
    def BoolList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.BoolFlags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 1))
        return 0

    # DataStructure
    def BoolListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.BoolFlags, o)
        return 0

    # DataStructure
    def BoolListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataStructure
    def String(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # DataStructure
    def StringList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # DataStructure
    def StringListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataStructure
    def Byte(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # DataStructure
    def Int32(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int32Flags, o + self._tab.Pos)
        return 0

    # DataStructure
    def Int32List(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Int32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DataStructure
    def Int32ListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Int32Flags, o)
        return 0

    # DataStructure
    def Int32ListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataStructure
    def Float(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # DataStructure
    def FloatList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # DataStructure
    def FloatListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float32Flags, o)
        return 0

    # DataStructure
    def FloatListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataStructure
    def Double(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float64Flags, o + self._tab.Pos)
        return 0.0

    # DataStructure
    def DoubleList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Float64Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 8))
        return 0

    # DataStructure
    def DoubleListAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Float64Flags, o)
        return 0

    # DataStructure
    def DoubleListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataStructure
    def Vector2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector2 import Vector2
            obj = Vector2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Vector3(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Vector4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(30))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector4 import Vector4
            obj = Vector4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Quaternion(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(32))
        if o != 0:
            x = o + self._tab.Pos
            from .Quaternion import Quaternion
            obj = Quaternion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Matrix3x2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(34))
        if o != 0:
            x = o + self._tab.Pos
            from .Matrix3x2 import Matrix3x2
            obj = Matrix3x2()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Matrix4x4(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(36))
        if o != 0:
            x = o + self._tab.Pos
            from .Matrix4x4 import Matrix4x4
            obj = Matrix4x4()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Color(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(38))
        if o != 0:
            x = o + self._tab.Pos
            from .Color import Color
            obj = Color()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def TouchEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(40))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TouchEvent import TouchEvent
            obj = TouchEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def KeyEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(42))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .KeyEvent import KeyEvent
            obj = KeyEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def MouseEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(44))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .MouseEvent import MouseEvent
            obj = MouseEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def MyoEvent(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(46))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .MyoEvent import MyoEvent
            obj = MyoEvent()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Pose2D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(48))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Pose2D import Pose2D
            obj = Pose2D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Pose3D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(50))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Pose3D import Pose3D
            obj = Pose3D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Object2D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(52))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Object2D import Object2D
            obj = Object2D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Object3D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(54))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Object3D import Object3D
            obj = Object3D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Object2DList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Object2D import Object2D
            obj = Object2D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Object2DListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(56))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataStructure
    def Object3DList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Object3D import Object3D
            obj = Object3D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Object3DListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(58))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataStructure
    def Image2D(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(60))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Image2D import Image2D
            obj = Image2D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Image2DList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Image2D import Image2D
            obj = Image2D()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Image2DListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(62))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # DataStructure
    def Session(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(64))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Session import Session
            obj = Session()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # DataStructure
    def Interaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(66))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Interaction import Interaction
            obj = Interaction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def DataStructureStart(builder): builder.StartObject(32)
def DataStructureAddBool(builder, bool): builder.PrependBoolSlot(0, bool, 0)
def DataStructureAddBoolList(builder, boolList): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(boolList), 0)
def DataStructureStartBoolListVector(builder, numElems): return builder.StartVector(1, numElems, 1)
def DataStructureAddString(builder, string): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(string), 0)
def DataStructureAddStringList(builder, stringList): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(stringList), 0)
def DataStructureStartStringListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DataStructureAddByte(builder, byte): builder.PrependInt8Slot(4, byte, 0)
def DataStructureAddInt32(builder, int32): builder.PrependInt32Slot(5, int32, 0)
def DataStructureAddInt32List(builder, int32List): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(int32List), 0)
def DataStructureStartInt32ListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DataStructureAddFloat(builder, float): builder.PrependFloat32Slot(7, float, 0.0)
def DataStructureAddFloatList(builder, floatList): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(floatList), 0)
def DataStructureStartFloatListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DataStructureAddDouble(builder, double): builder.PrependFloat64Slot(9, double, 0.0)
def DataStructureAddDoubleList(builder, doubleList): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(doubleList), 0)
def DataStructureStartDoubleListVector(builder, numElems): return builder.StartVector(8, numElems, 8)
def DataStructureAddVector2(builder, vector2): builder.PrependStructSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(vector2), 0)
def DataStructureAddVector3(builder, vector3): builder.PrependStructSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(vector3), 0)
def DataStructureAddVector4(builder, vector4): builder.PrependStructSlot(13, flatbuffers.number_types.UOffsetTFlags.py_type(vector4), 0)
def DataStructureAddQuaternion(builder, quaternion): builder.PrependStructSlot(14, flatbuffers.number_types.UOffsetTFlags.py_type(quaternion), 0)
def DataStructureAddMatrix3x2(builder, matrix3x2): builder.PrependStructSlot(15, flatbuffers.number_types.UOffsetTFlags.py_type(matrix3x2), 0)
def DataStructureAddMatrix4x4(builder, matrix4x4): builder.PrependStructSlot(16, flatbuffers.number_types.UOffsetTFlags.py_type(matrix4x4), 0)
def DataStructureAddColor(builder, color): builder.PrependStructSlot(17, flatbuffers.number_types.UOffsetTFlags.py_type(color), 0)
def DataStructureAddTouchEvent(builder, touchEvent): builder.PrependUOffsetTRelativeSlot(18, flatbuffers.number_types.UOffsetTFlags.py_type(touchEvent), 0)
def DataStructureAddKeyEvent(builder, keyEvent): builder.PrependUOffsetTRelativeSlot(19, flatbuffers.number_types.UOffsetTFlags.py_type(keyEvent), 0)
def DataStructureAddMouseEvent(builder, mouseEvent): builder.PrependUOffsetTRelativeSlot(20, flatbuffers.number_types.UOffsetTFlags.py_type(mouseEvent), 0)
def DataStructureAddMyoEvent(builder, myoEvent): builder.PrependUOffsetTRelativeSlot(21, flatbuffers.number_types.UOffsetTFlags.py_type(myoEvent), 0)
def DataStructureAddPose2D(builder, pose2D): builder.PrependUOffsetTRelativeSlot(22, flatbuffers.number_types.UOffsetTFlags.py_type(pose2D), 0)
def DataStructureAddPose3D(builder, pose3D): builder.PrependUOffsetTRelativeSlot(23, flatbuffers.number_types.UOffsetTFlags.py_type(pose3D), 0)
def DataStructureAddObject2D(builder, object2D): builder.PrependUOffsetTRelativeSlot(24, flatbuffers.number_types.UOffsetTFlags.py_type(object2D), 0)
def DataStructureAddObject3D(builder, object3D): builder.PrependUOffsetTRelativeSlot(25, flatbuffers.number_types.UOffsetTFlags.py_type(object3D), 0)
def DataStructureAddObject2DList(builder, object2DList): builder.PrependUOffsetTRelativeSlot(26, flatbuffers.number_types.UOffsetTFlags.py_type(object2DList), 0)
def DataStructureStartObject2DListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DataStructureAddObject3DList(builder, object3DList): builder.PrependUOffsetTRelativeSlot(27, flatbuffers.number_types.UOffsetTFlags.py_type(object3DList), 0)
def DataStructureStartObject3DListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DataStructureAddImage2D(builder, image2D): builder.PrependUOffsetTRelativeSlot(28, flatbuffers.number_types.UOffsetTFlags.py_type(image2D), 0)
def DataStructureAddImage2DList(builder, image2DList): builder.PrependUOffsetTRelativeSlot(29, flatbuffers.number_types.UOffsetTFlags.py_type(image2DList), 0)
def DataStructureStartImage2DListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DataStructureAddSession(builder, session): builder.PrependUOffsetTRelativeSlot(30, flatbuffers.number_types.UOffsetTFlags.py_type(session), 0)
def DataStructureAddInteraction(builder, interaction): builder.PrependUOffsetTRelativeSlot(31, flatbuffers.number_types.UOffsetTFlags.py_type(interaction), 0)
def DataStructureEnd(builder): return builder.EndObject()
