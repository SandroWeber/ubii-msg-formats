# automatically generated by the FlatBuffers compiler, do not modify

# namespace: dataStructures

import flatbuffers

class MyoEvent(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsMyoEvent(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = MyoEvent()
        x.Init(buf, n + offset)
        return x

    # MyoEvent
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # MyoEvent
    def Emg(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector8 import Vector8
            obj = Vector8()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MyoEvent
    def Orientation(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .Quaternion import Quaternion
            obj = Quaternion()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MyoEvent
    def Gyroscope(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MyoEvent
    def Accelerometer(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = o + self._tab.Pos
            from .Vector3 import Vector3
            obj = Vector3()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # MyoEvent
    def Gesture(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

def MyoEventStart(builder): builder.StartObject(5)
def MyoEventAddEmg(builder, emg): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(emg), 0)
def MyoEventAddOrientation(builder, orientation): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(orientation), 0)
def MyoEventAddGyroscope(builder, gyroscope): builder.PrependStructSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(gyroscope), 0)
def MyoEventAddAccelerometer(builder, accelerometer): builder.PrependStructSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(accelerometer), 0)
def MyoEventAddGesture(builder, gesture): builder.PrependInt8Slot(4, gesture, 0)
def MyoEventEnd(builder): return builder.EndObject()
