# automatically generated by the FlatBuffers compiler, do not modify

# namespace: topicData

import flatbuffers

class TopicDataRecord(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTopicDataRecord(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopicDataRecord()
        x.Init(buf, n + offset)
        return x

    # TopicDataRecord
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TopicDataRecord
    def Topic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicDataRecord
    def Timestamp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from .Timestamp import Timestamp
            obj = Timestamp()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TopicDataRecord
    def Data(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .DataStructure import DataStructure
            obj = DataStructure()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def TopicDataRecordStart(builder): builder.StartObject(3)
def TopicDataRecordAddTopic(builder, topic): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(topic), 0)
def TopicDataRecordAddTimestamp(builder, timestamp): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(timestamp), 0)
def TopicDataRecordAddData(builder, data): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(data), 0)
def TopicDataRecordEnd(builder): return builder.EndObject()
