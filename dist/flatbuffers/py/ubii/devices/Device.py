# automatically generated by the FlatBuffers compiler, do not modify

# namespace: devices

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Device(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsDevice(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Device()
        x.Init(buf, n + offset)
        return x

    # Device
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Device
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Device
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Device
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Device
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Device
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Device
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Device
    def ClientId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Device
    def DeviceType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Device
    def Components(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ubii.devices.Component import Component
            obj = Component()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Device
    def ComponentsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Device
    def ComponentsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

def DeviceStart(builder): builder.StartObject(7)
def DeviceAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def DeviceAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def DeviceAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def DeviceStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DeviceAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def DeviceAddClientId(builder, clientId): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(clientId), 0)
def DeviceAddDeviceType(builder, deviceType): builder.PrependInt8Slot(5, deviceType, 0)
def DeviceAddComponents(builder, components): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(components), 0)
def DeviceStartComponentsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def DeviceEnd(builder): return builder.EndObject()

import ubii.devices.Component
try:
    from typing import List
except:
    pass

class DeviceT(object):

    # DeviceT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.tags = None  # type: List[str]
        self.description = None  # type: str
        self.clientId = None  # type: str
        self.deviceType = 0  # type: int
        self.components = None  # type: List[ubii.devices.Component.ComponentT]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        device = Device()
        device.Init(buf, pos)
        return cls.InitFromObj(device)

    @classmethod
    def InitFromObj(cls, device):
        x = DeviceT()
        x._UnPack(device)
        return x

    # DeviceT
    def _UnPack(self, device):
        if device is None:
            return
        self.id = device.Id()
        self.name = device.Name()
        if not device.TagsIsNone():
            self.tags = []
            for i in range(device.TagsLength()):
                self.tags.append(device.Tags(i))
        self.description = device.Description()
        self.clientId = device.ClientId()
        self.deviceType = device.DeviceType()
        if not device.ComponentsIsNone():
            self.components = []
            for i in range(device.ComponentsLength()):
                if device.Components(i) is None:
                    self.components.append(None)
                else:
                    component_ = ubii.devices.Component.ComponentT.InitFromObj(device.Components(i))
                    self.components.append(component_)

    # DeviceT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            DeviceStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector(len(self.tags))
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.clientId is not None:
            clientId = builder.CreateString(self.clientId)
        if self.components is not None:
            componentslist = []
            for i in range(len(self.components)):
                componentslist.append(self.components[i].Pack(builder))
            DeviceStartComponentsVector(builder, len(self.components))
            for i in reversed(range(len(self.components))):
                builder.PrependUOffsetTRelative(componentslist[i])
            components = builder.EndVector(len(self.components))
        DeviceStart(builder)
        if self.id is not None:
            DeviceAddId(builder, id)
        if self.name is not None:
            DeviceAddName(builder, name)
        if self.tags is not None:
            DeviceAddTags(builder, tags)
        if self.description is not None:
            DeviceAddDescription(builder, description)
        if self.clientId is not None:
            DeviceAddClientId(builder, clientId)
        DeviceAddDeviceType(builder, self.deviceType)
        if self.components is not None:
            DeviceAddComponents(builder, components)
        device = DeviceEnd(builder)
        return device
