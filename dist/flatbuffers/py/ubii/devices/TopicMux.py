# automatically generated by the FlatBuffers compiler, do not modify

# namespace: devices

import flatbuffers

class TopicMux(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTopicMux(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopicMux()
        x.Init(buf, n + offset)
        return x

    # TopicMux
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TopicMux
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicMux
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicMux
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicMux
    def TopicSelector(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicMux
    def IdentityMatchPattern(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TopicMuxStart(builder): builder.StartObject(5)
def TopicMuxAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def TopicMuxAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def TopicMuxAddDataType(builder, dataType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataType), 0)
def TopicMuxAddTopicSelector(builder, topicSelector): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(topicSelector), 0)
def TopicMuxAddIdentityMatchPattern(builder, identityMatchPattern): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(identityMatchPattern), 0)
def TopicMuxEnd(builder): return builder.EndObject()
