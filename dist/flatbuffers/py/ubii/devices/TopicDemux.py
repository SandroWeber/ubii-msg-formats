# automatically generated by the FlatBuffers compiler, do not modify

# namespace: devices

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TopicDemux(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTopicDemux(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopicDemux()
        x.Init(buf, n + offset)
        return x

    # TopicDemux
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TopicDemux
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicDemux
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicDemux
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicDemux
    def OutputTopicFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TopicDemuxStart(builder): builder.StartObject(4)
def TopicDemuxAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def TopicDemuxAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def TopicDemuxAddDataType(builder, dataType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataType), 0)
def TopicDemuxAddOutputTopicFormat(builder, outputTopicFormat): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(outputTopicFormat), 0)
def TopicDemuxEnd(builder): return builder.EndObject()


class TopicDemuxT(object):

    # TopicDemuxT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.dataType = None  # type: str
        self.outputTopicFormat = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        topicDemux = TopicDemux()
        topicDemux.Init(buf, pos)
        return cls.InitFromObj(topicDemux)

    @classmethod
    def InitFromObj(cls, topicDemux):
        x = TopicDemuxT()
        x._UnPack(topicDemux)
        return x

    # TopicDemuxT
    def _UnPack(self, topicDemux):
        if topicDemux is None:
            return
        self.id = topicDemux.Id()
        self.name = topicDemux.Name()
        self.dataType = topicDemux.DataType()
        self.outputTopicFormat = topicDemux.OutputTopicFormat()

    # TopicDemuxT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.dataType is not None:
            dataType = builder.CreateString(self.dataType)
        if self.outputTopicFormat is not None:
            outputTopicFormat = builder.CreateString(self.outputTopicFormat)
        TopicDemuxStart(builder)
        if self.id is not None:
            TopicDemuxAddId(builder, id)
        if self.name is not None:
            TopicDemuxAddName(builder, name)
        if self.dataType is not None:
            TopicDemuxAddDataType(builder, dataType)
        if self.outputTopicFormat is not None:
            TopicDemuxAddOutputTopicFormat(builder, outputTopicFormat)
        topicDemux = TopicDemuxEnd(builder)
        return topicDemux
