# automatically generated by the FlatBuffers compiler, do not modify

# namespace: devices

import flatbuffers

class TopicDemux(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTopicDemux(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopicDemux()
        x.Init(buf, n + offset)
        return x

    # TopicDemux
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TopicDemux
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicDemux
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicDemux
    def DataType(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicDemux
    def OutputTopicFormat(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TopicDemuxStart(builder): builder.StartObject(4)
def TopicDemuxAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def TopicDemuxAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def TopicDemuxAddDataType(builder, dataType): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(dataType), 0)
def TopicDemuxAddOutputTopicFormat(builder, outputTopicFormat): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(outputTopicFormat), 0)
def TopicDemuxEnd(builder): return builder.EndObject()
