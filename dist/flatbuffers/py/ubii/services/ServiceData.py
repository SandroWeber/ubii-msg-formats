# automatically generated by the FlatBuffers compiler, do not modify

# namespace: services

import flatbuffers

class ServiceData(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsServiceData(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ServiceData()
        x.Init(buf, n + offset)
        return x

    # ServiceData
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ServiceData
    def Client(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Client import Client
            obj = Client()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def ClientList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Client import Client
            obj = Client()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def ClientListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ServiceData
    def Device(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Device import Device
            obj = Device()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def DeviceList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Device import Device
            obj = Device()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def DeviceListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ServiceData
    def TopicMux(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TopicMux import TopicMux
            obj = TopicMux()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def TopicMuxList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .TopicMux import TopicMux
            obj = TopicMux()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def TopicMuxListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ServiceData
    def TopicDemux(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TopicDemux import TopicDemux
            obj = TopicDemux()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def TopicDemuxList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .TopicDemux import TopicDemux
            obj = TopicDemux()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def TopicDemuxListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ServiceData
    def Session(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Session import Session
            obj = Session()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def SessionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Session import Session
            obj = Session()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def SessionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ServiceData
    def Interaction(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .Interaction import Interaction
            obj = Interaction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def InteractionList(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from .Interaction import Interaction
            obj = Interaction()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # ServiceData
    def InteractionListLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(26))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # ServiceData
    def TopicSubscription(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(28))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .TopicSubscription import TopicSubscription
            obj = TopicSubscription()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ServiceDataStart(builder): builder.StartObject(13)
def ServiceDataAddClient(builder, client): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(client), 0)
def ServiceDataAddClientList(builder, clientList): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(clientList), 0)
def ServiceDataStartClientListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ServiceDataAddDevice(builder, device): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(device), 0)
def ServiceDataAddDeviceList(builder, deviceList): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(deviceList), 0)
def ServiceDataStartDeviceListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ServiceDataAddTopicMux(builder, topicMux): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(topicMux), 0)
def ServiceDataAddTopicMuxList(builder, topicMuxList): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(topicMuxList), 0)
def ServiceDataStartTopicMuxListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ServiceDataAddTopicDemux(builder, topicDemux): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(topicDemux), 0)
def ServiceDataAddTopicDemuxList(builder, topicDemuxList): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(topicDemuxList), 0)
def ServiceDataStartTopicDemuxListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ServiceDataAddSession(builder, session): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(session), 0)
def ServiceDataAddSessionList(builder, sessionList): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(sessionList), 0)
def ServiceDataStartSessionListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ServiceDataAddInteraction(builder, interaction): builder.PrependUOffsetTRelativeSlot(10, flatbuffers.number_types.UOffsetTFlags.py_type(interaction), 0)
def ServiceDataAddInteractionList(builder, interactionList): builder.PrependUOffsetTRelativeSlot(11, flatbuffers.number_types.UOffsetTFlags.py_type(interactionList), 0)
def ServiceDataStartInteractionListVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ServiceDataAddTopicSubscription(builder, topicSubscription): builder.PrependUOffsetTRelativeSlot(12, flatbuffers.number_types.UOffsetTFlags.py_type(topicSubscription), 0)
def ServiceDataEnd(builder): return builder.EndObject()
