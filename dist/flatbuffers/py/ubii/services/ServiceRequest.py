# automatically generated by the FlatBuffers compiler, do not modify

# namespace: services

import flatbuffers

class ServiceRequest(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsServiceRequest(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = ServiceRequest()
        x.Init(buf, n + offset)
        return x

    # ServiceRequest
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # ServiceRequest
    def Topic(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # ServiceRequest
    def Request(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = self._tab.Indirect(o + self._tab.Pos)
            from .ServiceData import ServiceData
            obj = ServiceData()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

def ServiceRequestStart(builder): builder.StartObject(2)
def ServiceRequestAddTopic(builder, topic): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(topic), 0)
def ServiceRequestAddRequest(builder, request): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(request), 0)
def ServiceRequestEnd(builder): return builder.EndObject()
