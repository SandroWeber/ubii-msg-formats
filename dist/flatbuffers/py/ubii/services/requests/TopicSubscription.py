# automatically generated by the FlatBuffers compiler, do not modify

# namespace: requests

import flatbuffers

class TopicSubscription(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTopicSubscription(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TopicSubscription()
        x.Init(buf, n + offset)
        return x

    # TopicSubscription
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TopicSubscription
    def ClientId(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicSubscription
    def SubscribeTopics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TopicSubscription
    def SubscribeTopicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TopicSubscription
    def UnsubscribeTopics(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # TopicSubscription
    def UnsubscribeTopicsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TopicSubscription
    def SubscribeTopicRegexp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # TopicSubscription
    def UnsubscribeTopicRegexp(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def TopicSubscriptionStart(builder): builder.StartObject(5)
def TopicSubscriptionAddClientId(builder, clientId): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(clientId), 0)
def TopicSubscriptionAddSubscribeTopics(builder, subscribeTopics): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(subscribeTopics), 0)
def TopicSubscriptionStartSubscribeTopicsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TopicSubscriptionAddUnsubscribeTopics(builder, unsubscribeTopics): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(unsubscribeTopics), 0)
def TopicSubscriptionStartUnsubscribeTopicsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TopicSubscriptionAddSubscribeTopicRegexp(builder, subscribeTopicRegexp): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(subscribeTopicRegexp), 0)
def TopicSubscriptionAddUnsubscribeTopicRegexp(builder, unsubscribeTopicRegexp): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(unsubscribeTopicRegexp), 0)
def TopicSubscriptionEnd(builder): return builder.EndObject()
