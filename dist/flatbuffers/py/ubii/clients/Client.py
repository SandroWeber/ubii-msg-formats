# automatically generated by the FlatBuffers compiler, do not modify

# namespace: clients

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Client(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsClient(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Client()
        x.Init(buf, n + offset)
        return x

    # Client
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Client
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Client
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Client
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Client
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Client
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Client
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Client
    def Devices(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Client
    def DevicesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Client
    def DevicesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def ClientStart(builder): builder.StartObject(5)
def ClientAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def ClientAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def ClientAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def ClientStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ClientAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def ClientAddDevices(builder, devices): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(devices), 0)
def ClientStartDevicesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def ClientEnd(builder): return builder.EndObject()

try:
    from typing import List
except:
    pass

class ClientT(object):

    # ClientT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.tags = None  # type: List[str]
        self.description = None  # type: str
        self.devices = None  # type: List[str]

    @classmethod
    def InitFromBuf(cls, buf, pos):
        client = Client()
        client.Init(buf, pos)
        return cls.InitFromObj(client)

    @classmethod
    def InitFromObj(cls, client):
        x = ClientT()
        x._UnPack(client)
        return x

    # ClientT
    def _UnPack(self, client):
        if client is None:
            return
        self.id = client.Id()
        self.name = client.Name()
        if not client.TagsIsNone():
            self.tags = []
            for i in range(client.TagsLength()):
                self.tags.append(client.Tags(i))
        self.description = client.Description()
        if not client.DevicesIsNone():
            self.devices = []
            for i in range(client.DevicesLength()):
                self.devices.append(client.Devices(i))

    # ClientT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            ClientStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector(len(self.tags))
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.devices is not None:
            deviceslist = []
            for i in range(len(self.devices)):
                deviceslist.append(builder.CreateString(self.devices[i]))
            ClientStartDevicesVector(builder, len(self.devices))
            for i in reversed(range(len(self.devices))):
                builder.PrependUOffsetTRelative(deviceslist[i])
            devices = builder.EndVector(len(self.devices))
        ClientStart(builder)
        if self.id is not None:
            ClientAddId(builder, id)
        if self.name is not None:
            ClientAddName(builder, name)
        if self.tags is not None:
            ClientAddTags(builder, tags)
        if self.description is not None:
            ClientAddDescription(builder, description)
        if self.devices is not None:
            ClientAddDevices(builder, devices)
        client = ClientEnd(builder)
        return client
