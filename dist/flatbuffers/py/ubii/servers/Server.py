# automatically generated by the FlatBuffers compiler, do not modify

# namespace: servers

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Server(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsServer(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Server()
        x.Init(buf, n + offset)
        return x

    # Server
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Server
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Server
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Server
    def IpEthernet(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Server
    def IpWlan(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Server
    def PortServiceZmq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Server
    def PortServiceRest(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Server
    def PortTopicDataZmq(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Server
    def PortTopicDataWs(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Server
    def ConstantsJson(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

def ServerStart(builder): builder.StartObject(9)
def ServerAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def ServerAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def ServerAddIpEthernet(builder, ipEthernet): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(ipEthernet), 0)
def ServerAddIpWlan(builder, ipWlan): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(ipWlan), 0)
def ServerAddPortServiceZmq(builder, portServiceZmq): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(portServiceZmq), 0)
def ServerAddPortServiceRest(builder, portServiceRest): builder.PrependUOffsetTRelativeSlot(5, flatbuffers.number_types.UOffsetTFlags.py_type(portServiceRest), 0)
def ServerAddPortTopicDataZmq(builder, portTopicDataZmq): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(portTopicDataZmq), 0)
def ServerAddPortTopicDataWs(builder, portTopicDataWs): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(portTopicDataWs), 0)
def ServerAddConstantsJson(builder, constantsJson): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(constantsJson), 0)
def ServerEnd(builder): return builder.EndObject()


class ServerT(object):

    # ServerT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.ipEthernet = None  # type: str
        self.ipWlan = None  # type: str
        self.portServiceZmq = None  # type: str
        self.portServiceRest = None  # type: str
        self.portTopicDataZmq = None  # type: str
        self.portTopicDataWs = None  # type: str
        self.constantsJson = None  # type: str

    @classmethod
    def InitFromBuf(cls, buf, pos):
        server = Server()
        server.Init(buf, pos)
        return cls.InitFromObj(server)

    @classmethod
    def InitFromObj(cls, server):
        x = ServerT()
        x._UnPack(server)
        return x

    # ServerT
    def _UnPack(self, server):
        if server is None:
            return
        self.id = server.Id()
        self.name = server.Name()
        self.ipEthernet = server.IpEthernet()
        self.ipWlan = server.IpWlan()
        self.portServiceZmq = server.PortServiceZmq()
        self.portServiceRest = server.PortServiceRest()
        self.portTopicDataZmq = server.PortTopicDataZmq()
        self.portTopicDataWs = server.PortTopicDataWs()
        self.constantsJson = server.ConstantsJson()

    # ServerT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.ipEthernet is not None:
            ipEthernet = builder.CreateString(self.ipEthernet)
        if self.ipWlan is not None:
            ipWlan = builder.CreateString(self.ipWlan)
        if self.portServiceZmq is not None:
            portServiceZmq = builder.CreateString(self.portServiceZmq)
        if self.portServiceRest is not None:
            portServiceRest = builder.CreateString(self.portServiceRest)
        if self.portTopicDataZmq is not None:
            portTopicDataZmq = builder.CreateString(self.portTopicDataZmq)
        if self.portTopicDataWs is not None:
            portTopicDataWs = builder.CreateString(self.portTopicDataWs)
        if self.constantsJson is not None:
            constantsJson = builder.CreateString(self.constantsJson)
        ServerStart(builder)
        if self.id is not None:
            ServerAddId(builder, id)
        if self.name is not None:
            ServerAddName(builder, name)
        if self.ipEthernet is not None:
            ServerAddIpEthernet(builder, ipEthernet)
        if self.ipWlan is not None:
            ServerAddIpWlan(builder, ipWlan)
        if self.portServiceZmq is not None:
            ServerAddPortServiceZmq(builder, portServiceZmq)
        if self.portServiceRest is not None:
            ServerAddPortServiceRest(builder, portServiceRest)
        if self.portTopicDataZmq is not None:
            ServerAddPortTopicDataZmq(builder, portTopicDataZmq)
        if self.portTopicDataWs is not None:
            ServerAddPortTopicDataWs(builder, portTopicDataWs)
        if self.constantsJson is not None:
            ServerAddConstantsJson(builder, constantsJson)
        server = ServerEnd(builder)
        return server
