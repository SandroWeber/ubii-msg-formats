# automatically generated by the FlatBuffers compiler, do not modify

# namespace: interactions

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Interaction(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsInteraction(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Interaction()
        x.Init(buf, n + offset)
        return x

    # Interaction
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Interaction
    def Id(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interaction
    def Name(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interaction
    def Authors(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Interaction
    def AuthorsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Interaction
    def AuthorsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # Interaction
    def Tags(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.String(a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return ""

    # Interaction
    def TagsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Interaction
    def TagsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # Interaction
    def Description(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interaction
    def Status(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(14))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Int8Flags, o + self._tab.Pos)
        return 0

    # Interaction
    def InputFormats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ubii.interactions.IOFormat import IOFormat
            obj = IOFormat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Interaction
    def InputFormatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Interaction
    def InputFormatsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(16))
        return o == 0

    # Interaction
    def OutputFormats(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from ubii.interactions.IOFormat import IOFormat
            obj = IOFormat()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Interaction
    def OutputFormatsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # Interaction
    def OutputFormatsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(18))
        return o == 0

    # Interaction
    def OnCreated(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(20))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interaction
    def ProcessingCallback(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(22))
        if o != 0:
            return self._tab.String(o + self._tab.Pos)
        return None

    # Interaction
    def ProcessFrequency(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(24))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

def InteractionStart(builder): builder.StartObject(11)
def InteractionAddId(builder, id): builder.PrependUOffsetTRelativeSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(id), 0)
def InteractionAddName(builder, name): builder.PrependUOffsetTRelativeSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(name), 0)
def InteractionAddAuthors(builder, authors): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(authors), 0)
def InteractionStartAuthorsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InteractionAddTags(builder, tags): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(tags), 0)
def InteractionStartTagsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InteractionAddDescription(builder, description): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(description), 0)
def InteractionAddStatus(builder, status): builder.PrependInt8Slot(5, status, 0)
def InteractionAddInputFormats(builder, inputFormats): builder.PrependUOffsetTRelativeSlot(6, flatbuffers.number_types.UOffsetTFlags.py_type(inputFormats), 0)
def InteractionStartInputFormatsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InteractionAddOutputFormats(builder, outputFormats): builder.PrependUOffsetTRelativeSlot(7, flatbuffers.number_types.UOffsetTFlags.py_type(outputFormats), 0)
def InteractionStartOutputFormatsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def InteractionAddOnCreated(builder, onCreated): builder.PrependUOffsetTRelativeSlot(8, flatbuffers.number_types.UOffsetTFlags.py_type(onCreated), 0)
def InteractionAddProcessingCallback(builder, processingCallback): builder.PrependUOffsetTRelativeSlot(9, flatbuffers.number_types.UOffsetTFlags.py_type(processingCallback), 0)
def InteractionAddProcessFrequency(builder, processFrequency): builder.PrependFloat32Slot(10, processFrequency, 0.0)
def InteractionEnd(builder): return builder.EndObject()

import ubii.interactions.IOFormat
try:
    from typing import List
except:
    pass

class InteractionT(object):

    # InteractionT
    def __init__(self):
        self.id = None  # type: str
        self.name = None  # type: str
        self.authors = None  # type: List[str]
        self.tags = None  # type: List[str]
        self.description = None  # type: str
        self.status = 0  # type: int
        self.inputFormats = None  # type: List[ubii.interactions.IOFormat.IOFormatT]
        self.outputFormats = None  # type: List[ubii.interactions.IOFormat.IOFormatT]
        self.onCreated = None  # type: str
        self.processingCallback = None  # type: str
        self.processFrequency = 0.0  # type: float

    @classmethod
    def InitFromBuf(cls, buf, pos):
        interaction = Interaction()
        interaction.Init(buf, pos)
        return cls.InitFromObj(interaction)

    @classmethod
    def InitFromObj(cls, interaction):
        x = InteractionT()
        x._UnPack(interaction)
        return x

    # InteractionT
    def _UnPack(self, interaction):
        if interaction is None:
            return
        self.id = interaction.Id()
        self.name = interaction.Name()
        if not interaction.AuthorsIsNone():
            self.authors = []
            for i in range(interaction.AuthorsLength()):
                self.authors.append(interaction.Authors(i))
        if not interaction.TagsIsNone():
            self.tags = []
            for i in range(interaction.TagsLength()):
                self.tags.append(interaction.Tags(i))
        self.description = interaction.Description()
        self.status = interaction.Status()
        if not interaction.InputFormatsIsNone():
            self.inputFormats = []
            for i in range(interaction.InputFormatsLength()):
                if interaction.InputFormats(i) is None:
                    self.inputFormats.append(None)
                else:
                    iOFormat_ = ubii.interactions.IOFormat.IOFormatT.InitFromObj(interaction.InputFormats(i))
                    self.inputFormats.append(iOFormat_)
        if not interaction.OutputFormatsIsNone():
            self.outputFormats = []
            for i in range(interaction.OutputFormatsLength()):
                if interaction.OutputFormats(i) is None:
                    self.outputFormats.append(None)
                else:
                    iOFormat_ = ubii.interactions.IOFormat.IOFormatT.InitFromObj(interaction.OutputFormats(i))
                    self.outputFormats.append(iOFormat_)
        self.onCreated = interaction.OnCreated()
        self.processingCallback = interaction.ProcessingCallback()
        self.processFrequency = interaction.ProcessFrequency()

    # InteractionT
    def Pack(self, builder):
        if self.id is not None:
            id = builder.CreateString(self.id)
        if self.name is not None:
            name = builder.CreateString(self.name)
        if self.authors is not None:
            authorslist = []
            for i in range(len(self.authors)):
                authorslist.append(builder.CreateString(self.authors[i]))
            InteractionStartAuthorsVector(builder, len(self.authors))
            for i in reversed(range(len(self.authors))):
                builder.PrependUOffsetTRelative(authorslist[i])
            authors = builder.EndVector(len(self.authors))
        if self.tags is not None:
            tagslist = []
            for i in range(len(self.tags)):
                tagslist.append(builder.CreateString(self.tags[i]))
            InteractionStartTagsVector(builder, len(self.tags))
            for i in reversed(range(len(self.tags))):
                builder.PrependUOffsetTRelative(tagslist[i])
            tags = builder.EndVector(len(self.tags))
        if self.description is not None:
            description = builder.CreateString(self.description)
        if self.inputFormats is not None:
            inputFormatslist = []
            for i in range(len(self.inputFormats)):
                inputFormatslist.append(self.inputFormats[i].Pack(builder))
            InteractionStartInputFormatsVector(builder, len(self.inputFormats))
            for i in reversed(range(len(self.inputFormats))):
                builder.PrependUOffsetTRelative(inputFormatslist[i])
            inputFormats = builder.EndVector(len(self.inputFormats))
        if self.outputFormats is not None:
            outputFormatslist = []
            for i in range(len(self.outputFormats)):
                outputFormatslist.append(self.outputFormats[i].Pack(builder))
            InteractionStartOutputFormatsVector(builder, len(self.outputFormats))
            for i in reversed(range(len(self.outputFormats))):
                builder.PrependUOffsetTRelative(outputFormatslist[i])
            outputFormats = builder.EndVector(len(self.outputFormats))
        if self.onCreated is not None:
            onCreated = builder.CreateString(self.onCreated)
        if self.processingCallback is not None:
            processingCallback = builder.CreateString(self.processingCallback)
        InteractionStart(builder)
        if self.id is not None:
            InteractionAddId(builder, id)
        if self.name is not None:
            InteractionAddName(builder, name)
        if self.authors is not None:
            InteractionAddAuthors(builder, authors)
        if self.tags is not None:
            InteractionAddTags(builder, tags)
        if self.description is not None:
            InteractionAddDescription(builder, description)
        InteractionAddStatus(builder, self.status)
        if self.inputFormats is not None:
            InteractionAddInputFormats(builder, inputFormats)
        if self.outputFormats is not None:
            InteractionAddOutputFormats(builder, outputFormats)
        if self.onCreated is not None:
            InteractionAddOnCreated(builder, onCreated)
        if self.processingCallback is not None:
            InteractionAddProcessingCallback(builder, processingCallback)
        InteractionAddProcessFrequency(builder, self.processFrequency)
        interaction = InteractionEnd(builder)
        return interaction
