// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTERACTION_UBII_INTERACTIONS_H_
#define FLATBUFFERS_GENERATED_INTERACTION_UBII_INTERACTIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "ioFormat_generated.h"

namespace ubii {
namespace interactions {

struct Interaction;

enum InteractionStatus {
  InteractionStatus_CREATED = 0,
  InteractionStatus_INITIALIZED = 1,
  InteractionStatus_PROCESSING = 2,
  InteractionStatus_HALTED = 3,
  InteractionStatus_MIN = InteractionStatus_CREATED,
  InteractionStatus_MAX = InteractionStatus_HALTED
};

inline const InteractionStatus (&EnumValuesInteractionStatus())[4] {
  static const InteractionStatus values[] = {
    InteractionStatus_CREATED,
    InteractionStatus_INITIALIZED,
    InteractionStatus_PROCESSING,
    InteractionStatus_HALTED
  };
  return values;
}

inline const char * const *EnumNamesInteractionStatus() {
  static const char * const names[] = {
    "CREATED",
    "INITIALIZED",
    "PROCESSING",
    "HALTED",
    nullptr
  };
  return names;
}

inline const char *EnumNameInteractionStatus(InteractionStatus e) {
  if (e < InteractionStatus_CREATED || e > InteractionStatus_HALTED) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesInteractionStatus()[index];
}

struct Interaction FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_AUTHORS = 8,
    VT_TAGS = 10,
    VT_DESCRIPTION = 12,
    VT_STATUS = 14,
    VT_INPUT_FORMATS = 16,
    VT_OUTPUT_FORMATS = 18,
    VT_ON_CREATED = 20,
    VT_PROCESSING_CALLBACK = 22,
    VT_PROCESS_FREQUENCY = 24
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *authors() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_AUTHORS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *tags() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TAGS);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  InteractionStatus status() const {
    return static_cast<InteractionStatus>(GetField<int8_t>(VT_STATUS, 0));
  }
  const flatbuffers::Vector<flatbuffers::Offset<IOFormat>> *input_formats() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<IOFormat>> *>(VT_INPUT_FORMATS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<IOFormat>> *output_formats() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<IOFormat>> *>(VT_OUTPUT_FORMATS);
  }
  const flatbuffers::String *on_created() const {
    return GetPointer<const flatbuffers::String *>(VT_ON_CREATED);
  }
  const flatbuffers::String *processing_callback() const {
    return GetPointer<const flatbuffers::String *>(VT_PROCESSING_CALLBACK);
  }
  float process_frequency() const {
    return GetField<float>(VT_PROCESS_FREQUENCY, 0.0f);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_AUTHORS) &&
           verifier.VerifyVector(authors()) &&
           verifier.VerifyVectorOfStrings(authors()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyField<int8_t>(verifier, VT_STATUS) &&
           VerifyOffset(verifier, VT_INPUT_FORMATS) &&
           verifier.VerifyVector(input_formats()) &&
           verifier.VerifyVectorOfTables(input_formats()) &&
           VerifyOffset(verifier, VT_OUTPUT_FORMATS) &&
           verifier.VerifyVector(output_formats()) &&
           verifier.VerifyVectorOfTables(output_formats()) &&
           VerifyOffset(verifier, VT_ON_CREATED) &&
           verifier.VerifyString(on_created()) &&
           VerifyOffset(verifier, VT_PROCESSING_CALLBACK) &&
           verifier.VerifyString(processing_callback()) &&
           VerifyField<float>(verifier, VT_PROCESS_FREQUENCY) &&
           verifier.EndTable();
  }
};

struct InteractionBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Interaction::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Interaction::VT_NAME, name);
  }
  void add_authors(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> authors) {
    fbb_.AddOffset(Interaction::VT_AUTHORS, authors);
  }
  void add_tags(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tags) {
    fbb_.AddOffset(Interaction::VT_TAGS, tags);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(Interaction::VT_DESCRIPTION, description);
  }
  void add_status(InteractionStatus status) {
    fbb_.AddElement<int8_t>(Interaction::VT_STATUS, static_cast<int8_t>(status), 0);
  }
  void add_input_formats(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IOFormat>>> input_formats) {
    fbb_.AddOffset(Interaction::VT_INPUT_FORMATS, input_formats);
  }
  void add_output_formats(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IOFormat>>> output_formats) {
    fbb_.AddOffset(Interaction::VT_OUTPUT_FORMATS, output_formats);
  }
  void add_on_created(flatbuffers::Offset<flatbuffers::String> on_created) {
    fbb_.AddOffset(Interaction::VT_ON_CREATED, on_created);
  }
  void add_processing_callback(flatbuffers::Offset<flatbuffers::String> processing_callback) {
    fbb_.AddOffset(Interaction::VT_PROCESSING_CALLBACK, processing_callback);
  }
  void add_process_frequency(float process_frequency) {
    fbb_.AddElement<float>(Interaction::VT_PROCESS_FREQUENCY, process_frequency, 0.0f);
  }
  explicit InteractionBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InteractionBuilder &operator=(const InteractionBuilder &);
  flatbuffers::Offset<Interaction> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Interaction>(end);
    return o;
  }
};

inline flatbuffers::Offset<Interaction> CreateInteraction(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> authors = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tags = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    InteractionStatus status = InteractionStatus_CREATED,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IOFormat>>> input_formats = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<IOFormat>>> output_formats = 0,
    flatbuffers::Offset<flatbuffers::String> on_created = 0,
    flatbuffers::Offset<flatbuffers::String> processing_callback = 0,
    float process_frequency = 0.0f) {
  InteractionBuilder builder_(_fbb);
  builder_.add_process_frequency(process_frequency);
  builder_.add_processing_callback(processing_callback);
  builder_.add_on_created(on_created);
  builder_.add_output_formats(output_formats);
  builder_.add_input_formats(input_formats);
  builder_.add_description(description);
  builder_.add_tags(tags);
  builder_.add_authors(authors);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_status(status);
  return builder_.Finish();
}

inline flatbuffers::Offset<Interaction> CreateInteractionDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *authors = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *tags = nullptr,
    const char *description = nullptr,
    InteractionStatus status = InteractionStatus_CREATED,
    const std::vector<flatbuffers::Offset<IOFormat>> *input_formats = nullptr,
    const std::vector<flatbuffers::Offset<IOFormat>> *output_formats = nullptr,
    const char *on_created = nullptr,
    const char *processing_callback = nullptr,
    float process_frequency = 0.0f) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto authors__ = authors ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*authors) : 0;
  auto tags__ = tags ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*tags) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto input_formats__ = input_formats ? _fbb.CreateVector<flatbuffers::Offset<IOFormat>>(*input_formats) : 0;
  auto output_formats__ = output_formats ? _fbb.CreateVector<flatbuffers::Offset<IOFormat>>(*output_formats) : 0;
  auto on_created__ = on_created ? _fbb.CreateString(on_created) : 0;
  auto processing_callback__ = processing_callback ? _fbb.CreateString(processing_callback) : 0;
  return ubii::interactions::CreateInteraction(
      _fbb,
      id__,
      name__,
      authors__,
      tags__,
      description__,
      status,
      input_formats__,
      output_formats__,
      on_created__,
      processing_callback__,
      process_frequency);
}

inline const ubii::interactions::Interaction *GetInteraction(const void *buf) {
  return flatbuffers::GetRoot<ubii::interactions::Interaction>(buf);
}

inline const ubii::interactions::Interaction *GetSizePrefixedInteraction(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::interactions::Interaction>(buf);
}

inline bool VerifyInteractionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::interactions::Interaction>(nullptr);
}

inline bool VerifySizePrefixedInteractionBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::interactions::Interaction>(nullptr);
}

inline void FinishInteractionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::interactions::Interaction> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInteractionBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::interactions::Interaction> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace interactions
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_INTERACTION_UBII_INTERACTIONS_H_
