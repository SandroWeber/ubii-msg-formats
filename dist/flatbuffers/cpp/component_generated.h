// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_COMPONENT_UBII_DEVICES_H_
#define FLATBUFFERS_GENERATED_COMPONENT_UBII_DEVICES_H_

#include "flatbuffers/flatbuffers.h"

namespace ubii {
namespace devices {

struct Component;

enum IOType {
  IOType_INPUT = 0,
  IOType_OUTPUT = 1,
  IOType_MIN = IOType_INPUT,
  IOType_MAX = IOType_OUTPUT
};

inline const IOType (&EnumValuesIOType())[2] {
  static const IOType values[] = {
    IOType_INPUT,
    IOType_OUTPUT
  };
  return values;
}

inline const char * const *EnumNamesIOType() {
  static const char * const names[] = {
    "INPUT",
    "OUTPUT",
    nullptr
  };
  return names;
}

inline const char *EnumNameIOType(IOType e) {
  if (e < IOType_INPUT || e > IOType_OUTPUT) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesIOType()[index];
}

struct Component FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_TAGS = 8,
    VT_DESCRIPTION = 10,
    VT_DEVICE_ID = 12,
    VT_TOPIC = 14,
    VT_MESSAGE_FORMAT = 16,
    VT_IO_TYPE = 18
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *tags() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(VT_TAGS);
  }
  const flatbuffers::String *description() const {
    return GetPointer<const flatbuffers::String *>(VT_DESCRIPTION);
  }
  const flatbuffers::String *device_id() const {
    return GetPointer<const flatbuffers::String *>(VT_DEVICE_ID);
  }
  const flatbuffers::String *topic() const {
    return GetPointer<const flatbuffers::String *>(VT_TOPIC);
  }
  const flatbuffers::String *message_format() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE_FORMAT);
  }
  IOType io_type() const {
    return static_cast<IOType>(GetField<int8_t>(VT_IO_TYPE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_TAGS) &&
           verifier.VerifyVector(tags()) &&
           verifier.VerifyVectorOfStrings(tags()) &&
           VerifyOffset(verifier, VT_DESCRIPTION) &&
           verifier.VerifyString(description()) &&
           VerifyOffset(verifier, VT_DEVICE_ID) &&
           verifier.VerifyString(device_id()) &&
           VerifyOffset(verifier, VT_TOPIC) &&
           verifier.VerifyString(topic()) &&
           VerifyOffset(verifier, VT_MESSAGE_FORMAT) &&
           verifier.VerifyString(message_format()) &&
           VerifyField<int8_t>(verifier, VT_IO_TYPE) &&
           verifier.EndTable();
  }
};

struct ComponentBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(Component::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(Component::VT_NAME, name);
  }
  void add_tags(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tags) {
    fbb_.AddOffset(Component::VT_TAGS, tags);
  }
  void add_description(flatbuffers::Offset<flatbuffers::String> description) {
    fbb_.AddOffset(Component::VT_DESCRIPTION, description);
  }
  void add_device_id(flatbuffers::Offset<flatbuffers::String> device_id) {
    fbb_.AddOffset(Component::VT_DEVICE_ID, device_id);
  }
  void add_topic(flatbuffers::Offset<flatbuffers::String> topic) {
    fbb_.AddOffset(Component::VT_TOPIC, topic);
  }
  void add_message_format(flatbuffers::Offset<flatbuffers::String> message_format) {
    fbb_.AddOffset(Component::VT_MESSAGE_FORMAT, message_format);
  }
  void add_io_type(IOType io_type) {
    fbb_.AddElement<int8_t>(Component::VT_IO_TYPE, static_cast<int8_t>(io_type), 0);
  }
  explicit ComponentBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ComponentBuilder &operator=(const ComponentBuilder &);
  flatbuffers::Offset<Component> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Component>(end);
    return o;
  }
};

inline flatbuffers::Offset<Component> CreateComponent(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> tags = 0,
    flatbuffers::Offset<flatbuffers::String> description = 0,
    flatbuffers::Offset<flatbuffers::String> device_id = 0,
    flatbuffers::Offset<flatbuffers::String> topic = 0,
    flatbuffers::Offset<flatbuffers::String> message_format = 0,
    IOType io_type = IOType_INPUT) {
  ComponentBuilder builder_(_fbb);
  builder_.add_message_format(message_format);
  builder_.add_topic(topic);
  builder_.add_device_id(device_id);
  builder_.add_description(description);
  builder_.add_tags(tags);
  builder_.add_name(name);
  builder_.add_id(id);
  builder_.add_io_type(io_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Component> CreateComponentDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const std::vector<flatbuffers::Offset<flatbuffers::String>> *tags = nullptr,
    const char *description = nullptr,
    const char *device_id = nullptr,
    const char *topic = nullptr,
    const char *message_format = nullptr,
    IOType io_type = IOType_INPUT) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto tags__ = tags ? _fbb.CreateVector<flatbuffers::Offset<flatbuffers::String>>(*tags) : 0;
  auto description__ = description ? _fbb.CreateString(description) : 0;
  auto device_id__ = device_id ? _fbb.CreateString(device_id) : 0;
  auto topic__ = topic ? _fbb.CreateString(topic) : 0;
  auto message_format__ = message_format ? _fbb.CreateString(message_format) : 0;
  return ubii::devices::CreateComponent(
      _fbb,
      id__,
      name__,
      tags__,
      description__,
      device_id__,
      topic__,
      message_format__,
      io_type);
}

inline const ubii::devices::Component *GetComponent(const void *buf) {
  return flatbuffers::GetRoot<ubii::devices::Component>(buf);
}

inline const ubii::devices::Component *GetSizePrefixedComponent(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::devices::Component>(buf);
}

inline bool VerifyComponentBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::devices::Component>(nullptr);
}

inline bool VerifySizePrefixedComponentBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::devices::Component>(nullptr);
}

inline void FinishComponentBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::devices::Component> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedComponentBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::devices::Component> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace devices
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_COMPONENT_UBII_DEVICES_H_
