// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_VECTOR8_UBII_DATASTRUCTURES_H_
#define FLATBUFFERS_GENERATED_VECTOR8_UBII_DATASTRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

namespace ubii {
namespace dataStructures {

struct Vector8;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vector8 FLATBUFFERS_FINAL_CLASS {
 private:
  float v0_;
  float v1_;
  float v2_;
  float v3_;
  float v4_;
  float v5_;
  float v6_;
  float v7_;

 public:
  Vector8() {
    memset(static_cast<void *>(this), 0, sizeof(Vector8));
  }
  Vector8(float _v0, float _v1, float _v2, float _v3, float _v4, float _v5, float _v6, float _v7)
      : v0_(flatbuffers::EndianScalar(_v0)),
        v1_(flatbuffers::EndianScalar(_v1)),
        v2_(flatbuffers::EndianScalar(_v2)),
        v3_(flatbuffers::EndianScalar(_v3)),
        v4_(flatbuffers::EndianScalar(_v4)),
        v5_(flatbuffers::EndianScalar(_v5)),
        v6_(flatbuffers::EndianScalar(_v6)),
        v7_(flatbuffers::EndianScalar(_v7)) {
  }
  float v0() const {
    return flatbuffers::EndianScalar(v0_);
  }
  float v1() const {
    return flatbuffers::EndianScalar(v1_);
  }
  float v2() const {
    return flatbuffers::EndianScalar(v2_);
  }
  float v3() const {
    return flatbuffers::EndianScalar(v3_);
  }
  float v4() const {
    return flatbuffers::EndianScalar(v4_);
  }
  float v5() const {
    return flatbuffers::EndianScalar(v5_);
  }
  float v6() const {
    return flatbuffers::EndianScalar(v6_);
  }
  float v7() const {
    return flatbuffers::EndianScalar(v7_);
  }
};
FLATBUFFERS_STRUCT_END(Vector8, 32);

}  // namespace dataStructures
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_VECTOR8_UBII_DATASTRUCTURES_H_
