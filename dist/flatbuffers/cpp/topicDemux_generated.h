// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TOPICDEMUX_UBII_DEVICES_H_
#define FLATBUFFERS_GENERATED_TOPICDEMUX_UBII_DEVICES_H_

#include "flatbuffers/flatbuffers.h"

namespace ubii {
namespace devices {

struct TopicDemux;

struct TopicDemux FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_NAME = 6,
    VT_DATA_TYPE = 8,
    VT_OUTPUT_TOPIC_FORMAT = 10
  };
  const flatbuffers::String *id() const {
    return GetPointer<const flatbuffers::String *>(VT_ID);
  }
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  const flatbuffers::String *data_type() const {
    return GetPointer<const flatbuffers::String *>(VT_DATA_TYPE);
  }
  const flatbuffers::String *output_topic_format() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT_TOPIC_FORMAT);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ID) &&
           verifier.VerifyString(id()) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyOffset(verifier, VT_DATA_TYPE) &&
           verifier.VerifyString(data_type()) &&
           VerifyOffset(verifier, VT_OUTPUT_TOPIC_FORMAT) &&
           verifier.VerifyString(output_topic_format()) &&
           verifier.EndTable();
  }
};

struct TopicDemuxBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_id(flatbuffers::Offset<flatbuffers::String> id) {
    fbb_.AddOffset(TopicDemux::VT_ID, id);
  }
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(TopicDemux::VT_NAME, name);
  }
  void add_data_type(flatbuffers::Offset<flatbuffers::String> data_type) {
    fbb_.AddOffset(TopicDemux::VT_DATA_TYPE, data_type);
  }
  void add_output_topic_format(flatbuffers::Offset<flatbuffers::String> output_topic_format) {
    fbb_.AddOffset(TopicDemux::VT_OUTPUT_TOPIC_FORMAT, output_topic_format);
  }
  explicit TopicDemuxBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TopicDemuxBuilder &operator=(const TopicDemuxBuilder &);
  flatbuffers::Offset<TopicDemux> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TopicDemux>(end);
    return o;
  }
};

inline flatbuffers::Offset<TopicDemux> CreateTopicDemux(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> id = 0,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    flatbuffers::Offset<flatbuffers::String> data_type = 0,
    flatbuffers::Offset<flatbuffers::String> output_topic_format = 0) {
  TopicDemuxBuilder builder_(_fbb);
  builder_.add_output_topic_format(output_topic_format);
  builder_.add_data_type(data_type);
  builder_.add_name(name);
  builder_.add_id(id);
  return builder_.Finish();
}

inline flatbuffers::Offset<TopicDemux> CreateTopicDemuxDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *id = nullptr,
    const char *name = nullptr,
    const char *data_type = nullptr,
    const char *output_topic_format = nullptr) {
  auto id__ = id ? _fbb.CreateString(id) : 0;
  auto name__ = name ? _fbb.CreateString(name) : 0;
  auto data_type__ = data_type ? _fbb.CreateString(data_type) : 0;
  auto output_topic_format__ = output_topic_format ? _fbb.CreateString(output_topic_format) : 0;
  return ubii::devices::CreateTopicDemux(
      _fbb,
      id__,
      name__,
      data_type__,
      output_topic_format__);
}

inline const ubii::devices::TopicDemux *GetTopicDemux(const void *buf) {
  return flatbuffers::GetRoot<ubii::devices::TopicDemux>(buf);
}

inline const ubii::devices::TopicDemux *GetSizePrefixedTopicDemux(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::devices::TopicDemux>(buf);
}

inline bool VerifyTopicDemuxBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::devices::TopicDemux>(nullptr);
}

inline bool VerifySizePrefixedTopicDemuxBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::devices::TopicDemux>(nullptr);
}

inline void FinishTopicDemuxBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::devices::TopicDemux> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTopicDemuxBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::devices::TopicDemux> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace devices
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_TOPICDEMUX_UBII_DEVICES_H_
