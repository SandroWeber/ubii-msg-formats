// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POSE3D_UBII_DATASTRUCTURES_H_
#define FLATBUFFERS_GENERATED_POSE3D_UBII_DATASTRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

#include "quaternion_generated.h"
#include "vector3_generated.h"

namespace ubii {
namespace dataStructures {

struct Orientation3D;

struct Pose3D;

struct Orientation3D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_QUATERNION = 4,
    VT_EULER = 6
  };
  const Quaternion *quaternion() const {
    return GetStruct<const Quaternion *>(VT_QUATERNION);
  }
  const Vector3 *euler() const {
    return GetStruct<const Vector3 *>(VT_EULER);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Quaternion>(verifier, VT_QUATERNION) &&
           VerifyField<Vector3>(verifier, VT_EULER) &&
           verifier.EndTable();
  }
};

struct Orientation3DBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_quaternion(const Quaternion *quaternion) {
    fbb_.AddStruct(Orientation3D::VT_QUATERNION, quaternion);
  }
  void add_euler(const Vector3 *euler) {
    fbb_.AddStruct(Orientation3D::VT_EULER, euler);
  }
  explicit Orientation3DBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Orientation3DBuilder &operator=(const Orientation3DBuilder &);
  flatbuffers::Offset<Orientation3D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Orientation3D>(end);
    return o;
  }
};

inline flatbuffers::Offset<Orientation3D> CreateOrientation3D(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Quaternion *quaternion = 0,
    const Vector3 *euler = 0) {
  Orientation3DBuilder builder_(_fbb);
  builder_.add_euler(euler);
  builder_.add_quaternion(quaternion);
  return builder_.Finish();
}

struct Pose3D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POSITION = 4,
    VT_ORIENTATION = 6
  };
  const Vector3 *position() const {
    return GetStruct<const Vector3 *>(VT_POSITION);
  }
  const Orientation3D *orientation() const {
    return GetPointer<const Orientation3D *>(VT_ORIENTATION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vector3>(verifier, VT_POSITION) &&
           VerifyOffset(verifier, VT_ORIENTATION) &&
           verifier.VerifyTable(orientation()) &&
           verifier.EndTable();
  }
};

struct Pose3DBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_position(const Vector3 *position) {
    fbb_.AddStruct(Pose3D::VT_POSITION, position);
  }
  void add_orientation(flatbuffers::Offset<Orientation3D> orientation) {
    fbb_.AddOffset(Pose3D::VT_ORIENTATION, orientation);
  }
  explicit Pose3DBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Pose3DBuilder &operator=(const Pose3DBuilder &);
  flatbuffers::Offset<Pose3D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Pose3D>(end);
    return o;
  }
};

inline flatbuffers::Offset<Pose3D> CreatePose3D(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vector3 *position = 0,
    flatbuffers::Offset<Orientation3D> orientation = 0) {
  Pose3DBuilder builder_(_fbb);
  builder_.add_orientation(orientation);
  builder_.add_position(position);
  return builder_.Finish();
}

inline const ubii::dataStructures::Pose3D *GetPose3D(const void *buf) {
  return flatbuffers::GetRoot<ubii::dataStructures::Pose3D>(buf);
}

inline const ubii::dataStructures::Pose3D *GetSizePrefixedPose3D(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::dataStructures::Pose3D>(buf);
}

inline bool VerifyPose3DBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::dataStructures::Pose3D>(nullptr);
}

inline bool VerifySizePrefixedPose3DBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::dataStructures::Pose3D>(nullptr);
}

inline void FinishPose3DBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::Pose3D> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPose3DBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::Pose3D> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace dataStructures
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_POSE3D_UBII_DATASTRUCTURES_H_
