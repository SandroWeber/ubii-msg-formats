// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IOMAPPING_UBII_SESSIONS_H_
#define FLATBUFFERS_GENERATED_IOMAPPING_UBII_SESSIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "topicDemux_generated.h"
#include "topicMux_generated.h"
#include "interactionInputMapping_generated.h"
#include "interactionOutputMapping_generated.h"

namespace ubii {
namespace sessions {

struct IOMapping;

struct IOMapping FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_INTERACTION_ID = 4,
    VT_INPUT_MAPPINGS = 6,
    VT_OUTPUT_MAPPINGS = 8
  };
  const flatbuffers::String *interaction_id() const {
    return GetPointer<const flatbuffers::String *>(VT_INTERACTION_ID);
  }
  const flatbuffers::Vector<flatbuffers::Offset<InteractionInputMapping>> *input_mappings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<InteractionInputMapping>> *>(VT_INPUT_MAPPINGS);
  }
  const flatbuffers::Vector<flatbuffers::Offset<InteractionOutputMapping>> *output_mappings() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<InteractionOutputMapping>> *>(VT_OUTPUT_MAPPINGS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_INTERACTION_ID) &&
           verifier.VerifyString(interaction_id()) &&
           VerifyOffset(verifier, VT_INPUT_MAPPINGS) &&
           verifier.VerifyVector(input_mappings()) &&
           verifier.VerifyVectorOfTables(input_mappings()) &&
           VerifyOffset(verifier, VT_OUTPUT_MAPPINGS) &&
           verifier.VerifyVector(output_mappings()) &&
           verifier.VerifyVectorOfTables(output_mappings()) &&
           verifier.EndTable();
  }
};

struct IOMappingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_interaction_id(flatbuffers::Offset<flatbuffers::String> interaction_id) {
    fbb_.AddOffset(IOMapping::VT_INTERACTION_ID, interaction_id);
  }
  void add_input_mappings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<InteractionInputMapping>>> input_mappings) {
    fbb_.AddOffset(IOMapping::VT_INPUT_MAPPINGS, input_mappings);
  }
  void add_output_mappings(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<InteractionOutputMapping>>> output_mappings) {
    fbb_.AddOffset(IOMapping::VT_OUTPUT_MAPPINGS, output_mappings);
  }
  explicit IOMappingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  IOMappingBuilder &operator=(const IOMappingBuilder &);
  flatbuffers::Offset<IOMapping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<IOMapping>(end);
    return o;
  }
};

inline flatbuffers::Offset<IOMapping> CreateIOMapping(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> interaction_id = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<InteractionInputMapping>>> input_mappings = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<InteractionOutputMapping>>> output_mappings = 0) {
  IOMappingBuilder builder_(_fbb);
  builder_.add_output_mappings(output_mappings);
  builder_.add_input_mappings(input_mappings);
  builder_.add_interaction_id(interaction_id);
  return builder_.Finish();
}

inline flatbuffers::Offset<IOMapping> CreateIOMappingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *interaction_id = nullptr,
    const std::vector<flatbuffers::Offset<InteractionInputMapping>> *input_mappings = nullptr,
    const std::vector<flatbuffers::Offset<InteractionOutputMapping>> *output_mappings = nullptr) {
  auto interaction_id__ = interaction_id ? _fbb.CreateString(interaction_id) : 0;
  auto input_mappings__ = input_mappings ? _fbb.CreateVector<flatbuffers::Offset<InteractionInputMapping>>(*input_mappings) : 0;
  auto output_mappings__ = output_mappings ? _fbb.CreateVector<flatbuffers::Offset<InteractionOutputMapping>>(*output_mappings) : 0;
  return ubii::sessions::CreateIOMapping(
      _fbb,
      interaction_id__,
      input_mappings__,
      output_mappings__);
}

inline const ubii::sessions::IOMapping *GetIOMapping(const void *buf) {
  return flatbuffers::GetRoot<ubii::sessions::IOMapping>(buf);
}

inline const ubii::sessions::IOMapping *GetSizePrefixedIOMapping(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::sessions::IOMapping>(buf);
}

inline bool VerifyIOMappingBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::sessions::IOMapping>(nullptr);
}

inline bool VerifySizePrefixedIOMappingBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::sessions::IOMapping>(nullptr);
}

inline void FinishIOMappingBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::sessions::IOMapping> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIOMappingBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::sessions::IOMapping> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace sessions
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_IOMAPPING_UBII_SESSIONS_H_
