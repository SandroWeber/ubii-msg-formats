// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MATRIX3X2_UBII_DATASTRUCTURES_H_
#define FLATBUFFERS_GENERATED_MATRIX3X2_UBII_DATASTRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

namespace ubii {
namespace dataStructures {

struct Matrix3x2;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Matrix3x2 FLATBUFFERS_FINAL_CLASS {
 private:
  float m00_;
  float m01_;
  float m10_;
  float m11_;
  float m20_;
  float m21_;

 public:
  Matrix3x2() {
    memset(static_cast<void *>(this), 0, sizeof(Matrix3x2));
  }
  Matrix3x2(float _m00, float _m01, float _m10, float _m11, float _m20, float _m21)
      : m00_(flatbuffers::EndianScalar(_m00)),
        m01_(flatbuffers::EndianScalar(_m01)),
        m10_(flatbuffers::EndianScalar(_m10)),
        m11_(flatbuffers::EndianScalar(_m11)),
        m20_(flatbuffers::EndianScalar(_m20)),
        m21_(flatbuffers::EndianScalar(_m21)) {
  }
  float m00() const {
    return flatbuffers::EndianScalar(m00_);
  }
  float m01() const {
    return flatbuffers::EndianScalar(m01_);
  }
  float m10() const {
    return flatbuffers::EndianScalar(m10_);
  }
  float m11() const {
    return flatbuffers::EndianScalar(m11_);
  }
  float m20() const {
    return flatbuffers::EndianScalar(m20_);
  }
  float m21() const {
    return flatbuffers::EndianScalar(m21_);
  }
};
FLATBUFFERS_STRUCT_END(Matrix3x2, 24);

}  // namespace dataStructures
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_MATRIX3X2_UBII_DATASTRUCTURES_H_
