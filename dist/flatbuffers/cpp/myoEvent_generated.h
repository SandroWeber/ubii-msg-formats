// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MYOEVENT_UBII_DATASTRUCTURES_H_
#define FLATBUFFERS_GENERATED_MYOEVENT_UBII_DATASTRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

#include "handGestureType_generated.h"
#include "quaternion_generated.h"
#include "vector3_generated.h"
#include "vector8_generated.h"

namespace ubii {
namespace dataStructures {

struct MyoEvent;

struct MyoEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_EMG = 4,
    VT_ORIENTATION = 6,
    VT_GYROSCOPE = 8,
    VT_ACCELEROMETER = 10,
    VT_GESTURE = 12
  };
  const Vector8 *emg() const {
    return GetStruct<const Vector8 *>(VT_EMG);
  }
  const Quaternion *orientation() const {
    return GetStruct<const Quaternion *>(VT_ORIENTATION);
  }
  const Vector3 *gyroscope() const {
    return GetStruct<const Vector3 *>(VT_GYROSCOPE);
  }
  const Vector3 *accelerometer() const {
    return GetStruct<const Vector3 *>(VT_ACCELEROMETER);
  }
  HandGestureType gesture() const {
    return static_cast<HandGestureType>(GetField<int8_t>(VT_GESTURE, 0));
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<Vector8>(verifier, VT_EMG) &&
           VerifyField<Quaternion>(verifier, VT_ORIENTATION) &&
           VerifyField<Vector3>(verifier, VT_GYROSCOPE) &&
           VerifyField<Vector3>(verifier, VT_ACCELEROMETER) &&
           VerifyField<int8_t>(verifier, VT_GESTURE) &&
           verifier.EndTable();
  }
};

struct MyoEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_emg(const Vector8 *emg) {
    fbb_.AddStruct(MyoEvent::VT_EMG, emg);
  }
  void add_orientation(const Quaternion *orientation) {
    fbb_.AddStruct(MyoEvent::VT_ORIENTATION, orientation);
  }
  void add_gyroscope(const Vector3 *gyroscope) {
    fbb_.AddStruct(MyoEvent::VT_GYROSCOPE, gyroscope);
  }
  void add_accelerometer(const Vector3 *accelerometer) {
    fbb_.AddStruct(MyoEvent::VT_ACCELEROMETER, accelerometer);
  }
  void add_gesture(HandGestureType gesture) {
    fbb_.AddElement<int8_t>(MyoEvent::VT_GESTURE, static_cast<int8_t>(gesture), 0);
  }
  explicit MyoEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MyoEventBuilder &operator=(const MyoEventBuilder &);
  flatbuffers::Offset<MyoEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MyoEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<MyoEvent> CreateMyoEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    const Vector8 *emg = 0,
    const Quaternion *orientation = 0,
    const Vector3 *gyroscope = 0,
    const Vector3 *accelerometer = 0,
    HandGestureType gesture = HandGestureType_REST) {
  MyoEventBuilder builder_(_fbb);
  builder_.add_accelerometer(accelerometer);
  builder_.add_gyroscope(gyroscope);
  builder_.add_orientation(orientation);
  builder_.add_emg(emg);
  builder_.add_gesture(gesture);
  return builder_.Finish();
}

inline const ubii::dataStructures::MyoEvent *GetMyoEvent(const void *buf) {
  return flatbuffers::GetRoot<ubii::dataStructures::MyoEvent>(buf);
}

inline const ubii::dataStructures::MyoEvent *GetSizePrefixedMyoEvent(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::dataStructures::MyoEvent>(buf);
}

inline bool VerifyMyoEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::dataStructures::MyoEvent>(nullptr);
}

inline bool VerifySizePrefixedMyoEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::dataStructures::MyoEvent>(nullptr);
}

inline void FinishMyoEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::MyoEvent> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMyoEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::MyoEvent> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace dataStructures
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_MYOEVENT_UBII_DATASTRUCTURES_H_
