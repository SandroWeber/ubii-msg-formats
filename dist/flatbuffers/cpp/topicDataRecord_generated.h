// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TOPICDATARECORD_UBII_TOPICDATA_H_
#define FLATBUFFERS_GENERATED_TOPICDATARECORD_UBII_TOPICDATA_H_

#include "flatbuffers/flatbuffers.h"

#include "topicDemux_generated.h"
#include "topicMux_generated.h"
#include "interaction_generated.h"
#include "ioFormat_generated.h"
#include "interactionInputMapping_generated.h"
#include "interactionOutputMapping_generated.h"
#include "ioMapping_generated.h"
#include "session_generated.h"
#include "buttonEventType_generated.h"
#include "color_generated.h"
#include "dataStructure_generated.h"
#include "handGestureType_generated.h"
#include "image_generated.h"
#include "keyEvent_generated.h"
#include "matrix3x2_generated.h"
#include "matrix4x4_generated.h"
#include "mouseEvent_generated.h"
#include "myoEvent_generated.h"
#include "object2d_generated.h"
#include "object3d_generated.h"
#include "pose2d_generated.h"
#include "pose3d_generated.h"
#include "quaternion_generated.h"
#include "timestamp_generated.h"
#include "touchEvent_generated.h"
#include "vector2_generated.h"
#include "vector3_generated.h"
#include "vector4_generated.h"
#include "vector8_generated.h"

namespace ubii {
namespace topicData {

struct TopicDataRecord;
struct TopicDataRecordT;

struct TopicDataRecordList;
struct TopicDataRecordListT;

struct TopicDataRecordT : public flatbuffers::NativeTable {
  typedef TopicDataRecord TableType;
  std::string topic;
  std::unique_ptr<ubii::dataStructures::Timestamp> timestamp;
  std::unique_ptr<ubii::dataStructures::DataStructureT> data;
  TopicDataRecordT() {
  }
};

struct TopicDataRecord FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TopicDataRecordT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOPIC = 4,
    VT_TIMESTAMP = 6,
    VT_DATA = 8
  };
  const flatbuffers::String *topic() const {
    return GetPointer<const flatbuffers::String *>(VT_TOPIC);
  }
  const ubii::dataStructures::Timestamp *timestamp() const {
    return GetStruct<const ubii::dataStructures::Timestamp *>(VT_TIMESTAMP);
  }
  const ubii::dataStructures::DataStructure *data() const {
    return GetPointer<const ubii::dataStructures::DataStructure *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOPIC) &&
           verifier.VerifyString(topic()) &&
           VerifyField<ubii::dataStructures::Timestamp>(verifier, VT_TIMESTAMP) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyTable(data()) &&
           verifier.EndTable();
  }
  TopicDataRecordT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TopicDataRecordT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TopicDataRecord> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TopicDataRecordT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TopicDataRecordBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_topic(flatbuffers::Offset<flatbuffers::String> topic) {
    fbb_.AddOffset(TopicDataRecord::VT_TOPIC, topic);
  }
  void add_timestamp(const ubii::dataStructures::Timestamp *timestamp) {
    fbb_.AddStruct(TopicDataRecord::VT_TIMESTAMP, timestamp);
  }
  void add_data(flatbuffers::Offset<ubii::dataStructures::DataStructure> data) {
    fbb_.AddOffset(TopicDataRecord::VT_DATA, data);
  }
  explicit TopicDataRecordBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TopicDataRecordBuilder &operator=(const TopicDataRecordBuilder &);
  flatbuffers::Offset<TopicDataRecord> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TopicDataRecord>(end);
    return o;
  }
};

inline flatbuffers::Offset<TopicDataRecord> CreateTopicDataRecord(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> topic = 0,
    const ubii::dataStructures::Timestamp *timestamp = 0,
    flatbuffers::Offset<ubii::dataStructures::DataStructure> data = 0) {
  TopicDataRecordBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_timestamp(timestamp);
  builder_.add_topic(topic);
  return builder_.Finish();
}

inline flatbuffers::Offset<TopicDataRecord> CreateTopicDataRecordDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *topic = nullptr,
    const ubii::dataStructures::Timestamp *timestamp = 0,
    flatbuffers::Offset<ubii::dataStructures::DataStructure> data = 0) {
  auto topic__ = topic ? _fbb.CreateString(topic) : 0;
  return ubii::topicData::CreateTopicDataRecord(
      _fbb,
      topic__,
      timestamp,
      data);
}

flatbuffers::Offset<TopicDataRecord> CreateTopicDataRecord(flatbuffers::FlatBufferBuilder &_fbb, const TopicDataRecordT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

struct TopicDataRecordListT : public flatbuffers::NativeTable {
  typedef TopicDataRecordList TableType;
  std::vector<std::unique_ptr<TopicDataRecordT>> elements;
  TopicDataRecordListT() {
  }
};

struct TopicDataRecordList FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TopicDataRecordListT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ELEMENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<TopicDataRecord>> *elements() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<TopicDataRecord>> *>(VT_ELEMENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_ELEMENTS) &&
           verifier.VerifyVector(elements()) &&
           verifier.VerifyVectorOfTables(elements()) &&
           verifier.EndTable();
  }
  TopicDataRecordListT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(TopicDataRecordListT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<TopicDataRecordList> Pack(flatbuffers::FlatBufferBuilder &_fbb, const TopicDataRecordListT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct TopicDataRecordListBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_elements(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TopicDataRecord>>> elements) {
    fbb_.AddOffset(TopicDataRecordList::VT_ELEMENTS, elements);
  }
  explicit TopicDataRecordListBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  TopicDataRecordListBuilder &operator=(const TopicDataRecordListBuilder &);
  flatbuffers::Offset<TopicDataRecordList> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TopicDataRecordList>(end);
    return o;
  }
};

inline flatbuffers::Offset<TopicDataRecordList> CreateTopicDataRecordList(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<TopicDataRecord>>> elements = 0) {
  TopicDataRecordListBuilder builder_(_fbb);
  builder_.add_elements(elements);
  return builder_.Finish();
}

inline flatbuffers::Offset<TopicDataRecordList> CreateTopicDataRecordListDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<TopicDataRecord>> *elements = nullptr) {
  auto elements__ = elements ? _fbb.CreateVector<flatbuffers::Offset<TopicDataRecord>>(*elements) : 0;
  return ubii::topicData::CreateTopicDataRecordList(
      _fbb,
      elements__);
}

flatbuffers::Offset<TopicDataRecordList> CreateTopicDataRecordList(flatbuffers::FlatBufferBuilder &_fbb, const TopicDataRecordListT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline TopicDataRecordT *TopicDataRecord::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TopicDataRecordT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void TopicDataRecord::UnPackTo(TopicDataRecordT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = topic(); if (_e) _o->topic = _e->str(); };
  { auto _e = timestamp(); if (_e) _o->timestamp = std::unique_ptr<ubii::dataStructures::Timestamp>(new ubii::dataStructures::Timestamp(*_e)); };
  { auto _e = data(); if (_e) _o->data = std::unique_ptr<ubii::dataStructures::DataStructureT>(_e->UnPack(_resolver)); };
}

inline flatbuffers::Offset<TopicDataRecord> TopicDataRecord::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TopicDataRecordT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTopicDataRecord(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TopicDataRecord> CreateTopicDataRecord(flatbuffers::FlatBufferBuilder &_fbb, const TopicDataRecordT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TopicDataRecordT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _topic = _o->topic.empty() ? 0 : _fbb.CreateString(_o->topic);
  auto _timestamp = _o->timestamp ? _o->timestamp.get() : 0;
  auto _data = _o->data ? CreateDataStructure(_fbb, _o->data.get(), _rehasher) : 0;
  return ubii::topicData::CreateTopicDataRecord(
      _fbb,
      _topic,
      _timestamp,
      _data);
}

inline TopicDataRecordListT *TopicDataRecordList::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new TopicDataRecordListT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void TopicDataRecordList::UnPackTo(TopicDataRecordListT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = elements(); if (_e) { _o->elements.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->elements[_i] = std::unique_ptr<TopicDataRecordT>(_e->Get(_i)->UnPack(_resolver)); } } };
}

inline flatbuffers::Offset<TopicDataRecordList> TopicDataRecordList::Pack(flatbuffers::FlatBufferBuilder &_fbb, const TopicDataRecordListT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateTopicDataRecordList(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<TopicDataRecordList> CreateTopicDataRecordList(flatbuffers::FlatBufferBuilder &_fbb, const TopicDataRecordListT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const TopicDataRecordListT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _elements = _o->elements.size() ? _fbb.CreateVector<flatbuffers::Offset<TopicDataRecord>> (_o->elements.size(), [](size_t i, _VectorArgs *__va) { return CreateTopicDataRecord(*__va->__fbb, __va->__o->elements[i].get(), __va->__rehasher); }, &_va ) : 0;
  return ubii::topicData::CreateTopicDataRecordList(
      _fbb,
      _elements);
}

inline const ubii::topicData::TopicDataRecord *GetTopicDataRecord(const void *buf) {
  return flatbuffers::GetRoot<ubii::topicData::TopicDataRecord>(buf);
}

inline const ubii::topicData::TopicDataRecord *GetSizePrefixedTopicDataRecord(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::topicData::TopicDataRecord>(buf);
}

inline bool VerifyTopicDataRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::topicData::TopicDataRecord>(nullptr);
}

inline bool VerifySizePrefixedTopicDataRecordBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::topicData::TopicDataRecord>(nullptr);
}

inline void FinishTopicDataRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::topicData::TopicDataRecord> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTopicDataRecordBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::topicData::TopicDataRecord> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<TopicDataRecordT> UnPackTopicDataRecord(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<TopicDataRecordT>(GetTopicDataRecord(buf)->UnPack(res));
}

}  // namespace topicData
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_TOPICDATARECORD_UBII_TOPICDATA_H_
