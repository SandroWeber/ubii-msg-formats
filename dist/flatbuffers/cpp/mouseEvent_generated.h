// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MOUSEEVENT_UBII_DATASTRUCTURES_H_
#define FLATBUFFERS_GENERATED_MOUSEEVENT_UBII_DATASTRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

#include "buttonEventType_generated.h"

namespace ubii {
namespace dataStructures {

struct MouseEvent;
struct MouseEventBuilder;
struct MouseEventT;

struct MouseEventT : public flatbuffers::NativeTable {
  typedef MouseEvent TableType;
  ubii::dataStructures::ButtonEventType type;
  int8_t button;
  MouseEventT()
      : type(ubii::dataStructures::ButtonEventType_UP),
        button(0) {
  }
};

struct MouseEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef MouseEventT NativeTableType;
  typedef MouseEventBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BUTTON = 6
  };
  ubii::dataStructures::ButtonEventType type() const {
    return static_cast<ubii::dataStructures::ButtonEventType>(GetField<int8_t>(VT_TYPE, 0));
  }
  int8_t button() const {
    return GetField<int8_t>(VT_BUTTON, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<int8_t>(verifier, VT_BUTTON) &&
           verifier.EndTable();
  }
  MouseEventT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(MouseEventT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<MouseEvent> Pack(flatbuffers::FlatBufferBuilder &_fbb, const MouseEventT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct MouseEventBuilder {
  typedef MouseEvent Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(ubii::dataStructures::ButtonEventType type) {
    fbb_.AddElement<int8_t>(MouseEvent::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_button(int8_t button) {
    fbb_.AddElement<int8_t>(MouseEvent::VT_BUTTON, button, 0);
  }
  explicit MouseEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MouseEventBuilder &operator=(const MouseEventBuilder &);
  flatbuffers::Offset<MouseEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MouseEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<MouseEvent> CreateMouseEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    ubii::dataStructures::ButtonEventType type = ubii::dataStructures::ButtonEventType_UP,
    int8_t button = 0) {
  MouseEventBuilder builder_(_fbb);
  builder_.add_button(button);
  builder_.add_type(type);
  return builder_.Finish();
}

flatbuffers::Offset<MouseEvent> CreateMouseEvent(flatbuffers::FlatBufferBuilder &_fbb, const MouseEventT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline MouseEventT *MouseEvent::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<ubii::dataStructures::MouseEventT> _o = std::unique_ptr<ubii::dataStructures::MouseEventT>(new MouseEventT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void MouseEvent::UnPackTo(MouseEventT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = type(); _o->type = _e; }
  { auto _e = button(); _o->button = _e; }
}

inline flatbuffers::Offset<MouseEvent> MouseEvent::Pack(flatbuffers::FlatBufferBuilder &_fbb, const MouseEventT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateMouseEvent(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<MouseEvent> CreateMouseEvent(flatbuffers::FlatBufferBuilder &_fbb, const MouseEventT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const MouseEventT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _type = _o->type;
  auto _button = _o->button;
  return ubii::dataStructures::CreateMouseEvent(
      _fbb,
      _type,
      _button);
}

inline const ubii::dataStructures::MouseEvent *GetMouseEvent(const void *buf) {
  return flatbuffers::GetRoot<ubii::dataStructures::MouseEvent>(buf);
}

inline const ubii::dataStructures::MouseEvent *GetSizePrefixedMouseEvent(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::dataStructures::MouseEvent>(buf);
}

inline bool VerifyMouseEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::dataStructures::MouseEvent>(nullptr);
}

inline bool VerifySizePrefixedMouseEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::dataStructures::MouseEvent>(nullptr);
}

inline void FinishMouseEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::MouseEvent> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMouseEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::MouseEvent> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<ubii::dataStructures::MouseEventT> UnPackMouseEvent(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ubii::dataStructures::MouseEventT>(GetMouseEvent(buf)->UnPack(res));
}

inline std::unique_ptr<ubii::dataStructures::MouseEventT> UnPackSizePrefixedMouseEvent(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ubii::dataStructures::MouseEventT>(GetSizePrefixedMouseEvent(buf)->UnPack(res));
}

}  // namespace dataStructures
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_MOUSEEVENT_UBII_DATASTRUCTURES_H_
