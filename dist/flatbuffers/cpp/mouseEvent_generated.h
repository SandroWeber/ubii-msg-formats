// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MOUSEEVENT_UBII_DATASTRUCTURES_H_
#define FLATBUFFERS_GENERATED_MOUSEEVENT_UBII_DATASTRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

#include "buttonEventType_generated.h"

namespace ubii {
namespace dataStructures {

struct MouseEvent;

struct MouseEvent FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_BUTTON = 6
  };
  ButtonEventType type() const {
    return static_cast<ButtonEventType>(GetField<int8_t>(VT_TYPE, 0));
  }
  int8_t button() const {
    return GetField<int8_t>(VT_BUTTON, 0);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int8_t>(verifier, VT_TYPE) &&
           VerifyField<int8_t>(verifier, VT_BUTTON) &&
           verifier.EndTable();
  }
};

struct MouseEventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(ButtonEventType type) {
    fbb_.AddElement<int8_t>(MouseEvent::VT_TYPE, static_cast<int8_t>(type), 0);
  }
  void add_button(int8_t button) {
    fbb_.AddElement<int8_t>(MouseEvent::VT_BUTTON, button, 0);
  }
  explicit MouseEventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  MouseEventBuilder &operator=(const MouseEventBuilder &);
  flatbuffers::Offset<MouseEvent> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<MouseEvent>(end);
    return o;
  }
};

inline flatbuffers::Offset<MouseEvent> CreateMouseEvent(
    flatbuffers::FlatBufferBuilder &_fbb,
    ButtonEventType type = ButtonEventType_UP,
    int8_t button = 0) {
  MouseEventBuilder builder_(_fbb);
  builder_.add_button(button);
  builder_.add_type(type);
  return builder_.Finish();
}

inline const ubii::dataStructures::MouseEvent *GetMouseEvent(const void *buf) {
  return flatbuffers::GetRoot<ubii::dataStructures::MouseEvent>(buf);
}

inline const ubii::dataStructures::MouseEvent *GetSizePrefixedMouseEvent(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::dataStructures::MouseEvent>(buf);
}

inline bool VerifyMouseEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::dataStructures::MouseEvent>(nullptr);
}

inline bool VerifySizePrefixedMouseEventBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::dataStructures::MouseEvent>(nullptr);
}

inline void FinishMouseEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::MouseEvent> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMouseEventBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::MouseEvent> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace dataStructures
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_MOUSEEVENT_UBII_DATASTRUCTURES_H_
