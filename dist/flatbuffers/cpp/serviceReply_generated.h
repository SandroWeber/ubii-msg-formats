// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVICEREPLY_UBII_SERVICES_H_
#define FLATBUFFERS_GENERATED_SERVICEREPLY_UBII_SERVICES_H_

#include "flatbuffers/flatbuffers.h"

#include "client_generated.h"
#include "component_generated.h"
#include "device_generated.h"
#include "topicDemux_generated.h"
#include "topicMux_generated.h"
#include "error_generated.h"
#include "success_generated.h"
#include "interaction_generated.h"
#include "ioFormat_generated.h"
#include "server_generated.h"
#include "topicSubscription_generated.h"
#include "serviceData_generated.h"
#include "interactionInputMapping_generated.h"
#include "interactionOutputMapping_generated.h"
#include "ioMapping_generated.h"
#include "session_generated.h"

namespace ubii {
namespace services {

struct ServiceReply;

struct ServiceReply FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_REPLY = 4
  };
  const ServiceData *reply() const {
    return GetPointer<const ServiceData *>(VT_REPLY);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_REPLY) &&
           verifier.VerifyTable(reply()) &&
           verifier.EndTable();
  }
};

struct ServiceReplyBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_reply(flatbuffers::Offset<ServiceData> reply) {
    fbb_.AddOffset(ServiceReply::VT_REPLY, reply);
  }
  explicit ServiceReplyBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ServiceReplyBuilder &operator=(const ServiceReplyBuilder &);
  flatbuffers::Offset<ServiceReply> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ServiceReply>(end);
    return o;
  }
};

inline flatbuffers::Offset<ServiceReply> CreateServiceReply(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ServiceData> reply = 0) {
  ServiceReplyBuilder builder_(_fbb);
  builder_.add_reply(reply);
  return builder_.Finish();
}

inline const ubii::services::ServiceReply *GetServiceReply(const void *buf) {
  return flatbuffers::GetRoot<ubii::services::ServiceReply>(buf);
}

inline const ubii::services::ServiceReply *GetSizePrefixedServiceReply(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::services::ServiceReply>(buf);
}

inline bool VerifyServiceReplyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::services::ServiceReply>(nullptr);
}

inline bool VerifySizePrefixedServiceReplyBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::services::ServiceReply>(nullptr);
}

inline void FinishServiceReplyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::services::ServiceReply> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedServiceReplyBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::services::ServiceReply> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace services
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_SERVICEREPLY_UBII_SERVICES_H_
