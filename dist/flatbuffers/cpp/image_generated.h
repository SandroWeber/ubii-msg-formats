// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_IMAGE_UBII_DATASTRUCTURES_H_
#define FLATBUFFERS_GENERATED_IMAGE_UBII_DATASTRUCTURES_H_

#include "flatbuffers/flatbuffers.h"

namespace ubii {
namespace dataStructures {

struct Image2D;
struct Image2DBuilder;
struct Image2DT;

enum ImageDataFormat {
  ImageDataFormat_GRAY8 = 0,
  ImageDataFormat_RGB8 = 1,
  ImageDataFormat_RGBA8 = 2,
  ImageDataFormat_MIN = ImageDataFormat_GRAY8,
  ImageDataFormat_MAX = ImageDataFormat_RGBA8
};

inline const ImageDataFormat (&EnumValuesImageDataFormat())[3] {
  static const ImageDataFormat values[] = {
    ImageDataFormat_GRAY8,
    ImageDataFormat_RGB8,
    ImageDataFormat_RGBA8
  };
  return values;
}

inline const char * const *EnumNamesImageDataFormat() {
  static const char * const names[4] = {
    "GRAY8",
    "RGB8",
    "RGBA8",
    nullptr
  };
  return names;
}

inline const char *EnumNameImageDataFormat(ImageDataFormat e) {
  if (flatbuffers::IsOutRange(e, ImageDataFormat_GRAY8, ImageDataFormat_RGBA8)) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesImageDataFormat()[index];
}

struct Image2DT : public flatbuffers::NativeTable {
  typedef Image2D TableType;
  int32_t width;
  int32_t height;
  ubii::dataStructures::ImageDataFormat data_format;
  std::vector<int8_t> data;
  Image2DT()
      : width(0),
        height(0),
        data_format(ubii::dataStructures::ImageDataFormat_GRAY8) {
  }
};

struct Image2D FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef Image2DT NativeTableType;
  typedef Image2DBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_WIDTH = 4,
    VT_HEIGHT = 6,
    VT_DATA_FORMAT = 8,
    VT_DATA = 10
  };
  int32_t width() const {
    return GetField<int32_t>(VT_WIDTH, 0);
  }
  int32_t height() const {
    return GetField<int32_t>(VT_HEIGHT, 0);
  }
  ubii::dataStructures::ImageDataFormat data_format() const {
    return static_cast<ubii::dataStructures::ImageDataFormat>(GetField<int8_t>(VT_DATA_FORMAT, 0));
  }
  const flatbuffers::Vector<int8_t> *data() const {
    return GetPointer<const flatbuffers::Vector<int8_t> *>(VT_DATA);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_WIDTH) &&
           VerifyField<int32_t>(verifier, VT_HEIGHT) &&
           VerifyField<int8_t>(verifier, VT_DATA_FORMAT) &&
           VerifyOffset(verifier, VT_DATA) &&
           verifier.VerifyVector(data()) &&
           verifier.EndTable();
  }
  Image2DT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(Image2DT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Image2D> Pack(flatbuffers::FlatBufferBuilder &_fbb, const Image2DT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct Image2DBuilder {
  typedef Image2D Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_width(int32_t width) {
    fbb_.AddElement<int32_t>(Image2D::VT_WIDTH, width, 0);
  }
  void add_height(int32_t height) {
    fbb_.AddElement<int32_t>(Image2D::VT_HEIGHT, height, 0);
  }
  void add_data_format(ubii::dataStructures::ImageDataFormat data_format) {
    fbb_.AddElement<int8_t>(Image2D::VT_DATA_FORMAT, static_cast<int8_t>(data_format), 0);
  }
  void add_data(flatbuffers::Offset<flatbuffers::Vector<int8_t>> data) {
    fbb_.AddOffset(Image2D::VT_DATA, data);
  }
  explicit Image2DBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  Image2DBuilder &operator=(const Image2DBuilder &);
  flatbuffers::Offset<Image2D> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Image2D>(end);
    return o;
  }
};

inline flatbuffers::Offset<Image2D> CreateImage2D(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    ubii::dataStructures::ImageDataFormat data_format = ubii::dataStructures::ImageDataFormat_GRAY8,
    flatbuffers::Offset<flatbuffers::Vector<int8_t>> data = 0) {
  Image2DBuilder builder_(_fbb);
  builder_.add_data(data);
  builder_.add_height(height);
  builder_.add_width(width);
  builder_.add_data_format(data_format);
  return builder_.Finish();
}

inline flatbuffers::Offset<Image2D> CreateImage2DDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    int32_t width = 0,
    int32_t height = 0,
    ubii::dataStructures::ImageDataFormat data_format = ubii::dataStructures::ImageDataFormat_GRAY8,
    const std::vector<int8_t> *data = nullptr) {
  auto data__ = data ? _fbb.CreateVector<int8_t>(*data) : 0;
  return ubii::dataStructures::CreateImage2D(
      _fbb,
      width,
      height,
      data_format,
      data__);
}

flatbuffers::Offset<Image2D> CreateImage2D(flatbuffers::FlatBufferBuilder &_fbb, const Image2DT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline Image2DT *Image2D::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<ubii::dataStructures::Image2DT> _o = std::unique_ptr<ubii::dataStructures::Image2DT>(new Image2DT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Image2D::UnPackTo(Image2DT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = width(); _o->width = _e; }
  { auto _e = height(); _o->height = _e; }
  { auto _e = data_format(); _o->data_format = _e; }
  { auto _e = data(); if (_e) { _o->data.resize(_e->size()); for (flatbuffers::uoffset_t _i = 0; _i < _e->size(); _i++) { _o->data[_i] = _e->Get(_i); } } }
}

inline flatbuffers::Offset<Image2D> Image2D::Pack(flatbuffers::FlatBufferBuilder &_fbb, const Image2DT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateImage2D(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Image2D> CreateImage2D(flatbuffers::FlatBufferBuilder &_fbb, const Image2DT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const Image2DT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _width = _o->width;
  auto _height = _o->height;
  auto _data_format = _o->data_format;
  auto _data = _o->data.size() ? _fbb.CreateVector(_o->data) : 0;
  return ubii::dataStructures::CreateImage2D(
      _fbb,
      _width,
      _height,
      _data_format,
      _data);
}

inline const ubii::dataStructures::Image2D *GetImage2D(const void *buf) {
  return flatbuffers::GetRoot<ubii::dataStructures::Image2D>(buf);
}

inline const ubii::dataStructures::Image2D *GetSizePrefixedImage2D(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::dataStructures::Image2D>(buf);
}

inline bool VerifyImage2DBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::dataStructures::Image2D>(nullptr);
}

inline bool VerifySizePrefixedImage2DBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::dataStructures::Image2D>(nullptr);
}

inline void FinishImage2DBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::Image2D> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedImage2DBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::dataStructures::Image2D> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<ubii::dataStructures::Image2DT> UnPackImage2D(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ubii::dataStructures::Image2DT>(GetImage2D(buf)->UnPack(res));
}

inline std::unique_ptr<ubii::dataStructures::Image2DT> UnPackSizePrefixedImage2D(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ubii::dataStructures::Image2DT>(GetSizePrefixedImage2D(buf)->UnPack(res));
}

}  // namespace dataStructures
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_IMAGE_UBII_DATASTRUCTURES_H_
