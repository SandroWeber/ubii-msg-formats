// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVICEDATA_UBII_SERVICES_H_
#define FLATBUFFERS_GENERATED_SERVICEDATA_UBII_SERVICES_H_

#include "flatbuffers/flatbuffers.h"

#include "client_generated.h"
#include "component_generated.h"
#include "device_generated.h"
#include "topicDemux_generated.h"
#include "topicMux_generated.h"
#include "error_generated.h"
#include "success_generated.h"
#include "interaction_generated.h"
#include "ioFormat_generated.h"
#include "server_generated.h"
#include "topicSubscription_generated.h"
#include "interactionInputMapping_generated.h"
#include "interactionOutputMapping_generated.h"
#include "ioMapping_generated.h"
#include "session_generated.h"

namespace ubii {
namespace services {

struct ServiceData;

struct ServiceData FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_CLIENT = 4,
    VT_CLIENT_LIST = 6,
    VT_DEVICE = 8,
    VT_DEVICE_LIST = 10,
    VT_TOPIC_MUX = 12,
    VT_TOPIC_MUX_LIST = 14,
    VT_TOPIC_DEMUX = 16,
    VT_TOPIC_DEMUX_LIST = 18,
    VT_SESSION = 20,
    VT_SESSION_LIST = 22,
    VT_INTERACTION = 24,
    VT_INTERACTION_LIST = 26,
    VT_TOPIC_SUBSCRIPTION = 28
  };
  const ubii::clients::Client *client() const {
    return GetPointer<const ubii::clients::Client *>(VT_CLIENT);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ubii::clients::Client>> *client_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ubii::clients::Client>> *>(VT_CLIENT_LIST);
  }
  const ubii::devices::Device *device() const {
    return GetPointer<const ubii::devices::Device *>(VT_DEVICE);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ubii::devices::Device>> *device_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ubii::devices::Device>> *>(VT_DEVICE_LIST);
  }
  const ubii::devices::TopicMux *topic_mux() const {
    return GetPointer<const ubii::devices::TopicMux *>(VT_TOPIC_MUX);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ubii::devices::TopicMux>> *topic_mux_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ubii::devices::TopicMux>> *>(VT_TOPIC_MUX_LIST);
  }
  const ubii::devices::TopicDemux *topic_demux() const {
    return GetPointer<const ubii::devices::TopicDemux *>(VT_TOPIC_DEMUX);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ubii::devices::TopicDemux>> *topic_demux_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ubii::devices::TopicDemux>> *>(VT_TOPIC_DEMUX_LIST);
  }
  const ubii::sessions::Session *session() const {
    return GetPointer<const ubii::sessions::Session *>(VT_SESSION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ubii::sessions::Session>> *session_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ubii::sessions::Session>> *>(VT_SESSION_LIST);
  }
  const ubii::interactions::Interaction *interaction() const {
    return GetPointer<const ubii::interactions::Interaction *>(VT_INTERACTION);
  }
  const flatbuffers::Vector<flatbuffers::Offset<ubii::interactions::Interaction>> *interaction_list() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<ubii::interactions::Interaction>> *>(VT_INTERACTION_LIST);
  }
  const ubii::services::requests::TopicSubscription *topic_subscription() const {
    return GetPointer<const ubii::services::requests::TopicSubscription *>(VT_TOPIC_SUBSCRIPTION);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_CLIENT) &&
           verifier.VerifyTable(client()) &&
           VerifyOffset(verifier, VT_CLIENT_LIST) &&
           verifier.VerifyVector(client_list()) &&
           verifier.VerifyVectorOfTables(client_list()) &&
           VerifyOffset(verifier, VT_DEVICE) &&
           verifier.VerifyTable(device()) &&
           VerifyOffset(verifier, VT_DEVICE_LIST) &&
           verifier.VerifyVector(device_list()) &&
           verifier.VerifyVectorOfTables(device_list()) &&
           VerifyOffset(verifier, VT_TOPIC_MUX) &&
           verifier.VerifyTable(topic_mux()) &&
           VerifyOffset(verifier, VT_TOPIC_MUX_LIST) &&
           verifier.VerifyVector(topic_mux_list()) &&
           verifier.VerifyVectorOfTables(topic_mux_list()) &&
           VerifyOffset(verifier, VT_TOPIC_DEMUX) &&
           verifier.VerifyTable(topic_demux()) &&
           VerifyOffset(verifier, VT_TOPIC_DEMUX_LIST) &&
           verifier.VerifyVector(topic_demux_list()) &&
           verifier.VerifyVectorOfTables(topic_demux_list()) &&
           VerifyOffset(verifier, VT_SESSION) &&
           verifier.VerifyTable(session()) &&
           VerifyOffset(verifier, VT_SESSION_LIST) &&
           verifier.VerifyVector(session_list()) &&
           verifier.VerifyVectorOfTables(session_list()) &&
           VerifyOffset(verifier, VT_INTERACTION) &&
           verifier.VerifyTable(interaction()) &&
           VerifyOffset(verifier, VT_INTERACTION_LIST) &&
           verifier.VerifyVector(interaction_list()) &&
           verifier.VerifyVectorOfTables(interaction_list()) &&
           VerifyOffset(verifier, VT_TOPIC_SUBSCRIPTION) &&
           verifier.VerifyTable(topic_subscription()) &&
           verifier.EndTable();
  }
};

struct ServiceDataBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_client(flatbuffers::Offset<ubii::clients::Client> client) {
    fbb_.AddOffset(ServiceData::VT_CLIENT, client);
  }
  void add_client_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::clients::Client>>> client_list) {
    fbb_.AddOffset(ServiceData::VT_CLIENT_LIST, client_list);
  }
  void add_device(flatbuffers::Offset<ubii::devices::Device> device) {
    fbb_.AddOffset(ServiceData::VT_DEVICE, device);
  }
  void add_device_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::devices::Device>>> device_list) {
    fbb_.AddOffset(ServiceData::VT_DEVICE_LIST, device_list);
  }
  void add_topic_mux(flatbuffers::Offset<ubii::devices::TopicMux> topic_mux) {
    fbb_.AddOffset(ServiceData::VT_TOPIC_MUX, topic_mux);
  }
  void add_topic_mux_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::devices::TopicMux>>> topic_mux_list) {
    fbb_.AddOffset(ServiceData::VT_TOPIC_MUX_LIST, topic_mux_list);
  }
  void add_topic_demux(flatbuffers::Offset<ubii::devices::TopicDemux> topic_demux) {
    fbb_.AddOffset(ServiceData::VT_TOPIC_DEMUX, topic_demux);
  }
  void add_topic_demux_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::devices::TopicDemux>>> topic_demux_list) {
    fbb_.AddOffset(ServiceData::VT_TOPIC_DEMUX_LIST, topic_demux_list);
  }
  void add_session(flatbuffers::Offset<ubii::sessions::Session> session) {
    fbb_.AddOffset(ServiceData::VT_SESSION, session);
  }
  void add_session_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::sessions::Session>>> session_list) {
    fbb_.AddOffset(ServiceData::VT_SESSION_LIST, session_list);
  }
  void add_interaction(flatbuffers::Offset<ubii::interactions::Interaction> interaction) {
    fbb_.AddOffset(ServiceData::VT_INTERACTION, interaction);
  }
  void add_interaction_list(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::interactions::Interaction>>> interaction_list) {
    fbb_.AddOffset(ServiceData::VT_INTERACTION_LIST, interaction_list);
  }
  void add_topic_subscription(flatbuffers::Offset<ubii::services::requests::TopicSubscription> topic_subscription) {
    fbb_.AddOffset(ServiceData::VT_TOPIC_SUBSCRIPTION, topic_subscription);
  }
  explicit ServiceDataBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ServiceDataBuilder &operator=(const ServiceDataBuilder &);
  flatbuffers::Offset<ServiceData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ServiceData>(end);
    return o;
  }
};

inline flatbuffers::Offset<ServiceData> CreateServiceData(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ubii::clients::Client> client = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::clients::Client>>> client_list = 0,
    flatbuffers::Offset<ubii::devices::Device> device = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::devices::Device>>> device_list = 0,
    flatbuffers::Offset<ubii::devices::TopicMux> topic_mux = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::devices::TopicMux>>> topic_mux_list = 0,
    flatbuffers::Offset<ubii::devices::TopicDemux> topic_demux = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::devices::TopicDemux>>> topic_demux_list = 0,
    flatbuffers::Offset<ubii::sessions::Session> session = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::sessions::Session>>> session_list = 0,
    flatbuffers::Offset<ubii::interactions::Interaction> interaction = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<ubii::interactions::Interaction>>> interaction_list = 0,
    flatbuffers::Offset<ubii::services::requests::TopicSubscription> topic_subscription = 0) {
  ServiceDataBuilder builder_(_fbb);
  builder_.add_topic_subscription(topic_subscription);
  builder_.add_interaction_list(interaction_list);
  builder_.add_interaction(interaction);
  builder_.add_session_list(session_list);
  builder_.add_session(session);
  builder_.add_topic_demux_list(topic_demux_list);
  builder_.add_topic_demux(topic_demux);
  builder_.add_topic_mux_list(topic_mux_list);
  builder_.add_topic_mux(topic_mux);
  builder_.add_device_list(device_list);
  builder_.add_device(device);
  builder_.add_client_list(client_list);
  builder_.add_client(client);
  return builder_.Finish();
}

inline flatbuffers::Offset<ServiceData> CreateServiceDataDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<ubii::clients::Client> client = 0,
    const std::vector<flatbuffers::Offset<ubii::clients::Client>> *client_list = nullptr,
    flatbuffers::Offset<ubii::devices::Device> device = 0,
    const std::vector<flatbuffers::Offset<ubii::devices::Device>> *device_list = nullptr,
    flatbuffers::Offset<ubii::devices::TopicMux> topic_mux = 0,
    const std::vector<flatbuffers::Offset<ubii::devices::TopicMux>> *topic_mux_list = nullptr,
    flatbuffers::Offset<ubii::devices::TopicDemux> topic_demux = 0,
    const std::vector<flatbuffers::Offset<ubii::devices::TopicDemux>> *topic_demux_list = nullptr,
    flatbuffers::Offset<ubii::sessions::Session> session = 0,
    const std::vector<flatbuffers::Offset<ubii::sessions::Session>> *session_list = nullptr,
    flatbuffers::Offset<ubii::interactions::Interaction> interaction = 0,
    const std::vector<flatbuffers::Offset<ubii::interactions::Interaction>> *interaction_list = nullptr,
    flatbuffers::Offset<ubii::services::requests::TopicSubscription> topic_subscription = 0) {
  auto client_list__ = client_list ? _fbb.CreateVector<flatbuffers::Offset<ubii::clients::Client>>(*client_list) : 0;
  auto device_list__ = device_list ? _fbb.CreateVector<flatbuffers::Offset<ubii::devices::Device>>(*device_list) : 0;
  auto topic_mux_list__ = topic_mux_list ? _fbb.CreateVector<flatbuffers::Offset<ubii::devices::TopicMux>>(*topic_mux_list) : 0;
  auto topic_demux_list__ = topic_demux_list ? _fbb.CreateVector<flatbuffers::Offset<ubii::devices::TopicDemux>>(*topic_demux_list) : 0;
  auto session_list__ = session_list ? _fbb.CreateVector<flatbuffers::Offset<ubii::sessions::Session>>(*session_list) : 0;
  auto interaction_list__ = interaction_list ? _fbb.CreateVector<flatbuffers::Offset<ubii::interactions::Interaction>>(*interaction_list) : 0;
  return ubii::services::CreateServiceData(
      _fbb,
      client,
      client_list__,
      device,
      device_list__,
      topic_mux,
      topic_mux_list__,
      topic_demux,
      topic_demux_list__,
      session,
      session_list__,
      interaction,
      interaction_list__,
      topic_subscription);
}

inline const ubii::services::ServiceData *GetServiceData(const void *buf) {
  return flatbuffers::GetRoot<ubii::services::ServiceData>(buf);
}

inline const ubii::services::ServiceData *GetSizePrefixedServiceData(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::services::ServiceData>(buf);
}

inline bool VerifyServiceDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::services::ServiceData>(nullptr);
}

inline bool VerifySizePrefixedServiceDataBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::services::ServiceData>(nullptr);
}

inline void FinishServiceDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::services::ServiceData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedServiceDataBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::services::ServiceData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace services
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_SERVICEDATA_UBII_SERVICES_H_
