// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SERVICEREQUEST_UBII_SERVICES_H_
#define FLATBUFFERS_GENERATED_SERVICEREQUEST_UBII_SERVICES_H_

#include "flatbuffers/flatbuffers.h"

#include "client_generated.h"
#include "component_generated.h"
#include "device_generated.h"
#include "topicDemux_generated.h"
#include "topicMux_generated.h"
#include "error_generated.h"
#include "success_generated.h"
#include "interaction_generated.h"
#include "ioFormat_generated.h"
#include "server_generated.h"
#include "topicSubscription_generated.h"
#include "serviceData_generated.h"
#include "interactionInputMapping_generated.h"
#include "interactionOutputMapping_generated.h"
#include "ioMapping_generated.h"
#include "session_generated.h"

namespace ubii {
namespace services {

struct ServiceRequest;
struct ServiceRequestT;

struct ServiceRequestT : public flatbuffers::NativeTable {
  typedef ServiceRequest TableType;
  std::string topic;
  std::unique_ptr<ServiceDataT> request;
  ServiceRequestT() {
  }
};

struct ServiceRequest FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef ServiceRequestT NativeTableType;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TOPIC = 4,
    VT_REQUEST = 6
  };
  const flatbuffers::String *topic() const {
    return GetPointer<const flatbuffers::String *>(VT_TOPIC);
  }
  const ServiceData *request() const {
    return GetPointer<const ServiceData *>(VT_REQUEST);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TOPIC) &&
           verifier.VerifyString(topic()) &&
           VerifyOffset(verifier, VT_REQUEST) &&
           verifier.VerifyTable(request()) &&
           verifier.EndTable();
  }
  ServiceRequestT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(ServiceRequestT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<ServiceRequest> Pack(flatbuffers::FlatBufferBuilder &_fbb, const ServiceRequestT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct ServiceRequestBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_topic(flatbuffers::Offset<flatbuffers::String> topic) {
    fbb_.AddOffset(ServiceRequest::VT_TOPIC, topic);
  }
  void add_request(flatbuffers::Offset<ServiceData> request) {
    fbb_.AddOffset(ServiceRequest::VT_REQUEST, request);
  }
  explicit ServiceRequestBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ServiceRequestBuilder &operator=(const ServiceRequestBuilder &);
  flatbuffers::Offset<ServiceRequest> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<ServiceRequest>(end);
    return o;
  }
};

inline flatbuffers::Offset<ServiceRequest> CreateServiceRequest(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> topic = 0,
    flatbuffers::Offset<ServiceData> request = 0) {
  ServiceRequestBuilder builder_(_fbb);
  builder_.add_request(request);
  builder_.add_topic(topic);
  return builder_.Finish();
}

inline flatbuffers::Offset<ServiceRequest> CreateServiceRequestDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *topic = nullptr,
    flatbuffers::Offset<ServiceData> request = 0) {
  auto topic__ = topic ? _fbb.CreateString(topic) : 0;
  return ubii::services::CreateServiceRequest(
      _fbb,
      topic__,
      request);
}

flatbuffers::Offset<ServiceRequest> CreateServiceRequest(flatbuffers::FlatBufferBuilder &_fbb, const ServiceRequestT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline ServiceRequestT *ServiceRequest::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new ServiceRequestT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void ServiceRequest::UnPackTo(ServiceRequestT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = topic(); if (_e) _o->topic = _e->str(); };
  { auto _e = request(); if (_e) _o->request = std::unique_ptr<ServiceDataT>(_e->UnPack(_resolver)); };
}

inline flatbuffers::Offset<ServiceRequest> ServiceRequest::Pack(flatbuffers::FlatBufferBuilder &_fbb, const ServiceRequestT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateServiceRequest(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<ServiceRequest> CreateServiceRequest(flatbuffers::FlatBufferBuilder &_fbb, const ServiceRequestT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const ServiceRequestT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _topic = _o->topic.empty() ? 0 : _fbb.CreateString(_o->topic);
  auto _request = _o->request ? CreateServiceData(_fbb, _o->request.get(), _rehasher) : 0;
  return ubii::services::CreateServiceRequest(
      _fbb,
      _topic,
      _request);
}

inline const ubii::services::ServiceRequest *GetServiceRequest(const void *buf) {
  return flatbuffers::GetRoot<ubii::services::ServiceRequest>(buf);
}

inline const ubii::services::ServiceRequest *GetSizePrefixedServiceRequest(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::services::ServiceRequest>(buf);
}

inline bool VerifyServiceRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::services::ServiceRequest>(nullptr);
}

inline bool VerifySizePrefixedServiceRequestBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::services::ServiceRequest>(nullptr);
}

inline void FinishServiceRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::services::ServiceRequest> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedServiceRequestBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::services::ServiceRequest> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<ServiceRequestT> UnPackServiceRequest(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ServiceRequestT>(GetServiceRequest(buf)->UnPack(res));
}

}  // namespace services
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_SERVICEREQUEST_UBII_SERVICES_H_
