// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_ERROR_UBII_GENERAL_H_
#define FLATBUFFERS_GENERATED_ERROR_UBII_GENERAL_H_

#include "flatbuffers/flatbuffers.h"

namespace ubii {
namespace general {

struct Error;

struct Error FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_MESSAGE = 6,
    VT_STACK = 8
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  const flatbuffers::String *stack() const {
    return GetPointer<const flatbuffers::String *>(VT_STACK);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           VerifyOffset(verifier, VT_STACK) &&
           verifier.VerifyString(stack()) &&
           verifier.EndTable();
  }
};

struct ErrorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(Error::VT_TITLE, title);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Error::VT_MESSAGE, message);
  }
  void add_stack(flatbuffers::Offset<flatbuffers::String> stack) {
    fbb_.AddOffset(Error::VT_STACK, stack);
  }
  explicit ErrorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ErrorBuilder &operator=(const ErrorBuilder &);
  flatbuffers::Offset<Error> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Error>(end);
    return o;
  }
};

inline flatbuffers::Offset<Error> CreateError(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0,
    flatbuffers::Offset<flatbuffers::String> stack = 0) {
  ErrorBuilder builder_(_fbb);
  builder_.add_stack(stack);
  builder_.add_message(message);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<Error> CreateErrorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const char *message = nullptr,
    const char *stack = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  auto stack__ = stack ? _fbb.CreateString(stack) : 0;
  return ubii::general::CreateError(
      _fbb,
      title__,
      message__,
      stack__);
}

inline const ubii::general::Error *GetError(const void *buf) {
  return flatbuffers::GetRoot<ubii::general::Error>(buf);
}

inline const ubii::general::Error *GetSizePrefixedError(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::general::Error>(buf);
}

inline bool VerifyErrorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::general::Error>(nullptr);
}

inline bool VerifySizePrefixedErrorBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::general::Error>(nullptr);
}

inline void FinishErrorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::general::Error> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedErrorBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::general::Error> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace general
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_ERROR_UBII_GENERAL_H_
