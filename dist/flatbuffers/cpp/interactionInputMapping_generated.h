// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTERACTIONINPUTMAPPING_UBII_SESSIONS_H_
#define FLATBUFFERS_GENERATED_INTERACTIONINPUTMAPPING_UBII_SESSIONS_H_

#include "flatbuffers/flatbuffers.h"

#include "topicMux_generated.h"

namespace ubii {
namespace sessions {

struct InteractionInputMapping;

enum TopicSource {
  TopicSource_NONE = 0,
  TopicSource_topic = 1,
  TopicSource_topic_mux = 2,
  TopicSource_MIN = TopicSource_NONE,
  TopicSource_MAX = TopicSource_topic_mux
};

inline const TopicSource (&EnumValuesTopicSource())[3] {
  static const TopicSource values[] = {
    TopicSource_NONE,
    TopicSource_topic,
    TopicSource_topic_mux
  };
  return values;
}

inline const char * const *EnumNamesTopicSource() {
  static const char * const names[] = {
    "NONE",
    "topic",
    "topic_mux",
    nullptr
  };
  return names;
}

inline const char *EnumNameTopicSource(TopicSource e) {
  if (e < TopicSource_NONE || e > TopicSource_topic_mux) return "";
  const size_t index = static_cast<size_t>(e);
  return EnumNamesTopicSource()[index];
}

template<typename T> struct TopicSourceTraits {
  static const TopicSource enum_value = TopicSource_NONE;
};

template<> struct TopicSourceTraits<flatbuffers::String> {
  static const TopicSource enum_value = TopicSource_topic;
};

template<> struct TopicSourceTraits<ubii::devices::TopicMux> {
  static const TopicSource enum_value = TopicSource_topic_mux;
};

bool VerifyTopicSource(flatbuffers::Verifier &verifier, const void *obj, TopicSource type);
bool VerifyTopicSourceVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types);

struct InteractionInputMapping FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_NAME = 4,
    VT_TOPIC_SOURCE_TYPE = 6,
    VT_TOPIC_SOURCE = 8
  };
  const flatbuffers::String *name() const {
    return GetPointer<const flatbuffers::String *>(VT_NAME);
  }
  TopicSource topic_source_type() const {
    return static_cast<TopicSource>(GetField<uint8_t>(VT_TOPIC_SOURCE_TYPE, 0));
  }
  const void *topic_source() const {
    return GetPointer<const void *>(VT_TOPIC_SOURCE);
  }
  template<typename T> const T *topic_source_as() const;
  const flatbuffers::String *topic_source_as_topic() const {
    return topic_source_type() == TopicSource_topic ? static_cast<const flatbuffers::String *>(topic_source()) : nullptr;
  }
  const ubii::devices::TopicMux *topic_source_as_topic_mux() const {
    return topic_source_type() == TopicSource_topic_mux ? static_cast<const ubii::devices::TopicMux *>(topic_source()) : nullptr;
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_NAME) &&
           verifier.VerifyString(name()) &&
           VerifyField<uint8_t>(verifier, VT_TOPIC_SOURCE_TYPE) &&
           VerifyOffset(verifier, VT_TOPIC_SOURCE) &&
           VerifyTopicSource(verifier, topic_source(), topic_source_type()) &&
           verifier.EndTable();
  }
};

template<> inline const flatbuffers::String *InteractionInputMapping::topic_source_as<flatbuffers::String>() const {
  return topic_source_as_topic();
}

template<> inline const ubii::devices::TopicMux *InteractionInputMapping::topic_source_as<ubii::devices::TopicMux>() const {
  return topic_source_as_topic_mux();
}

struct InteractionInputMappingBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_name(flatbuffers::Offset<flatbuffers::String> name) {
    fbb_.AddOffset(InteractionInputMapping::VT_NAME, name);
  }
  void add_topic_source_type(TopicSource topic_source_type) {
    fbb_.AddElement<uint8_t>(InteractionInputMapping::VT_TOPIC_SOURCE_TYPE, static_cast<uint8_t>(topic_source_type), 0);
  }
  void add_topic_source(flatbuffers::Offset<void> topic_source) {
    fbb_.AddOffset(InteractionInputMapping::VT_TOPIC_SOURCE, topic_source);
  }
  explicit InteractionInputMappingBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  InteractionInputMappingBuilder &operator=(const InteractionInputMappingBuilder &);
  flatbuffers::Offset<InteractionInputMapping> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<InteractionInputMapping>(end);
    return o;
  }
};

inline flatbuffers::Offset<InteractionInputMapping> CreateInteractionInputMapping(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> name = 0,
    TopicSource topic_source_type = TopicSource_NONE,
    flatbuffers::Offset<void> topic_source = 0) {
  InteractionInputMappingBuilder builder_(_fbb);
  builder_.add_topic_source(topic_source);
  builder_.add_name(name);
  builder_.add_topic_source_type(topic_source_type);
  return builder_.Finish();
}

inline flatbuffers::Offset<InteractionInputMapping> CreateInteractionInputMappingDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *name = nullptr,
    TopicSource topic_source_type = TopicSource_NONE,
    flatbuffers::Offset<void> topic_source = 0) {
  auto name__ = name ? _fbb.CreateString(name) : 0;
  return ubii::sessions::CreateInteractionInputMapping(
      _fbb,
      name__,
      topic_source_type,
      topic_source);
}

inline bool VerifyTopicSource(flatbuffers::Verifier &verifier, const void *obj, TopicSource type) {
  switch (type) {
    case TopicSource_NONE: {
      return true;
    }
    case TopicSource_topic: {
      auto ptr = reinterpret_cast<const flatbuffers::String *>(obj);
      return verifier.VerifyString(ptr);
    }
    case TopicSource_topic_mux: {
      auto ptr = reinterpret_cast<const ubii::devices::TopicMux *>(obj);
      return verifier.VerifyTable(ptr);
    }
    default: return false;
  }
}

inline bool VerifyTopicSourceVector(flatbuffers::Verifier &verifier, const flatbuffers::Vector<flatbuffers::Offset<void>> *values, const flatbuffers::Vector<uint8_t> *types) {
  if (!values || !types) return !values && !types;
  if (values->size() != types->size()) return false;
  for (flatbuffers::uoffset_t i = 0; i < values->size(); ++i) {
    if (!VerifyTopicSource(
        verifier,  values->Get(i), types->GetEnum<TopicSource>(i))) {
      return false;
    }
  }
  return true;
}

inline const ubii::sessions::InteractionInputMapping *GetInteractionInputMapping(const void *buf) {
  return flatbuffers::GetRoot<ubii::sessions::InteractionInputMapping>(buf);
}

inline const ubii::sessions::InteractionInputMapping *GetSizePrefixedInteractionInputMapping(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::sessions::InteractionInputMapping>(buf);
}

inline bool VerifyInteractionInputMappingBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::sessions::InteractionInputMapping>(nullptr);
}

inline bool VerifySizePrefixedInteractionInputMappingBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::sessions::InteractionInputMapping>(nullptr);
}

inline void FinishInteractionInputMappingBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::sessions::InteractionInputMapping> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedInteractionInputMappingBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::sessions::InteractionInputMapping> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace sessions
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_INTERACTIONINPUTMAPPING_UBII_SESSIONS_H_
