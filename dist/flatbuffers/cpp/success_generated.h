// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUCCESS_UBII_GENERAL_H_
#define FLATBUFFERS_GENERATED_SUCCESS_UBII_GENERAL_H_

#include "flatbuffers/flatbuffers.h"

namespace ubii {
namespace general {

struct Success;
struct SuccessBuilder;
struct SuccessT;

struct SuccessT : public flatbuffers::NativeTable {
  typedef Success TableType;
  std::string title;
  std::string message;
  SuccessT() {
  }
};

struct Success FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SuccessT NativeTableType;
  typedef SuccessBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_MESSAGE = 6
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
  SuccessT *UnPack(const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(SuccessT *_o, const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<Success> Pack(flatbuffers::FlatBufferBuilder &_fbb, const SuccessT* _o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct SuccessBuilder {
  typedef Success Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(Success::VT_TITLE, title);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Success::VT_MESSAGE, message);
  }
  explicit SuccessBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SuccessBuilder &operator=(const SuccessBuilder &);
  flatbuffers::Offset<Success> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Success>(end);
    return o;
  }
};

inline flatbuffers::Offset<Success> CreateSuccess(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  SuccessBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<Success> CreateSuccessDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const char *message = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return ubii::general::CreateSuccess(
      _fbb,
      title__,
      message__);
}

flatbuffers::Offset<Success> CreateSuccess(flatbuffers::FlatBufferBuilder &_fbb, const SuccessT *_o, const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline SuccessT *Success::UnPack(const flatbuffers::resolver_function_t *_resolver) const {
  std::unique_ptr<ubii::general::SuccessT> _o = std::unique_ptr<ubii::general::SuccessT>(new SuccessT());
  UnPackTo(_o.get(), _resolver);
  return _o.release();
}

inline void Success::UnPackTo(SuccessT *_o, const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  { auto _e = title(); if (_e) _o->title = _e->str(); }
  { auto _e = message(); if (_e) _o->message = _e->str(); }
}

inline flatbuffers::Offset<Success> Success::Pack(flatbuffers::FlatBufferBuilder &_fbb, const SuccessT* _o, const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateSuccess(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<Success> CreateSuccess(flatbuffers::FlatBufferBuilder &_fbb, const SuccessT *_o, const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs { flatbuffers::FlatBufferBuilder *__fbb; const SuccessT* __o; const flatbuffers::rehasher_function_t *__rehasher; } _va = { &_fbb, _o, _rehasher}; (void)_va;
  auto _title = _o->title.empty() ? 0 : _fbb.CreateString(_o->title);
  auto _message = _o->message.empty() ? 0 : _fbb.CreateString(_o->message);
  return ubii::general::CreateSuccess(
      _fbb,
      _title,
      _message);
}

inline const ubii::general::Success *GetSuccess(const void *buf) {
  return flatbuffers::GetRoot<ubii::general::Success>(buf);
}

inline const ubii::general::Success *GetSizePrefixedSuccess(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::general::Success>(buf);
}

inline bool VerifySuccessBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::general::Success>(nullptr);
}

inline bool VerifySizePrefixedSuccessBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::general::Success>(nullptr);
}

inline void FinishSuccessBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::general::Success> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSuccessBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::general::Success> root) {
  fbb.FinishSizePrefixed(root);
}

inline std::unique_ptr<ubii::general::SuccessT> UnPackSuccess(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ubii::general::SuccessT>(GetSuccess(buf)->UnPack(res));
}

inline std::unique_ptr<ubii::general::SuccessT> UnPackSizePrefixedSuccess(
    const void *buf,
    const flatbuffers::resolver_function_t *res = nullptr) {
  return std::unique_ptr<ubii::general::SuccessT>(GetSizePrefixedSuccess(buf)->UnPack(res));
}

}  // namespace general
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_SUCCESS_UBII_GENERAL_H_
