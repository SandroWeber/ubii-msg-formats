// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_SUCCESS_UBII_GENERAL_H_
#define FLATBUFFERS_GENERATED_SUCCESS_UBII_GENERAL_H_

#include "flatbuffers/flatbuffers.h"

namespace ubii {
namespace general {

struct Success;

struct Success FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TITLE = 4,
    VT_MESSAGE = 6
  };
  const flatbuffers::String *title() const {
    return GetPointer<const flatbuffers::String *>(VT_TITLE);
  }
  const flatbuffers::String *message() const {
    return GetPointer<const flatbuffers::String *>(VT_MESSAGE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TITLE) &&
           verifier.VerifyString(title()) &&
           VerifyOffset(verifier, VT_MESSAGE) &&
           verifier.VerifyString(message()) &&
           verifier.EndTable();
  }
};

struct SuccessBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_title(flatbuffers::Offset<flatbuffers::String> title) {
    fbb_.AddOffset(Success::VT_TITLE, title);
  }
  void add_message(flatbuffers::Offset<flatbuffers::String> message) {
    fbb_.AddOffset(Success::VT_MESSAGE, message);
  }
  explicit SuccessBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  SuccessBuilder &operator=(const SuccessBuilder &);
  flatbuffers::Offset<Success> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Success>(end);
    return o;
  }
};

inline flatbuffers::Offset<Success> CreateSuccess(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> title = 0,
    flatbuffers::Offset<flatbuffers::String> message = 0) {
  SuccessBuilder builder_(_fbb);
  builder_.add_message(message);
  builder_.add_title(title);
  return builder_.Finish();
}

inline flatbuffers::Offset<Success> CreateSuccessDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *title = nullptr,
    const char *message = nullptr) {
  auto title__ = title ? _fbb.CreateString(title) : 0;
  auto message__ = message ? _fbb.CreateString(message) : 0;
  return ubii::general::CreateSuccess(
      _fbb,
      title__,
      message__);
}

inline const ubii::general::Success *GetSuccess(const void *buf) {
  return flatbuffers::GetRoot<ubii::general::Success>(buf);
}

inline const ubii::general::Success *GetSizePrefixedSuccess(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<ubii::general::Success>(buf);
}

inline bool VerifySuccessBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<ubii::general::Success>(nullptr);
}

inline bool VerifySizePrefixedSuccessBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<ubii::general::Success>(nullptr);
}

inline void FinishSuccessBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::general::Success> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedSuccessBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<ubii::general::Success> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace general
}  // namespace ubii

#endif  // FLATBUFFERS_GENERATED_SUCCESS_UBII_GENERAL_H_
