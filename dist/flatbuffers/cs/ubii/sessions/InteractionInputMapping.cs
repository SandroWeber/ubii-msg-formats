// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.sessions
{

using global::System;
using global::FlatBuffers;

public struct InteractionInputMapping : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static InteractionInputMapping GetRootAsInteractionInputMapping(ByteBuffer _bb) { return GetRootAsInteractionInputMapping(_bb, new InteractionInputMapping()); }
  public static InteractionInputMapping GetRootAsInteractionInputMapping(ByteBuffer _bb, InteractionInputMapping obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public InteractionInputMapping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
  public TopicSource TopicSourceType { get { int o = __p.__offset(6); return o != 0 ? (TopicSource)__p.bb.Get(o + __p.bb_pos) : TopicSource.NONE; } }
  public TTable? TopicSource<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(8); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<InteractionInputMapping> CreateInteractionInputMapping(FlatBufferBuilder builder,
      StringOffset nameOffset = default(StringOffset),
      TopicSource topic_source_type = TopicSource.NONE,
      int topic_sourceOffset = 0) {
    builder.StartObject(3);
    InteractionInputMapping.AddTopicSource(builder, topic_sourceOffset);
    InteractionInputMapping.AddName(builder, nameOffset);
    InteractionInputMapping.AddTopicSourceType(builder, topic_source_type);
    return InteractionInputMapping.EndInteractionInputMapping(builder);
  }

  public static void StartInteractionInputMapping(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
  public static void AddTopicSourceType(FlatBufferBuilder builder, TopicSource topicSourceType) { builder.AddByte(1, (byte)topicSourceType, 0); }
  public static void AddTopicSource(FlatBufferBuilder builder, int topicSourceOffset) { builder.AddOffset(2, topicSourceOffset, 0); }
  public static Offset<InteractionInputMapping> EndInteractionInputMapping(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<InteractionInputMapping>(o);
  }
  public static void FinishInteractionInputMappingBuffer(FlatBufferBuilder builder, Offset<InteractionInputMapping> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedInteractionInputMappingBuffer(FlatBufferBuilder builder, Offset<InteractionInputMapping> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
