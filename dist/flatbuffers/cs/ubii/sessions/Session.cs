// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.sessions
{

using global::System;
using global::FlatBuffers;

public struct Session : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Session GetRootAsSession(ByteBuffer _bb) { return GetRootAsSession(_bb, new Session()); }
  public static Session GetRootAsSession(ByteBuffer _bb, Session obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Session __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Authors(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int AuthorsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Tags(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Description { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(12); }
  public ProcessMode ProcessMode { get { int o = __p.__offset(14); return o != 0 ? (ProcessMode)__p.bb.GetSbyte(o + __p.bb_pos) : ProcessMode.CYCLE_INTERACTIONS; } }
  public SessionStatus Status { get { int o = __p.__offset(16); return o != 0 ? (SessionStatus)__p.bb.GetSbyte(o + __p.bb_pos) : SessionStatus.CREATED; } }
  public ubii.interactions.Interaction? Interactions(int j) { int o = __p.__offset(18); return o != 0 ? (ubii.interactions.Interaction?)(new ubii.interactions.Interaction()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InteractionsLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public IOMapping? IoMappings(int j) { int o = __p.__offset(20); return o != 0 ? (IOMapping?)(new IOMapping()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int IoMappingsLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Session> CreateSession(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      VectorOffset authorsOffset = default(VectorOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset descriptionOffset = default(StringOffset),
      ProcessMode process_mode = ProcessMode.CYCLE_INTERACTIONS,
      SessionStatus status = SessionStatus.CREATED,
      VectorOffset interactionsOffset = default(VectorOffset),
      VectorOffset io_mappingsOffset = default(VectorOffset)) {
    builder.StartObject(9);
    Session.AddIoMappings(builder, io_mappingsOffset);
    Session.AddInteractions(builder, interactionsOffset);
    Session.AddDescription(builder, descriptionOffset);
    Session.AddTags(builder, tagsOffset);
    Session.AddAuthors(builder, authorsOffset);
    Session.AddName(builder, nameOffset);
    Session.AddId(builder, idOffset);
    Session.AddStatus(builder, status);
    Session.AddProcessMode(builder, process_mode);
    return Session.EndSession(builder);
  }

  public static void StartSession(FlatBufferBuilder builder) { builder.StartObject(9); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddAuthors(FlatBufferBuilder builder, VectorOffset authorsOffset) { builder.AddOffset(2, authorsOffset.Value, 0); }
  public static VectorOffset CreateAuthorsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateAuthorsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartAuthorsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(3, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(4, descriptionOffset.Value, 0); }
  public static void AddProcessMode(FlatBufferBuilder builder, ProcessMode processMode) { builder.AddSbyte(5, (sbyte)processMode, 0); }
  public static void AddStatus(FlatBufferBuilder builder, SessionStatus status) { builder.AddSbyte(6, (sbyte)status, 0); }
  public static void AddInteractions(FlatBufferBuilder builder, VectorOffset interactionsOffset) { builder.AddOffset(7, interactionsOffset.Value, 0); }
  public static VectorOffset CreateInteractionsVector(FlatBufferBuilder builder, Offset<ubii.interactions.Interaction>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInteractionsVectorBlock(FlatBufferBuilder builder, Offset<ubii.interactions.Interaction>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInteractionsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddIoMappings(FlatBufferBuilder builder, VectorOffset ioMappingsOffset) { builder.AddOffset(8, ioMappingsOffset.Value, 0); }
  public static VectorOffset CreateIoMappingsVector(FlatBufferBuilder builder, Offset<IOMapping>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateIoMappingsVectorBlock(FlatBufferBuilder builder, Offset<IOMapping>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartIoMappingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Session> EndSession(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Session>(o);
  }
  public static void FinishSessionBuffer(FlatBufferBuilder builder, Offset<Session> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedSessionBuffer(FlatBufferBuilder builder, Offset<Session> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
