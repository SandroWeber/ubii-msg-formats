// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.sessions
{

using global::System;
using global::FlatBuffers;

public struct IOMapping : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static IOMapping GetRootAsIOMapping(ByteBuffer _bb) { return GetRootAsIOMapping(_bb, new IOMapping()); }
  public static IOMapping GetRootAsIOMapping(ByteBuffer _bb, IOMapping obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public IOMapping __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string InteractionId { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInteractionIdBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetInteractionIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetInteractionIdArray() { return __p.__vector_as_array<byte>(4); }
  public InteractionInputMapping? InputMappings(int j) { int o = __p.__offset(6); return o != 0 ? (InteractionInputMapping?)(new InteractionInputMapping()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InputMappingsLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public InteractionOutputMapping? OutputMappings(int j) { int o = __p.__offset(8); return o != 0 ? (InteractionOutputMapping?)(new InteractionOutputMapping()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int OutputMappingsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<IOMapping> CreateIOMapping(FlatBufferBuilder builder,
      StringOffset interaction_idOffset = default(StringOffset),
      VectorOffset input_mappingsOffset = default(VectorOffset),
      VectorOffset output_mappingsOffset = default(VectorOffset)) {
    builder.StartObject(3);
    IOMapping.AddOutputMappings(builder, output_mappingsOffset);
    IOMapping.AddInputMappings(builder, input_mappingsOffset);
    IOMapping.AddInteractionId(builder, interaction_idOffset);
    return IOMapping.EndIOMapping(builder);
  }

  public static void StartIOMapping(FlatBufferBuilder builder) { builder.StartObject(3); }
  public static void AddInteractionId(FlatBufferBuilder builder, StringOffset interactionIdOffset) { builder.AddOffset(0, interactionIdOffset.Value, 0); }
  public static void AddInputMappings(FlatBufferBuilder builder, VectorOffset inputMappingsOffset) { builder.AddOffset(1, inputMappingsOffset.Value, 0); }
  public static VectorOffset CreateInputMappingsVector(FlatBufferBuilder builder, Offset<InteractionInputMapping>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInputMappingsVectorBlock(FlatBufferBuilder builder, Offset<InteractionInputMapping>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInputMappingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddOutputMappings(FlatBufferBuilder builder, VectorOffset outputMappingsOffset) { builder.AddOffset(2, outputMappingsOffset.Value, 0); }
  public static VectorOffset CreateOutputMappingsVector(FlatBufferBuilder builder, Offset<InteractionOutputMapping>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateOutputMappingsVectorBlock(FlatBufferBuilder builder, Offset<InteractionOutputMapping>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartOutputMappingsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<IOMapping> EndIOMapping(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<IOMapping>(o);
  }
  public static void FinishIOMappingBuffer(FlatBufferBuilder builder, Offset<IOMapping> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedIOMappingBuffer(FlatBufferBuilder builder, Offset<IOMapping> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
