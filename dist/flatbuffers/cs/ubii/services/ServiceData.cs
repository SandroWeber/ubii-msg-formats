// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.services
{

using global::System;
using global::FlatBuffers;

public struct ServiceData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static ServiceData GetRootAsServiceData(ByteBuffer _bb) { return GetRootAsServiceData(_bb, new ServiceData()); }
  public static ServiceData GetRootAsServiceData(ByteBuffer _bb, ServiceData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public ServiceData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ubii.clients.Client? Client { get { int o = __p.__offset(4); return o != 0 ? (ubii.clients.Client?)(new ubii.clients.Client()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ubii.clients.Client? ClientList(int j) { int o = __p.__offset(6); return o != 0 ? (ubii.clients.Client?)(new ubii.clients.Client()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ClientListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ubii.devices.Device? Device { get { int o = __p.__offset(8); return o != 0 ? (ubii.devices.Device?)(new ubii.devices.Device()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ubii.devices.Device? DeviceList(int j) { int o = __p.__offset(10); return o != 0 ? (ubii.devices.Device?)(new ubii.devices.Device()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int DeviceListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ubii.devices.TopicMux? TopicMux { get { int o = __p.__offset(12); return o != 0 ? (ubii.devices.TopicMux?)(new ubii.devices.TopicMux()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ubii.devices.TopicMux? TopicMuxList(int j) { int o = __p.__offset(14); return o != 0 ? (ubii.devices.TopicMux?)(new ubii.devices.TopicMux()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TopicMuxListLength { get { int o = __p.__offset(14); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ubii.devices.TopicDemux? TopicDemux { get { int o = __p.__offset(16); return o != 0 ? (ubii.devices.TopicDemux?)(new ubii.devices.TopicDemux()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ubii.devices.TopicDemux? TopicDemuxList(int j) { int o = __p.__offset(18); return o != 0 ? (ubii.devices.TopicDemux?)(new ubii.devices.TopicDemux()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int TopicDemuxListLength { get { int o = __p.__offset(18); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ubii.sessions.Session? Session { get { int o = __p.__offset(20); return o != 0 ? (ubii.sessions.Session?)(new ubii.sessions.Session()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ubii.sessions.Session? SessionList(int j) { int o = __p.__offset(22); return o != 0 ? (ubii.sessions.Session?)(new ubii.sessions.Session()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int SessionListLength { get { int o = __p.__offset(22); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ubii.interactions.Interaction? Interaction { get { int o = __p.__offset(24); return o != 0 ? (ubii.interactions.Interaction?)(new ubii.interactions.Interaction()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }
  public ubii.interactions.Interaction? InteractionList(int j) { int o = __p.__offset(26); return o != 0 ? (ubii.interactions.Interaction?)(new ubii.interactions.Interaction()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int InteractionListLength { get { int o = __p.__offset(26); return o != 0 ? __p.__vector_len(o) : 0; } }
  public ubii.services.requests.TopicSubscription? TopicSubscription { get { int o = __p.__offset(28); return o != 0 ? (ubii.services.requests.TopicSubscription?)(new ubii.services.requests.TopicSubscription()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static Offset<ServiceData> CreateServiceData(FlatBufferBuilder builder,
      Offset<ubii.clients.Client> clientOffset = default(Offset<ubii.clients.Client>),
      VectorOffset client_listOffset = default(VectorOffset),
      Offset<ubii.devices.Device> deviceOffset = default(Offset<ubii.devices.Device>),
      VectorOffset device_listOffset = default(VectorOffset),
      Offset<ubii.devices.TopicMux> topic_muxOffset = default(Offset<ubii.devices.TopicMux>),
      VectorOffset topic_mux_listOffset = default(VectorOffset),
      Offset<ubii.devices.TopicDemux> topic_demuxOffset = default(Offset<ubii.devices.TopicDemux>),
      VectorOffset topic_demux_listOffset = default(VectorOffset),
      Offset<ubii.sessions.Session> sessionOffset = default(Offset<ubii.sessions.Session>),
      VectorOffset session_listOffset = default(VectorOffset),
      Offset<ubii.interactions.Interaction> interactionOffset = default(Offset<ubii.interactions.Interaction>),
      VectorOffset interaction_listOffset = default(VectorOffset),
      Offset<ubii.services.requests.TopicSubscription> topic_subscriptionOffset = default(Offset<ubii.services.requests.TopicSubscription>)) {
    builder.StartObject(13);
    ServiceData.AddTopicSubscription(builder, topic_subscriptionOffset);
    ServiceData.AddInteractionList(builder, interaction_listOffset);
    ServiceData.AddInteraction(builder, interactionOffset);
    ServiceData.AddSessionList(builder, session_listOffset);
    ServiceData.AddSession(builder, sessionOffset);
    ServiceData.AddTopicDemuxList(builder, topic_demux_listOffset);
    ServiceData.AddTopicDemux(builder, topic_demuxOffset);
    ServiceData.AddTopicMuxList(builder, topic_mux_listOffset);
    ServiceData.AddTopicMux(builder, topic_muxOffset);
    ServiceData.AddDeviceList(builder, device_listOffset);
    ServiceData.AddDevice(builder, deviceOffset);
    ServiceData.AddClientList(builder, client_listOffset);
    ServiceData.AddClient(builder, clientOffset);
    return ServiceData.EndServiceData(builder);
  }

  public static void StartServiceData(FlatBufferBuilder builder) { builder.StartObject(13); }
  public static void AddClient(FlatBufferBuilder builder, Offset<ubii.clients.Client> clientOffset) { builder.AddOffset(0, clientOffset.Value, 0); }
  public static void AddClientList(FlatBufferBuilder builder, VectorOffset clientListOffset) { builder.AddOffset(1, clientListOffset.Value, 0); }
  public static VectorOffset CreateClientListVector(FlatBufferBuilder builder, Offset<ubii.clients.Client>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateClientListVectorBlock(FlatBufferBuilder builder, Offset<ubii.clients.Client>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartClientListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDevice(FlatBufferBuilder builder, Offset<ubii.devices.Device> deviceOffset) { builder.AddOffset(2, deviceOffset.Value, 0); }
  public static void AddDeviceList(FlatBufferBuilder builder, VectorOffset deviceListOffset) { builder.AddOffset(3, deviceListOffset.Value, 0); }
  public static VectorOffset CreateDeviceListVector(FlatBufferBuilder builder, Offset<ubii.devices.Device>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateDeviceListVectorBlock(FlatBufferBuilder builder, Offset<ubii.devices.Device>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartDeviceListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTopicMux(FlatBufferBuilder builder, Offset<ubii.devices.TopicMux> topicMuxOffset) { builder.AddOffset(4, topicMuxOffset.Value, 0); }
  public static void AddTopicMuxList(FlatBufferBuilder builder, VectorOffset topicMuxListOffset) { builder.AddOffset(5, topicMuxListOffset.Value, 0); }
  public static VectorOffset CreateTopicMuxListVector(FlatBufferBuilder builder, Offset<ubii.devices.TopicMux>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTopicMuxListVectorBlock(FlatBufferBuilder builder, Offset<ubii.devices.TopicMux>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTopicMuxListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTopicDemux(FlatBufferBuilder builder, Offset<ubii.devices.TopicDemux> topicDemuxOffset) { builder.AddOffset(6, topicDemuxOffset.Value, 0); }
  public static void AddTopicDemuxList(FlatBufferBuilder builder, VectorOffset topicDemuxListOffset) { builder.AddOffset(7, topicDemuxListOffset.Value, 0); }
  public static VectorOffset CreateTopicDemuxListVector(FlatBufferBuilder builder, Offset<ubii.devices.TopicDemux>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTopicDemuxListVectorBlock(FlatBufferBuilder builder, Offset<ubii.devices.TopicDemux>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTopicDemuxListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSession(FlatBufferBuilder builder, Offset<ubii.sessions.Session> sessionOffset) { builder.AddOffset(8, sessionOffset.Value, 0); }
  public static void AddSessionList(FlatBufferBuilder builder, VectorOffset sessionListOffset) { builder.AddOffset(9, sessionListOffset.Value, 0); }
  public static VectorOffset CreateSessionListVector(FlatBufferBuilder builder, Offset<ubii.sessions.Session>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateSessionListVectorBlock(FlatBufferBuilder builder, Offset<ubii.sessions.Session>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartSessionListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddInteraction(FlatBufferBuilder builder, Offset<ubii.interactions.Interaction> interactionOffset) { builder.AddOffset(10, interactionOffset.Value, 0); }
  public static void AddInteractionList(FlatBufferBuilder builder, VectorOffset interactionListOffset) { builder.AddOffset(11, interactionListOffset.Value, 0); }
  public static VectorOffset CreateInteractionListVector(FlatBufferBuilder builder, Offset<ubii.interactions.Interaction>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateInteractionListVectorBlock(FlatBufferBuilder builder, Offset<ubii.interactions.Interaction>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInteractionListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddTopicSubscription(FlatBufferBuilder builder, Offset<ubii.services.requests.TopicSubscription> topicSubscriptionOffset) { builder.AddOffset(12, topicSubscriptionOffset.Value, 0); }
  public static Offset<ServiceData> EndServiceData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<ServiceData>(o);
  }
  public static void FinishServiceDataBuffer(FlatBufferBuilder builder, Offset<ServiceData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedServiceDataBuffer(FlatBufferBuilder builder, Offset<ServiceData> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
