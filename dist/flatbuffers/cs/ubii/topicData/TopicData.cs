// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.topicData
{

using global::System;
using global::FlatBuffers;

public struct TopicData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static TopicData GetRootAsTopicData(ByteBuffer _bb) { return GetRootAsTopicData(_bb, new TopicData()); }
  public static TopicData GetRootAsTopicData(ByteBuffer _bb, TopicData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public TopicData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public TopicDataContent ContentType { get { int o = __p.__offset(4); return o != 0 ? (TopicDataContent)__p.bb.Get(o + __p.bb_pos) : TopicDataContent.NONE; } }
  public TTable? Content<TTable>() where TTable : struct, IFlatbufferObject { int o = __p.__offset(6); return o != 0 ? (TTable?)__p.__union<TTable>(o) : null; }

  public static Offset<TopicData> CreateTopicData(FlatBufferBuilder builder,
      TopicDataContent content_type = TopicDataContent.NONE,
      int contentOffset = 0) {
    builder.StartObject(2);
    TopicData.AddContent(builder, contentOffset);
    TopicData.AddContentType(builder, content_type);
    return TopicData.EndTopicData(builder);
  }

  public static void StartTopicData(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddContentType(FlatBufferBuilder builder, TopicDataContent contentType) { builder.AddByte(0, (byte)contentType, 0); }
  public static void AddContent(FlatBufferBuilder builder, int contentOffset) { builder.AddOffset(1, contentOffset, 0); }
  public static Offset<TopicData> EndTopicData(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<TopicData>(o);
  }
  public static void FinishTopicDataBuffer(FlatBufferBuilder builder, Offset<TopicData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedTopicDataBuffer(FlatBufferBuilder builder, Offset<TopicData> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
