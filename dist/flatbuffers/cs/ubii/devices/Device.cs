// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.devices
{

using global::System;
using global::FlatBuffers;

public struct Device : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Device GetRootAsDevice(ByteBuffer _bb) { return GetRootAsDevice(_bb, new Device()); }
  public static Device GetRootAsDevice(ByteBuffer _bb, Device obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Device __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Id { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetIdBytes() { return __p.__vector_as_span(4); }
#else
  public ArraySegment<byte>? GetIdBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public byte[] GetIdArray() { return __p.__vector_as_array<byte>(4); }
  public string Name { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetNameBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetNameArray() { return __p.__vector_as_array<byte>(6); }
  public string Tags(int j) { int o = __p.__offset(8); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int TagsLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Description { get { int o = __p.__offset(10); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDescriptionBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetDescriptionBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public byte[] GetDescriptionArray() { return __p.__vector_as_array<byte>(10); }
  public string ClientId { get { int o = __p.__offset(12); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetClientIdBytes() { return __p.__vector_as_span(12); }
#else
  public ArraySegment<byte>? GetClientIdBytes() { return __p.__vector_as_arraysegment(12); }
#endif
  public byte[] GetClientIdArray() { return __p.__vector_as_array<byte>(12); }
  public DeviceType DeviceType { get { int o = __p.__offset(14); return o != 0 ? (DeviceType)__p.bb.GetSbyte(o + __p.bb_pos) : DeviceType.PARTICIPANT; } }
  public Component? Components(int j) { int o = __p.__offset(16); return o != 0 ? (Component?)(new Component()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ComponentsLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Device> CreateDevice(FlatBufferBuilder builder,
      StringOffset idOffset = default(StringOffset),
      StringOffset nameOffset = default(StringOffset),
      VectorOffset tagsOffset = default(VectorOffset),
      StringOffset descriptionOffset = default(StringOffset),
      StringOffset client_idOffset = default(StringOffset),
      DeviceType device_type = DeviceType.PARTICIPANT,
      VectorOffset componentsOffset = default(VectorOffset)) {
    builder.StartObject(7);
    Device.AddComponents(builder, componentsOffset);
    Device.AddClientId(builder, client_idOffset);
    Device.AddDescription(builder, descriptionOffset);
    Device.AddTags(builder, tagsOffset);
    Device.AddName(builder, nameOffset);
    Device.AddId(builder, idOffset);
    Device.AddDeviceType(builder, device_type);
    return Device.EndDevice(builder);
  }

  public static void StartDevice(FlatBufferBuilder builder) { builder.StartObject(7); }
  public static void AddId(FlatBufferBuilder builder, StringOffset idOffset) { builder.AddOffset(0, idOffset.Value, 0); }
  public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(1, nameOffset.Value, 0); }
  public static void AddTags(FlatBufferBuilder builder, VectorOffset tagsOffset) { builder.AddOffset(2, tagsOffset.Value, 0); }
  public static VectorOffset CreateTagsVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateTagsVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartTagsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDescription(FlatBufferBuilder builder, StringOffset descriptionOffset) { builder.AddOffset(3, descriptionOffset.Value, 0); }
  public static void AddClientId(FlatBufferBuilder builder, StringOffset clientIdOffset) { builder.AddOffset(4, clientIdOffset.Value, 0); }
  public static void AddDeviceType(FlatBufferBuilder builder, DeviceType deviceType) { builder.AddSbyte(5, (sbyte)deviceType, 0); }
  public static void AddComponents(FlatBufferBuilder builder, VectorOffset componentsOffset) { builder.AddOffset(6, componentsOffset.Value, 0); }
  public static VectorOffset CreateComponentsVector(FlatBufferBuilder builder, Offset<Component>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateComponentsVectorBlock(FlatBufferBuilder builder, Offset<Component>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartComponentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Device> EndDevice(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Device>(o);
  }
  public static void FinishDeviceBuffer(FlatBufferBuilder builder, Offset<Device> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDeviceBuffer(FlatBufferBuilder builder, Offset<Device> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
