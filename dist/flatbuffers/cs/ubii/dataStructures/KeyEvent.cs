// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.dataStructures
{

using global::System;
using global::FlatBuffers;

public struct KeyEvent : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static KeyEvent GetRootAsKeyEvent(ByteBuffer _bb) { return GetRootAsKeyEvent(_bb, new KeyEvent()); }
  public static KeyEvent GetRootAsKeyEvent(ByteBuffer _bb, KeyEvent obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public KeyEvent __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public ButtonEventType Type { get { int o = __p.__offset(4); return o != 0 ? (ButtonEventType)__p.bb.GetSbyte(o + __p.bb_pos) : ButtonEventType.UP; } }
  public string Key { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetKeyBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetKeyBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public byte[] GetKeyArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<KeyEvent> CreateKeyEvent(FlatBufferBuilder builder,
      ButtonEventType type = ButtonEventType.UP,
      StringOffset keyOffset = default(StringOffset)) {
    builder.StartObject(2);
    KeyEvent.AddKey(builder, keyOffset);
    KeyEvent.AddType(builder, type);
    return KeyEvent.EndKeyEvent(builder);
  }

  public static void StartKeyEvent(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddType(FlatBufferBuilder builder, ButtonEventType type) { builder.AddSbyte(0, (sbyte)type, 0); }
  public static void AddKey(FlatBufferBuilder builder, StringOffset keyOffset) { builder.AddOffset(1, keyOffset.Value, 0); }
  public static Offset<KeyEvent> EndKeyEvent(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<KeyEvent>(o);
  }
  public static void FinishKeyEventBuffer(FlatBufferBuilder builder, Offset<KeyEvent> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedKeyEventBuffer(FlatBufferBuilder builder, Offset<KeyEvent> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
