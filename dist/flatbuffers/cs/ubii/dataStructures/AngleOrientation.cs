// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.dataStructures
{

using global::System;
using global::FlatBuffers;

public struct AngleOrientation : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static AngleOrientation GetRootAsAngleOrientation(ByteBuffer _bb) { return GetRootAsAngleOrientation(_bb, new AngleOrientation()); }
  public static AngleOrientation GetRootAsAngleOrientation(ByteBuffer _bb, AngleOrientation obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public AngleOrientation __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector2? ZeroDirection { get { int o = __p.__offset(4); return o != 0 ? (Vector2?)(new Vector2()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public float Angle { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }

  public static void StartAngleOrientation(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddZeroDirection(FlatBufferBuilder builder, Offset<Vector2> zeroDirectionOffset) { builder.AddStruct(0, zeroDirectionOffset.Value, 0); }
  public static void AddAngle(FlatBufferBuilder builder, float angle) { builder.AddFloat(1, angle, 0.0f); }
  public static Offset<AngleOrientation> EndAngleOrientation(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<AngleOrientation>(o);
  }
};


}
