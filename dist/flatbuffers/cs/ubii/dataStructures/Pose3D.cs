// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.dataStructures
{

using global::System;
using global::FlatBuffers;

public struct Pose3D : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Pose3D GetRootAsPose3D(ByteBuffer _bb) { return GetRootAsPose3D(_bb, new Pose3D()); }
  public static Pose3D GetRootAsPose3D(ByteBuffer _bb, Pose3D obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Pose3D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Vector3? Position { get { int o = __p.__offset(4); return o != 0 ? (Vector3?)(new Vector3()).__assign(o + __p.bb_pos, __p.bb) : null; } }
  public Orientation3D? Orientation { get { int o = __p.__offset(6); return o != 0 ? (Orientation3D?)(new Orientation3D()).__assign(__p.__indirect(o + __p.bb_pos), __p.bb) : null; } }

  public static void StartPose3D(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddPosition(FlatBufferBuilder builder, Offset<Vector3> positionOffset) { builder.AddStruct(0, positionOffset.Value, 0); }
  public static void AddOrientation(FlatBufferBuilder builder, Offset<Orientation3D> orientationOffset) { builder.AddOffset(1, orientationOffset.Value, 0); }
  public static Offset<Pose3D> EndPose3D(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Pose3D>(o);
  }
  public static void FinishPose3DBuffer(FlatBufferBuilder builder, Offset<Pose3D> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPose3DBuffer(FlatBufferBuilder builder, Offset<Pose3D> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
