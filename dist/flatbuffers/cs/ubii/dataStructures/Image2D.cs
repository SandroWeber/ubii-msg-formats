// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.dataStructures
{

using global::System;
using global::FlatBuffers;

public struct Image2D : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Image2D GetRootAsImage2D(ByteBuffer _bb) { return GetRootAsImage2D(_bb, new Image2D()); }
  public static Image2D GetRootAsImage2D(ByteBuffer _bb, Image2D obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Image2D __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public int Width { get { int o = __p.__offset(4); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Height { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public ImageDataFormat DataFormat { get { int o = __p.__offset(8); return o != 0 ? (ImageDataFormat)__p.bb.GetSbyte(o + __p.bb_pos) : ImageDataFormat.GRAY8; } }
  public sbyte Data(int j) { int o = __p.__offset(10); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int DataLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDataBytes() { return __p.__vector_as_span(10); }
#else
  public ArraySegment<byte>? GetDataBytes() { return __p.__vector_as_arraysegment(10); }
#endif
  public sbyte[] GetDataArray() { return __p.__vector_as_array<sbyte>(10); }

  public static Offset<Image2D> CreateImage2D(FlatBufferBuilder builder,
      int width = 0,
      int height = 0,
      ImageDataFormat data_format = ImageDataFormat.GRAY8,
      VectorOffset dataOffset = default(VectorOffset)) {
    builder.StartObject(4);
    Image2D.AddData(builder, dataOffset);
    Image2D.AddHeight(builder, height);
    Image2D.AddWidth(builder, width);
    Image2D.AddDataFormat(builder, data_format);
    return Image2D.EndImage2D(builder);
  }

  public static void StartImage2D(FlatBufferBuilder builder) { builder.StartObject(4); }
  public static void AddWidth(FlatBufferBuilder builder, int width) { builder.AddInt(0, width, 0); }
  public static void AddHeight(FlatBufferBuilder builder, int height) { builder.AddInt(1, height, 0); }
  public static void AddDataFormat(FlatBufferBuilder builder, ImageDataFormat dataFormat) { builder.AddSbyte(2, (sbyte)dataFormat, 0); }
  public static void AddData(FlatBufferBuilder builder, VectorOffset dataOffset) { builder.AddOffset(3, dataOffset.Value, 0); }
  public static VectorOffset CreateDataVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDataVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<Image2D> EndImage2D(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Image2D>(o);
  }
  public static void FinishImage2DBuffer(FlatBufferBuilder builder, Offset<Image2D> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedImage2DBuffer(FlatBufferBuilder builder, Offset<Image2D> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
