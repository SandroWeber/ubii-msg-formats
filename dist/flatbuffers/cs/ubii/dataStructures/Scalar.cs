// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace ubii.dataStructures
{

using global::System;
using global::FlatBuffers;

public struct Scalar : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static Scalar GetRootAsScalar(ByteBuffer _bb) { return GetRootAsScalar(_bb, new Scalar()); }
  public static Scalar GetRootAsScalar(ByteBuffer _bb, Scalar obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public Scalar __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public bool Bool { get { int o = __p.__offset(4); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
  public bool BoolList(int j) { int o = __p.__offset(6); return o != 0 ? 0!=__p.bb.Get(__p.__vector(o) + j * 1) : false; }
  public int BoolListLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetBoolListBytes() { return __p.__vector_as_span(6); }
#else
  public ArraySegment<byte>? GetBoolListBytes() { return __p.__vector_as_arraysegment(6); }
#endif
  public bool[] GetBoolListArray() { return __p.__vector_as_array<bool>(6); }
  public string String { get { int o = __p.__offset(8); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
  public Span<byte> GetStringBytes() { return __p.__vector_as_span(8); }
#else
  public ArraySegment<byte>? GetStringBytes() { return __p.__vector_as_arraysegment(8); }
#endif
  public byte[] GetStringArray() { return __p.__vector_as_array<byte>(8); }
  public string StringList(int j) { int o = __p.__offset(10); return o != 0 ? __p.__string(__p.__vector(o) + j * 4) : null; }
  public int StringListLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
  public sbyte Byte { get { int o = __p.__offset(12); return o != 0 ? __p.bb.GetSbyte(o + __p.bb_pos) : (sbyte)0; } }
  public int Int32 { get { int o = __p.__offset(14); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public int Int32List(int j) { int o = __p.__offset(16); return o != 0 ? __p.bb.GetInt(__p.__vector(o) + j * 4) : (int)0; }
  public int Int32ListLength { get { int o = __p.__offset(16); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetInt32ListBytes() { return __p.__vector_as_span(16); }
#else
  public ArraySegment<byte>? GetInt32ListBytes() { return __p.__vector_as_arraysegment(16); }
#endif
  public int[] GetInt32ListArray() { return __p.__vector_as_array<int>(16); }
  public float Float { get { int o = __p.__offset(18); return o != 0 ? __p.bb.GetFloat(o + __p.bb_pos) : (float)0.0f; } }
  public float FloatList(int j) { int o = __p.__offset(20); return o != 0 ? __p.bb.GetFloat(__p.__vector(o) + j * 4) : (float)0; }
  public int FloatListLength { get { int o = __p.__offset(20); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetFloatListBytes() { return __p.__vector_as_span(20); }
#else
  public ArraySegment<byte>? GetFloatListBytes() { return __p.__vector_as_arraysegment(20); }
#endif
  public float[] GetFloatListArray() { return __p.__vector_as_array<float>(20); }
  public double Double { get { int o = __p.__offset(22); return o != 0 ? __p.bb.GetDouble(o + __p.bb_pos) : (double)0.0; } }
  public double DoubleList(int j) { int o = __p.__offset(24); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int DoubleListLength { get { int o = __p.__offset(24); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<byte> GetDoubleListBytes() { return __p.__vector_as_span(24); }
#else
  public ArraySegment<byte>? GetDoubleListBytes() { return __p.__vector_as_arraysegment(24); }
#endif
  public double[] GetDoubleListArray() { return __p.__vector_as_array<double>(24); }

  public static Offset<Scalar> CreateScalar(FlatBufferBuilder builder,
      bool bool = false,
      VectorOffset bool_listOffset = default(VectorOffset),
      StringOffset stringOffset = default(StringOffset),
      VectorOffset string_listOffset = default(VectorOffset),
      sbyte byte = 0,
      int int32 = 0,
      VectorOffset int32_listOffset = default(VectorOffset),
      float float = 0.0f,
      VectorOffset float_listOffset = default(VectorOffset),
      double double = 0.0,
      VectorOffset double_listOffset = default(VectorOffset)) {
    builder.StartObject(11);
    Scalar.AddDouble(builder, double);
    Scalar.AddDoubleList(builder, double_listOffset);
    Scalar.AddFloatList(builder, float_listOffset);
    Scalar.AddFloat(builder, float);
    Scalar.AddInt32List(builder, int32_listOffset);
    Scalar.AddInt32(builder, int32);
    Scalar.AddStringList(builder, string_listOffset);
    Scalar.AddString(builder, stringOffset);
    Scalar.AddBoolList(builder, bool_listOffset);
    Scalar.AddByte(builder, byte);
    Scalar.AddBool(builder, bool);
    return Scalar.EndScalar(builder);
  }

  public static void StartScalar(FlatBufferBuilder builder) { builder.StartObject(11); }
  public static void AddBool(FlatBufferBuilder builder, bool bool) { builder.AddBool(0, bool, false); }
  public static void AddBoolList(FlatBufferBuilder builder, VectorOffset boolListOffset) { builder.AddOffset(1, boolListOffset.Value, 0); }
  public static VectorOffset CreateBoolListVector(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddBool(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBoolListVectorBlock(FlatBufferBuilder builder, bool[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartBoolListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddString(FlatBufferBuilder builder, StringOffset stringOffset) { builder.AddOffset(2, stringOffset.Value, 0); }
  public static void AddStringList(FlatBufferBuilder builder, VectorOffset stringListOffset) { builder.AddOffset(3, stringListOffset.Value, 0); }
  public static VectorOffset CreateStringListVector(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateStringListVectorBlock(FlatBufferBuilder builder, StringOffset[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartStringListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddByte(FlatBufferBuilder builder, sbyte byte) { builder.AddSbyte(4, byte, 0); }
  public static void AddInt32(FlatBufferBuilder builder, int int32) { builder.AddInt(5, int32, 0); }
  public static void AddInt32List(FlatBufferBuilder builder, VectorOffset int32ListOffset) { builder.AddOffset(6, int32ListOffset.Value, 0); }
  public static VectorOffset CreateInt32ListVector(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddInt(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateInt32ListVectorBlock(FlatBufferBuilder builder, int[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartInt32ListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddFloat(FlatBufferBuilder builder, float float) { builder.AddFloat(7, float, 0.0f); }
  public static void AddFloatList(FlatBufferBuilder builder, VectorOffset floatListOffset) { builder.AddOffset(8, floatListOffset.Value, 0); }
  public static VectorOffset CreateFloatListVector(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddFloat(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateFloatListVectorBlock(FlatBufferBuilder builder, float[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartFloatListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddDouble(FlatBufferBuilder builder, double double) { builder.AddDouble(9, double, 0.0); }
  public static void AddDoubleList(FlatBufferBuilder builder, VectorOffset doubleListOffset) { builder.AddOffset(10, doubleListOffset.Value, 0); }
  public static VectorOffset CreateDoubleListVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateDoubleListVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static void StartDoubleListVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<Scalar> EndScalar(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<Scalar>(o);
  }
};


}
