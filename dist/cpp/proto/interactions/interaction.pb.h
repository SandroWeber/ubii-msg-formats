// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/interactions/interaction.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2finteractions_2finteraction_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2finteractions_2finteraction_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/interactions/ioFormat.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2finteractions_2finteraction_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2finteractions_2finteraction_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2finteractions_2finteraction_2eproto;
namespace ubii {
namespace interactions {
class Interaction;
class InteractionDefaultTypeInternal;
extern InteractionDefaultTypeInternal _Interaction_default_instance_;
class InteractionList;
class InteractionListDefaultTypeInternal;
extern InteractionListDefaultTypeInternal _InteractionList_default_instance_;
}  // namespace interactions
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::interactions::Interaction* Arena::CreateMaybeMessage<::ubii::interactions::Interaction>(Arena*);
template<> ::ubii::interactions::InteractionList* Arena::CreateMaybeMessage<::ubii::interactions::InteractionList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace interactions {

enum InteractionStatus : int {
  CREATED = 0,
  INITIALIZED = 1,
  PROCESSING = 2,
  HALTED = 3,
  InteractionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  InteractionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool InteractionStatus_IsValid(int value);
constexpr InteractionStatus InteractionStatus_MIN = CREATED;
constexpr InteractionStatus InteractionStatus_MAX = HALTED;
constexpr int InteractionStatus_ARRAYSIZE = InteractionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* InteractionStatus_descriptor();
template<typename T>
inline const std::string& InteractionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, InteractionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function InteractionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    InteractionStatus_descriptor(), enum_t_value);
}
inline bool InteractionStatus_Parse(
    const std::string& name, InteractionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<InteractionStatus>(
    InteractionStatus_descriptor(), name, value);
}
// ===================================================================

class Interaction :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.interactions.Interaction) */ {
 public:
  Interaction();
  virtual ~Interaction();

  Interaction(const Interaction& from);
  Interaction(Interaction&& from) noexcept
    : Interaction() {
    *this = ::std::move(from);
  }

  inline Interaction& operator=(const Interaction& from) {
    CopyFrom(from);
    return *this;
  }
  inline Interaction& operator=(Interaction&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Interaction& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Interaction* internal_default_instance() {
    return reinterpret_cast<const Interaction*>(
               &_Interaction_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Interaction& a, Interaction& b) {
    a.Swap(&b);
  }
  inline void Swap(Interaction* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Interaction* New() const final {
    return CreateMaybeMessage<Interaction>(nullptr);
  }

  Interaction* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Interaction>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Interaction& from);
  void MergeFrom(const Interaction& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Interaction* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.interactions.Interaction";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finteractions_2finteraction_2eproto);
    return ::descriptor_table_proto_2finteractions_2finteraction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInputFormatsFieldNumber = 4,
    kOutputFormatsFieldNumber = 5,
    kAuthorsFieldNumber = 8,
    kTagsFieldNumber = 9,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kProcessingCallbackFieldNumber = 3,
    kOnCreatedFieldNumber = 6,
    kDescriptionFieldNumber = 10,
    kProcessFrequencyFieldNumber = 7,
    kStatusFieldNumber = 11,
    kEditableFieldNumber = 12,
  };
  // repeated .ubii.interactions.IOFormat input_formats = 4;
  int input_formats_size() const;
  private:
  int _internal_input_formats_size() const;
  public:
  void clear_input_formats();
  ::ubii::interactions::IOFormat* mutable_input_formats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat >*
      mutable_input_formats();
  private:
  const ::ubii::interactions::IOFormat& _internal_input_formats(int index) const;
  ::ubii::interactions::IOFormat* _internal_add_input_formats();
  public:
  const ::ubii::interactions::IOFormat& input_formats(int index) const;
  ::ubii::interactions::IOFormat* add_input_formats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat >&
      input_formats() const;

  // repeated .ubii.interactions.IOFormat output_formats = 5;
  int output_formats_size() const;
  private:
  int _internal_output_formats_size() const;
  public:
  void clear_output_formats();
  ::ubii::interactions::IOFormat* mutable_output_formats(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat >*
      mutable_output_formats();
  private:
  const ::ubii::interactions::IOFormat& _internal_output_formats(int index) const;
  ::ubii::interactions::IOFormat* _internal_add_output_formats();
  public:
  const ::ubii::interactions::IOFormat& output_formats(int index) const;
  ::ubii::interactions::IOFormat* add_output_formats();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat >&
      output_formats() const;

  // repeated string authors = 8;
  int authors_size() const;
  private:
  int _internal_authors_size() const;
  public:
  void clear_authors();
  const std::string& authors(int index) const;
  std::string* mutable_authors(int index);
  void set_authors(int index, const std::string& value);
  void set_authors(int index, std::string&& value);
  void set_authors(int index, const char* value);
  void set_authors(int index, const char* value, size_t size);
  std::string* add_authors();
  void add_authors(const std::string& value);
  void add_authors(std::string&& value);
  void add_authors(const char* value);
  void add_authors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authors();
  private:
  const std::string& _internal_authors(int index) const;
  std::string* _internal_add_authors();
  public:

  // repeated string tags = 9;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string processing_callback = 3;
  void clear_processing_callback();
  const std::string& processing_callback() const;
  void set_processing_callback(const std::string& value);
  void set_processing_callback(std::string&& value);
  void set_processing_callback(const char* value);
  void set_processing_callback(const char* value, size_t size);
  std::string* mutable_processing_callback();
  std::string* release_processing_callback();
  void set_allocated_processing_callback(std::string* processing_callback);
  private:
  const std::string& _internal_processing_callback() const;
  void _internal_set_processing_callback(const std::string& value);
  std::string* _internal_mutable_processing_callback();
  public:

  // string on_created = 6;
  void clear_on_created();
  const std::string& on_created() const;
  void set_on_created(const std::string& value);
  void set_on_created(std::string&& value);
  void set_on_created(const char* value);
  void set_on_created(const char* value, size_t size);
  std::string* mutable_on_created();
  std::string* release_on_created();
  void set_allocated_on_created(std::string* on_created);
  private:
  const std::string& _internal_on_created() const;
  void _internal_set_on_created(const std::string& value);
  std::string* _internal_mutable_on_created();
  public:

  // string description = 10;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // float process_frequency = 7;
  void clear_process_frequency();
  float process_frequency() const;
  void set_process_frequency(float value);
  private:
  float _internal_process_frequency() const;
  void _internal_set_process_frequency(float value);
  public:

  // .ubii.interactions.InteractionStatus status = 11;
  void clear_status();
  ::ubii::interactions::InteractionStatus status() const;
  void set_status(::ubii::interactions::InteractionStatus value);
  private:
  ::ubii::interactions::InteractionStatus _internal_status() const;
  void _internal_set_status(::ubii::interactions::InteractionStatus value);
  public:

  // bool editable = 12;
  void clear_editable();
  bool editable() const;
  void set_editable(bool value);
  private:
  bool _internal_editable() const;
  void _internal_set_editable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.interactions.Interaction)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat > input_formats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat > output_formats_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr processing_callback_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr on_created_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  float process_frequency_;
  int status_;
  bool editable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finteractions_2finteraction_2eproto;
};
// -------------------------------------------------------------------

class InteractionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.interactions.InteractionList) */ {
 public:
  InteractionList();
  virtual ~InteractionList();

  InteractionList(const InteractionList& from);
  InteractionList(InteractionList&& from) noexcept
    : InteractionList() {
    *this = ::std::move(from);
  }

  inline InteractionList& operator=(const InteractionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline InteractionList& operator=(InteractionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InteractionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InteractionList* internal_default_instance() {
    return reinterpret_cast<const InteractionList*>(
               &_InteractionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(InteractionList& a, InteractionList& b) {
    a.Swap(&b);
  }
  inline void Swap(InteractionList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InteractionList* New() const final {
    return CreateMaybeMessage<InteractionList>(nullptr);
  }

  InteractionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InteractionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InteractionList& from);
  void MergeFrom(const InteractionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InteractionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.interactions.InteractionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2finteractions_2finteraction_2eproto);
    return ::descriptor_table_proto_2finteractions_2finteraction_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .ubii.interactions.Interaction elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ubii::interactions::Interaction* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction >*
      mutable_elements();
  private:
  const ::ubii::interactions::Interaction& _internal_elements(int index) const;
  ::ubii::interactions::Interaction* _internal_add_elements();
  public:
  const ::ubii::interactions::Interaction& elements(int index) const;
  ::ubii::interactions::Interaction* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.interactions.InteractionList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2finteractions_2finteraction_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Interaction

// string id = 1;
inline void Interaction::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Interaction::id() const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.id)
  return _internal_id();
}
inline void Interaction::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.id)
}
inline std::string* Interaction::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.id)
  return _internal_mutable_id();
}
inline const std::string& Interaction::_internal_id() const {
  return id_.GetNoArena();
}
inline void Interaction::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Interaction::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.interactions.Interaction.id)
}
inline void Interaction::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.interactions.Interaction.id)
}
inline void Interaction::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.interactions.Interaction.id)
}
inline std::string* Interaction::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Interaction::release_id() {
  // @@protoc_insertion_point(field_release:ubii.interactions.Interaction.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Interaction::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.interactions.Interaction.id)
}

// string name = 2;
inline void Interaction::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Interaction::name() const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.name)
  return _internal_name();
}
inline void Interaction::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.name)
}
inline std::string* Interaction::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.name)
  return _internal_mutable_name();
}
inline const std::string& Interaction::_internal_name() const {
  return name_.GetNoArena();
}
inline void Interaction::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Interaction::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.interactions.Interaction.name)
}
inline void Interaction::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.interactions.Interaction.name)
}
inline void Interaction::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.interactions.Interaction.name)
}
inline std::string* Interaction::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Interaction::release_name() {
  // @@protoc_insertion_point(field_release:ubii.interactions.Interaction.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Interaction::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.interactions.Interaction.name)
}

// string processing_callback = 3;
inline void Interaction::clear_processing_callback() {
  processing_callback_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Interaction::processing_callback() const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.processing_callback)
  return _internal_processing_callback();
}
inline void Interaction::set_processing_callback(const std::string& value) {
  _internal_set_processing_callback(value);
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.processing_callback)
}
inline std::string* Interaction::mutable_processing_callback() {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.processing_callback)
  return _internal_mutable_processing_callback();
}
inline const std::string& Interaction::_internal_processing_callback() const {
  return processing_callback_.GetNoArena();
}
inline void Interaction::_internal_set_processing_callback(const std::string& value) {
  
  processing_callback_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Interaction::set_processing_callback(std::string&& value) {
  
  processing_callback_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.interactions.Interaction.processing_callback)
}
inline void Interaction::set_processing_callback(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  processing_callback_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.interactions.Interaction.processing_callback)
}
inline void Interaction::set_processing_callback(const char* value, size_t size) {
  
  processing_callback_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.interactions.Interaction.processing_callback)
}
inline std::string* Interaction::_internal_mutable_processing_callback() {
  
  return processing_callback_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Interaction::release_processing_callback() {
  // @@protoc_insertion_point(field_release:ubii.interactions.Interaction.processing_callback)
  
  return processing_callback_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Interaction::set_allocated_processing_callback(std::string* processing_callback) {
  if (processing_callback != nullptr) {
    
  } else {
    
  }
  processing_callback_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), processing_callback);
  // @@protoc_insertion_point(field_set_allocated:ubii.interactions.Interaction.processing_callback)
}

// repeated .ubii.interactions.IOFormat input_formats = 4;
inline int Interaction::_internal_input_formats_size() const {
  return input_formats_.size();
}
inline int Interaction::input_formats_size() const {
  return _internal_input_formats_size();
}
inline ::ubii::interactions::IOFormat* Interaction::mutable_input_formats(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.input_formats)
  return input_formats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat >*
Interaction::mutable_input_formats() {
  // @@protoc_insertion_point(field_mutable_list:ubii.interactions.Interaction.input_formats)
  return &input_formats_;
}
inline const ::ubii::interactions::IOFormat& Interaction::_internal_input_formats(int index) const {
  return input_formats_.Get(index);
}
inline const ::ubii::interactions::IOFormat& Interaction::input_formats(int index) const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.input_formats)
  return _internal_input_formats(index);
}
inline ::ubii::interactions::IOFormat* Interaction::_internal_add_input_formats() {
  return input_formats_.Add();
}
inline ::ubii::interactions::IOFormat* Interaction::add_input_formats() {
  // @@protoc_insertion_point(field_add:ubii.interactions.Interaction.input_formats)
  return _internal_add_input_formats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat >&
Interaction::input_formats() const {
  // @@protoc_insertion_point(field_list:ubii.interactions.Interaction.input_formats)
  return input_formats_;
}

// repeated .ubii.interactions.IOFormat output_formats = 5;
inline int Interaction::_internal_output_formats_size() const {
  return output_formats_.size();
}
inline int Interaction::output_formats_size() const {
  return _internal_output_formats_size();
}
inline ::ubii::interactions::IOFormat* Interaction::mutable_output_formats(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.output_formats)
  return output_formats_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat >*
Interaction::mutable_output_formats() {
  // @@protoc_insertion_point(field_mutable_list:ubii.interactions.Interaction.output_formats)
  return &output_formats_;
}
inline const ::ubii::interactions::IOFormat& Interaction::_internal_output_formats(int index) const {
  return output_formats_.Get(index);
}
inline const ::ubii::interactions::IOFormat& Interaction::output_formats(int index) const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.output_formats)
  return _internal_output_formats(index);
}
inline ::ubii::interactions::IOFormat* Interaction::_internal_add_output_formats() {
  return output_formats_.Add();
}
inline ::ubii::interactions::IOFormat* Interaction::add_output_formats() {
  // @@protoc_insertion_point(field_add:ubii.interactions.Interaction.output_formats)
  return _internal_add_output_formats();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::IOFormat >&
Interaction::output_formats() const {
  // @@protoc_insertion_point(field_list:ubii.interactions.Interaction.output_formats)
  return output_formats_;
}

// string on_created = 6;
inline void Interaction::clear_on_created() {
  on_created_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Interaction::on_created() const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.on_created)
  return _internal_on_created();
}
inline void Interaction::set_on_created(const std::string& value) {
  _internal_set_on_created(value);
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.on_created)
}
inline std::string* Interaction::mutable_on_created() {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.on_created)
  return _internal_mutable_on_created();
}
inline const std::string& Interaction::_internal_on_created() const {
  return on_created_.GetNoArena();
}
inline void Interaction::_internal_set_on_created(const std::string& value) {
  
  on_created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Interaction::set_on_created(std::string&& value) {
  
  on_created_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.interactions.Interaction.on_created)
}
inline void Interaction::set_on_created(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  on_created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.interactions.Interaction.on_created)
}
inline void Interaction::set_on_created(const char* value, size_t size) {
  
  on_created_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.interactions.Interaction.on_created)
}
inline std::string* Interaction::_internal_mutable_on_created() {
  
  return on_created_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Interaction::release_on_created() {
  // @@protoc_insertion_point(field_release:ubii.interactions.Interaction.on_created)
  
  return on_created_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Interaction::set_allocated_on_created(std::string* on_created) {
  if (on_created != nullptr) {
    
  } else {
    
  }
  on_created_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), on_created);
  // @@protoc_insertion_point(field_set_allocated:ubii.interactions.Interaction.on_created)
}

// float process_frequency = 7;
inline void Interaction::clear_process_frequency() {
  process_frequency_ = 0;
}
inline float Interaction::_internal_process_frequency() const {
  return process_frequency_;
}
inline float Interaction::process_frequency() const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.process_frequency)
  return _internal_process_frequency();
}
inline void Interaction::_internal_set_process_frequency(float value) {
  
  process_frequency_ = value;
}
inline void Interaction::set_process_frequency(float value) {
  _internal_set_process_frequency(value);
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.process_frequency)
}

// repeated string authors = 8;
inline int Interaction::_internal_authors_size() const {
  return authors_.size();
}
inline int Interaction::authors_size() const {
  return _internal_authors_size();
}
inline void Interaction::clear_authors() {
  authors_.Clear();
}
inline std::string* Interaction::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:ubii.interactions.Interaction.authors)
  return _internal_add_authors();
}
inline const std::string& Interaction::_internal_authors(int index) const {
  return authors_.Get(index);
}
inline const std::string& Interaction::authors(int index) const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.authors)
  return _internal_authors(index);
}
inline std::string* Interaction::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.authors)
  return authors_.Mutable(index);
}
inline void Interaction::set_authors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.authors)
  authors_.Mutable(index)->assign(value);
}
inline void Interaction::set_authors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
inline void Interaction::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.interactions.Interaction.authors)
}
inline void Interaction::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.interactions.Interaction.authors)
}
inline std::string* Interaction::_internal_add_authors() {
  return authors_.Add();
}
inline void Interaction::add_authors(const std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.interactions.Interaction.authors)
}
inline void Interaction::add_authors(std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.interactions.Interaction.authors)
}
inline void Interaction::add_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.interactions.Interaction.authors)
}
inline void Interaction::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.interactions.Interaction.authors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Interaction::authors() const {
  // @@protoc_insertion_point(field_list:ubii.interactions.Interaction.authors)
  return authors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Interaction::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:ubii.interactions.Interaction.authors)
  return &authors_;
}

// repeated string tags = 9;
inline int Interaction::_internal_tags_size() const {
  return tags_.size();
}
inline int Interaction::tags_size() const {
  return _internal_tags_size();
}
inline void Interaction::clear_tags() {
  tags_.Clear();
}
inline std::string* Interaction::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.interactions.Interaction.tags)
  return _internal_add_tags();
}
inline const std::string& Interaction::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Interaction::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.tags)
  return _internal_tags(index);
}
inline std::string* Interaction::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.tags)
  return tags_.Mutable(index);
}
inline void Interaction::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Interaction::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Interaction::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.interactions.Interaction.tags)
}
inline void Interaction::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.interactions.Interaction.tags)
}
inline std::string* Interaction::_internal_add_tags() {
  return tags_.Add();
}
inline void Interaction::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.interactions.Interaction.tags)
}
inline void Interaction::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.interactions.Interaction.tags)
}
inline void Interaction::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.interactions.Interaction.tags)
}
inline void Interaction::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.interactions.Interaction.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Interaction::tags() const {
  // @@protoc_insertion_point(field_list:ubii.interactions.Interaction.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Interaction::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.interactions.Interaction.tags)
  return &tags_;
}

// string description = 10;
inline void Interaction::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Interaction::description() const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.description)
  return _internal_description();
}
inline void Interaction::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.description)
}
inline std::string* Interaction::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.Interaction.description)
  return _internal_mutable_description();
}
inline const std::string& Interaction::_internal_description() const {
  return description_.GetNoArena();
}
inline void Interaction::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Interaction::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.interactions.Interaction.description)
}
inline void Interaction::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.interactions.Interaction.description)
}
inline void Interaction::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.interactions.Interaction.description)
}
inline std::string* Interaction::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Interaction::release_description() {
  // @@protoc_insertion_point(field_release:ubii.interactions.Interaction.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Interaction::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.interactions.Interaction.description)
}

// .ubii.interactions.InteractionStatus status = 11;
inline void Interaction::clear_status() {
  status_ = 0;
}
inline ::ubii::interactions::InteractionStatus Interaction::_internal_status() const {
  return static_cast< ::ubii::interactions::InteractionStatus >(status_);
}
inline ::ubii::interactions::InteractionStatus Interaction::status() const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.status)
  return _internal_status();
}
inline void Interaction::_internal_set_status(::ubii::interactions::InteractionStatus value) {
  
  status_ = value;
}
inline void Interaction::set_status(::ubii::interactions::InteractionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.status)
}

// bool editable = 12;
inline void Interaction::clear_editable() {
  editable_ = false;
}
inline bool Interaction::_internal_editable() const {
  return editable_;
}
inline bool Interaction::editable() const {
  // @@protoc_insertion_point(field_get:ubii.interactions.Interaction.editable)
  return _internal_editable();
}
inline void Interaction::_internal_set_editable(bool value) {
  
  editable_ = value;
}
inline void Interaction::set_editable(bool value) {
  _internal_set_editable(value);
  // @@protoc_insertion_point(field_set:ubii.interactions.Interaction.editable)
}

// -------------------------------------------------------------------

// InteractionList

// repeated .ubii.interactions.Interaction elements = 1;
inline int InteractionList::_internal_elements_size() const {
  return elements_.size();
}
inline int InteractionList::elements_size() const {
  return _internal_elements_size();
}
inline void InteractionList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::interactions::Interaction* InteractionList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.interactions.InteractionList.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction >*
InteractionList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.interactions.InteractionList.elements)
  return &elements_;
}
inline const ::ubii::interactions::Interaction& InteractionList::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::ubii::interactions::Interaction& InteractionList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.interactions.InteractionList.elements)
  return _internal_elements(index);
}
inline ::ubii::interactions::Interaction* InteractionList::_internal_add_elements() {
  return elements_.Add();
}
inline ::ubii::interactions::Interaction* InteractionList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.interactions.InteractionList.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction >&
InteractionList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.interactions.InteractionList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace interactions
}  // namespace ubii

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ubii::interactions::InteractionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ubii::interactions::InteractionStatus>() {
  return ::ubii::interactions::InteractionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2finteractions_2finteraction_2eproto
