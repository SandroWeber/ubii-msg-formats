// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/dataStructure/pose2d.proto

#include "proto/dataStructure/pose2d.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdataStructure_2fvector2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_proto_2fdataStructure_2fvector2_2eproto;
namespace ubii {
namespace dataStructure {
class Pose2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Pose2D> _instance;
  const ::ubii::dataStructure::Vector2* direction_;
  float angle_;
} _Pose2D_default_instance_;
}  // namespace dataStructure
}  // namespace ubii
static void InitDefaultsscc_info_Pose2D_proto_2fdataStructure_2fpose2d_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::dataStructure::_Pose2D_default_instance_;
    new (ptr) ::ubii::dataStructure::Pose2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::dataStructure::Pose2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pose2D_proto_2fdataStructure_2fpose2d_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Pose2D_proto_2fdataStructure_2fpose2d_2eproto}, {
      &scc_info_Vector2_proto_2fdataStructure_2fvector2_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fdataStructure_2fpose2d_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fdataStructure_2fpose2d_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fdataStructure_2fpose2d_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fdataStructure_2fpose2d_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::dataStructure::Pose2D, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ubii::dataStructure::Pose2D, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::dataStructure::Pose2D, position_),
  offsetof(::ubii::dataStructure::Pose2DDefaultTypeInternal, direction_),
  offsetof(::ubii::dataStructure::Pose2DDefaultTypeInternal, angle_),
  PROTOBUF_FIELD_OFFSET(::ubii::dataStructure::Pose2D, orientation_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ubii::dataStructure::Pose2D)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::dataStructure::_Pose2D_default_instance_),
};

const char descriptor_table_protodef_proto_2fdataStructure_2fpose2d_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n proto/dataStructure/pose2d.proto\022\022ubii"
  ".dataStructure\032!proto/dataStructure/vect"
  "or2.proto\"\211\001\n\006Pose2D\022-\n\010position\030\001 \001(\0132\033"
  ".ubii.dataStructure.Vector2\0220\n\tdirection"
  "\030\002 \001(\0132\033.ubii.dataStructure.Vector2H\000\022\017\n"
  "\005angle\030\003 \001(\002H\000B\r\n\013orientationb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fdataStructure_2fpose2d_2eproto_deps[1] = {
  &::descriptor_table_proto_2fdataStructure_2fvector2_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fdataStructure_2fpose2d_2eproto_sccs[1] = {
  &scc_info_Pose2D_proto_2fdataStructure_2fpose2d_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fdataStructure_2fpose2d_2eproto_once;
static bool descriptor_table_proto_2fdataStructure_2fpose2d_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdataStructure_2fpose2d_2eproto = {
  &descriptor_table_proto_2fdataStructure_2fpose2d_2eproto_initialized, descriptor_table_protodef_proto_2fdataStructure_2fpose2d_2eproto, "proto/dataStructure/pose2d.proto", 237,
  &descriptor_table_proto_2fdataStructure_2fpose2d_2eproto_once, descriptor_table_proto_2fdataStructure_2fpose2d_2eproto_sccs, descriptor_table_proto_2fdataStructure_2fpose2d_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_proto_2fdataStructure_2fpose2d_2eproto::offsets,
  file_level_metadata_proto_2fdataStructure_2fpose2d_2eproto, 1, file_level_enum_descriptors_proto_2fdataStructure_2fpose2d_2eproto, file_level_service_descriptors_proto_2fdataStructure_2fpose2d_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fdataStructure_2fpose2d_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fdataStructure_2fpose2d_2eproto), true);
namespace ubii {
namespace dataStructure {

// ===================================================================

void Pose2D::InitAsDefaultInstance() {
  ::ubii::dataStructure::_Pose2D_default_instance_._instance.get_mutable()->position_ = const_cast< ::ubii::dataStructure::Vector2*>(
      ::ubii::dataStructure::Vector2::internal_default_instance());
  ::ubii::dataStructure::_Pose2D_default_instance_.direction_ = const_cast< ::ubii::dataStructure::Vector2*>(
      ::ubii::dataStructure::Vector2::internal_default_instance());
  ::ubii::dataStructure::_Pose2D_default_instance_.angle_ = 0;
}
class Pose2D::_Internal {
 public:
  static const ::ubii::dataStructure::Vector2& position(const Pose2D* msg);
  static const ::ubii::dataStructure::Vector2& direction(const Pose2D* msg);
};

const ::ubii::dataStructure::Vector2&
Pose2D::_Internal::position(const Pose2D* msg) {
  return *msg->position_;
}
const ::ubii::dataStructure::Vector2&
Pose2D::_Internal::direction(const Pose2D* msg) {
  return *msg->orientation_.direction_;
}
void Pose2D::clear_position() {
  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
}
void Pose2D::set_allocated_direction(::ubii::dataStructure::Vector2* direction) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_orientation();
  if (direction) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      direction = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, direction, submessage_arena);
    }
    set_has_direction();
    orientation_.direction_ = direction;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose2D.direction)
}
void Pose2D::clear_direction() {
  if (_internal_has_direction()) {
    delete orientation_.direction_;
    clear_has_orientation();
  }
}
Pose2D::Pose2D()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.dataStructure.Pose2D)
}
Pose2D::Pose2D(const Pose2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from._internal_has_position()) {
    position_ = new ::ubii::dataStructure::Vector2(*from.position_);
  } else {
    position_ = nullptr;
  }
  clear_has_orientation();
  switch (from.orientation_case()) {
    case kDirection: {
      _internal_mutable_direction()->::ubii::dataStructure::Vector2::MergeFrom(from._internal_direction());
      break;
    }
    case kAngle: {
      _internal_set_angle(from._internal_angle());
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ubii.dataStructure.Pose2D)
}

void Pose2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Pose2D_proto_2fdataStructure_2fpose2d_2eproto.base);
  position_ = nullptr;
  clear_has_orientation();
}

Pose2D::~Pose2D() {
  // @@protoc_insertion_point(destructor:ubii.dataStructure.Pose2D)
  SharedDtor();
}

void Pose2D::SharedDtor() {
  if (this != internal_default_instance()) delete position_;
  if (has_orientation()) {
    clear_orientation();
  }
}

void Pose2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Pose2D& Pose2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Pose2D_proto_2fdataStructure_2fpose2d_2eproto.base);
  return *internal_default_instance();
}


void Pose2D::clear_orientation() {
// @@protoc_insertion_point(one_of_clear_start:ubii.dataStructure.Pose2D)
  switch (orientation_case()) {
    case kDirection: {
      delete orientation_.direction_;
      break;
    }
    case kAngle: {
      // No need to clear
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}


void Pose2D::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.dataStructure.Pose2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && position_ != nullptr) {
    delete position_;
  }
  position_ = nullptr;
  clear_orientation();
  _internal_metadata_.Clear();
}

const char* Pose2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ubii.dataStructure.Vector2 position = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_position(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Vector2 direction = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_direction(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float angle = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _internal_set_angle(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Pose2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.dataStructure.Pose2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ubii.dataStructure.Vector2 position = 1;
  if (this->has_position()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::position(this), target, stream);
  }

  // .ubii.dataStructure.Vector2 direction = 2;
  if (_internal_has_direction()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::direction(this), target, stream);
  }

  // float angle = 3;
  if (_internal_has_angle()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_angle(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.dataStructure.Pose2D)
  return target;
}

size_t Pose2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.dataStructure.Pose2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .ubii.dataStructure.Vector2 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *position_);
  }

  switch (orientation_case()) {
    // .ubii.dataStructure.Vector2 direction = 2;
    case kDirection: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *orientation_.direction_);
      break;
    }
    // float angle = 3;
    case kAngle: {
      total_size += 1 + 4;
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Pose2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.dataStructure.Pose2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Pose2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Pose2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.dataStructure.Pose2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.dataStructure.Pose2D)
    MergeFrom(*source);
  }
}

void Pose2D::MergeFrom(const Pose2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.dataStructure.Pose2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_position()) {
    _internal_mutable_position()->::ubii::dataStructure::Vector2::MergeFrom(from._internal_position());
  }
  switch (from.orientation_case()) {
    case kDirection: {
      _internal_mutable_direction()->::ubii::dataStructure::Vector2::MergeFrom(from._internal_direction());
      break;
    }
    case kAngle: {
      _internal_set_angle(from._internal_angle());
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
}

void Pose2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.dataStructure.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose2D::CopyFrom(const Pose2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.dataStructure.Pose2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose2D::IsInitialized() const {
  return true;
}

void Pose2D::InternalSwap(Pose2D* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(position_, other->position_);
  swap(orientation_, other->orientation_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Pose2D::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace dataStructure
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ubii::dataStructure::Pose2D* Arena::CreateMaybeMessage< ::ubii::dataStructure::Pose2D >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::dataStructure::Pose2D >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
