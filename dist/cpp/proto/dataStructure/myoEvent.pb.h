// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/dataStructure/myoEvent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fdataStructure_2fmyoEvent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fdataStructure_2fmyoEvent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/dataStructure/vector8.pb.h"
#include "proto/dataStructure/vector3.pb.h"
#include "proto/dataStructure/quaternion.pb.h"
#include "proto/dataStructure/handGestureType.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fdataStructure_2fmyoEvent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fdataStructure_2fmyoEvent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdataStructure_2fmyoEvent_2eproto;
namespace ubii {
namespace dataStructure {
class MyoEvent;
class MyoEventDefaultTypeInternal;
extern MyoEventDefaultTypeInternal _MyoEvent_default_instance_;
}  // namespace dataStructure
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::dataStructure::MyoEvent* Arena::CreateMaybeMessage<::ubii::dataStructure::MyoEvent>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace dataStructure {

// ===================================================================

class MyoEvent :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.dataStructure.MyoEvent) */ {
 public:
  MyoEvent();
  virtual ~MyoEvent();

  MyoEvent(const MyoEvent& from);
  MyoEvent(MyoEvent&& from) noexcept
    : MyoEvent() {
    *this = ::std::move(from);
  }

  inline MyoEvent& operator=(const MyoEvent& from) {
    CopyFrom(from);
    return *this;
  }
  inline MyoEvent& operator=(MyoEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MyoEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MyoEvent* internal_default_instance() {
    return reinterpret_cast<const MyoEvent*>(
               &_MyoEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(MyoEvent& a, MyoEvent& b) {
    a.Swap(&b);
  }
  inline void Swap(MyoEvent* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MyoEvent* New() const final {
    return CreateMaybeMessage<MyoEvent>(nullptr);
  }

  MyoEvent* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MyoEvent>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MyoEvent& from);
  void MergeFrom(const MyoEvent& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MyoEvent* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.dataStructure.MyoEvent";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fdataStructure_2fmyoEvent_2eproto);
    return ::descriptor_table_proto_2fdataStructure_2fmyoEvent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEmgFieldNumber = 1,
    kOrientationFieldNumber = 2,
    kGyroscopeFieldNumber = 3,
    kAccelerometerFieldNumber = 4,
    kGestureFieldNumber = 5,
  };
  // .ubii.dataStructure.Vector8 emg = 1;
  bool has_emg() const;
  private:
  bool _internal_has_emg() const;
  public:
  void clear_emg();
  const ::ubii::dataStructure::Vector8& emg() const;
  ::ubii::dataStructure::Vector8* release_emg();
  ::ubii::dataStructure::Vector8* mutable_emg();
  void set_allocated_emg(::ubii::dataStructure::Vector8* emg);
  private:
  const ::ubii::dataStructure::Vector8& _internal_emg() const;
  ::ubii::dataStructure::Vector8* _internal_mutable_emg();
  public:

  // .ubii.dataStructure.Quaternion orientation = 2;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::ubii::dataStructure::Quaternion& orientation() const;
  ::ubii::dataStructure::Quaternion* release_orientation();
  ::ubii::dataStructure::Quaternion* mutable_orientation();
  void set_allocated_orientation(::ubii::dataStructure::Quaternion* orientation);
  private:
  const ::ubii::dataStructure::Quaternion& _internal_orientation() const;
  ::ubii::dataStructure::Quaternion* _internal_mutable_orientation();
  public:

  // .ubii.dataStructure.Vector3 gyroscope = 3;
  bool has_gyroscope() const;
  private:
  bool _internal_has_gyroscope() const;
  public:
  void clear_gyroscope();
  const ::ubii::dataStructure::Vector3& gyroscope() const;
  ::ubii::dataStructure::Vector3* release_gyroscope();
  ::ubii::dataStructure::Vector3* mutable_gyroscope();
  void set_allocated_gyroscope(::ubii::dataStructure::Vector3* gyroscope);
  private:
  const ::ubii::dataStructure::Vector3& _internal_gyroscope() const;
  ::ubii::dataStructure::Vector3* _internal_mutable_gyroscope();
  public:

  // .ubii.dataStructure.Vector3 accelerometer = 4;
  bool has_accelerometer() const;
  private:
  bool _internal_has_accelerometer() const;
  public:
  void clear_accelerometer();
  const ::ubii::dataStructure::Vector3& accelerometer() const;
  ::ubii::dataStructure::Vector3* release_accelerometer();
  ::ubii::dataStructure::Vector3* mutable_accelerometer();
  void set_allocated_accelerometer(::ubii::dataStructure::Vector3* accelerometer);
  private:
  const ::ubii::dataStructure::Vector3& _internal_accelerometer() const;
  ::ubii::dataStructure::Vector3* _internal_mutable_accelerometer();
  public:

  // .ubii.dataStructure.HandGestureType gesture = 5;
  void clear_gesture();
  ::ubii::dataStructure::HandGestureType gesture() const;
  void set_gesture(::ubii::dataStructure::HandGestureType value);
  private:
  ::ubii::dataStructure::HandGestureType _internal_gesture() const;
  void _internal_set_gesture(::ubii::dataStructure::HandGestureType value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.dataStructure.MyoEvent)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::ubii::dataStructure::Vector8* emg_;
  ::ubii::dataStructure::Quaternion* orientation_;
  ::ubii::dataStructure::Vector3* gyroscope_;
  ::ubii::dataStructure::Vector3* accelerometer_;
  int gesture_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fdataStructure_2fmyoEvent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// MyoEvent

// .ubii.dataStructure.Vector8 emg = 1;
inline bool MyoEvent::_internal_has_emg() const {
  return this != internal_default_instance() && emg_ != nullptr;
}
inline bool MyoEvent::has_emg() const {
  return _internal_has_emg();
}
inline const ::ubii::dataStructure::Vector8& MyoEvent::_internal_emg() const {
  const ::ubii::dataStructure::Vector8* p = emg_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ubii::dataStructure::Vector8*>(
      &::ubii::dataStructure::_Vector8_default_instance_);
}
inline const ::ubii::dataStructure::Vector8& MyoEvent::emg() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.emg)
  return _internal_emg();
}
inline ::ubii::dataStructure::Vector8* MyoEvent::release_emg() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.MyoEvent.emg)
  
  ::ubii::dataStructure::Vector8* temp = emg_;
  emg_ = nullptr;
  return temp;
}
inline ::ubii::dataStructure::Vector8* MyoEvent::_internal_mutable_emg() {
  
  if (emg_ == nullptr) {
    auto* p = CreateMaybeMessage<::ubii::dataStructure::Vector8>(GetArenaNoVirtual());
    emg_ = p;
  }
  return emg_;
}
inline ::ubii::dataStructure::Vector8* MyoEvent::mutable_emg() {
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.MyoEvent.emg)
  return _internal_mutable_emg();
}
inline void MyoEvent::set_allocated_emg(::ubii::dataStructure::Vector8* emg) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(emg_);
  }
  if (emg) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      emg = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, emg, submessage_arena);
    }
    
  } else {
    
  }
  emg_ = emg;
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.MyoEvent.emg)
}

// .ubii.dataStructure.Quaternion orientation = 2;
inline bool MyoEvent::_internal_has_orientation() const {
  return this != internal_default_instance() && orientation_ != nullptr;
}
inline bool MyoEvent::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::ubii::dataStructure::Quaternion& MyoEvent::_internal_orientation() const {
  const ::ubii::dataStructure::Quaternion* p = orientation_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ubii::dataStructure::Quaternion*>(
      &::ubii::dataStructure::_Quaternion_default_instance_);
}
inline const ::ubii::dataStructure::Quaternion& MyoEvent::orientation() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.orientation)
  return _internal_orientation();
}
inline ::ubii::dataStructure::Quaternion* MyoEvent::release_orientation() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.MyoEvent.orientation)
  
  ::ubii::dataStructure::Quaternion* temp = orientation_;
  orientation_ = nullptr;
  return temp;
}
inline ::ubii::dataStructure::Quaternion* MyoEvent::_internal_mutable_orientation() {
  
  if (orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::ubii::dataStructure::Quaternion>(GetArenaNoVirtual());
    orientation_ = p;
  }
  return orientation_;
}
inline ::ubii::dataStructure::Quaternion* MyoEvent::mutable_orientation() {
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.MyoEvent.orientation)
  return _internal_mutable_orientation();
}
inline void MyoEvent::set_allocated_orientation(::ubii::dataStructure::Quaternion* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    
  } else {
    
  }
  orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.MyoEvent.orientation)
}

// .ubii.dataStructure.Vector3 gyroscope = 3;
inline bool MyoEvent::_internal_has_gyroscope() const {
  return this != internal_default_instance() && gyroscope_ != nullptr;
}
inline bool MyoEvent::has_gyroscope() const {
  return _internal_has_gyroscope();
}
inline const ::ubii::dataStructure::Vector3& MyoEvent::_internal_gyroscope() const {
  const ::ubii::dataStructure::Vector3* p = gyroscope_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ubii::dataStructure::Vector3*>(
      &::ubii::dataStructure::_Vector3_default_instance_);
}
inline const ::ubii::dataStructure::Vector3& MyoEvent::gyroscope() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.gyroscope)
  return _internal_gyroscope();
}
inline ::ubii::dataStructure::Vector3* MyoEvent::release_gyroscope() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.MyoEvent.gyroscope)
  
  ::ubii::dataStructure::Vector3* temp = gyroscope_;
  gyroscope_ = nullptr;
  return temp;
}
inline ::ubii::dataStructure::Vector3* MyoEvent::_internal_mutable_gyroscope() {
  
  if (gyroscope_ == nullptr) {
    auto* p = CreateMaybeMessage<::ubii::dataStructure::Vector3>(GetArenaNoVirtual());
    gyroscope_ = p;
  }
  return gyroscope_;
}
inline ::ubii::dataStructure::Vector3* MyoEvent::mutable_gyroscope() {
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.MyoEvent.gyroscope)
  return _internal_mutable_gyroscope();
}
inline void MyoEvent::set_allocated_gyroscope(::ubii::dataStructure::Vector3* gyroscope) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(gyroscope_);
  }
  if (gyroscope) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      gyroscope = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gyroscope, submessage_arena);
    }
    
  } else {
    
  }
  gyroscope_ = gyroscope;
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.MyoEvent.gyroscope)
}

// .ubii.dataStructure.Vector3 accelerometer = 4;
inline bool MyoEvent::_internal_has_accelerometer() const {
  return this != internal_default_instance() && accelerometer_ != nullptr;
}
inline bool MyoEvent::has_accelerometer() const {
  return _internal_has_accelerometer();
}
inline const ::ubii::dataStructure::Vector3& MyoEvent::_internal_accelerometer() const {
  const ::ubii::dataStructure::Vector3* p = accelerometer_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ubii::dataStructure::Vector3*>(
      &::ubii::dataStructure::_Vector3_default_instance_);
}
inline const ::ubii::dataStructure::Vector3& MyoEvent::accelerometer() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.accelerometer)
  return _internal_accelerometer();
}
inline ::ubii::dataStructure::Vector3* MyoEvent::release_accelerometer() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.MyoEvent.accelerometer)
  
  ::ubii::dataStructure::Vector3* temp = accelerometer_;
  accelerometer_ = nullptr;
  return temp;
}
inline ::ubii::dataStructure::Vector3* MyoEvent::_internal_mutable_accelerometer() {
  
  if (accelerometer_ == nullptr) {
    auto* p = CreateMaybeMessage<::ubii::dataStructure::Vector3>(GetArenaNoVirtual());
    accelerometer_ = p;
  }
  return accelerometer_;
}
inline ::ubii::dataStructure::Vector3* MyoEvent::mutable_accelerometer() {
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.MyoEvent.accelerometer)
  return _internal_mutable_accelerometer();
}
inline void MyoEvent::set_allocated_accelerometer(::ubii::dataStructure::Vector3* accelerometer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(accelerometer_);
  }
  if (accelerometer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      accelerometer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, accelerometer, submessage_arena);
    }
    
  } else {
    
  }
  accelerometer_ = accelerometer;
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.MyoEvent.accelerometer)
}

// .ubii.dataStructure.HandGestureType gesture = 5;
inline void MyoEvent::clear_gesture() {
  gesture_ = 0;
}
inline ::ubii::dataStructure::HandGestureType MyoEvent::_internal_gesture() const {
  return static_cast< ::ubii::dataStructure::HandGestureType >(gesture_);
}
inline ::ubii::dataStructure::HandGestureType MyoEvent::gesture() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.gesture)
  return _internal_gesture();
}
inline void MyoEvent::_internal_set_gesture(::ubii::dataStructure::HandGestureType value) {
  
  gesture_ = value;
}
inline void MyoEvent::set_gesture(::ubii::dataStructure::HandGestureType value) {
  _internal_set_gesture(value);
  // @@protoc_insertion_point(field_set:ubii.dataStructure.MyoEvent.gesture)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fdataStructure_2fmyoEvent_2eproto
