// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/serviceReply.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2fserviceReply_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2fserviceReply_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/general/success.pb.h"
#include "proto/general/error.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/lists.pb.h"
#include "proto/clients/client.pb.h"
#include "proto/devices/device.pb.h"
#include "proto/devices/topicMux.pb.h"
#include "proto/devices/topicDemux.pb.h"
#include "proto/servers/server.pb.h"
#include "proto/sessions/session.pb.h"
#include "proto/interactions/interaction.pb.h"
#include "proto/services/service.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fservices_2fserviceReply_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fservices_2fserviceReply_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fservices_2fserviceReply_2eproto;
namespace ubii {
namespace services {
class ServiceReply;
class ServiceReplyDefaultTypeInternal;
extern ServiceReplyDefaultTypeInternal _ServiceReply_default_instance_;
}  // namespace services
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::services::ServiceReply* Arena::CreateMaybeMessage<::ubii::services::ServiceReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace services {

// ===================================================================

class ServiceReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.services.ServiceReply) */ {
 public:
  ServiceReply();
  virtual ~ServiceReply();

  ServiceReply(const ServiceReply& from);
  ServiceReply(ServiceReply&& from) noexcept
    : ServiceReply() {
    *this = ::std::move(from);
  }

  inline ServiceReply& operator=(const ServiceReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServiceReply& operator=(ServiceReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ServiceReply& default_instance();

  enum TypeCase {
    kSuccess = 1,
    kError = 2,
    kClient = 3,
    kDevice = 4,
    kServer = 5,
    kSession = 6,
    kSessionList = 7,
    kInteraction = 8,
    kInteractionList = 9,
    kStringList = 10,
    kTopicMux = 11,
    kTopicMuxList = 12,
    kTopicDemux = 13,
    kTopicDemuxList = 14,
    kClientList = 15,
    kDeviceList = 16,
    kService = 17,
    kServiceList = 18,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ServiceReply* internal_default_instance() {
    return reinterpret_cast<const ServiceReply*>(
               &_ServiceReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ServiceReply& a, ServiceReply& b) {
    a.Swap(&b);
  }
  inline void Swap(ServiceReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ServiceReply* New() const final {
    return CreateMaybeMessage<ServiceReply>(nullptr);
  }

  ServiceReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ServiceReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ServiceReply& from);
  void MergeFrom(const ServiceReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ServiceReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.services.ServiceReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fservices_2fserviceReply_2eproto);
    return ::descriptor_table_proto_2fservices_2fserviceReply_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSuccessFieldNumber = 1,
    kErrorFieldNumber = 2,
    kClientFieldNumber = 3,
    kDeviceFieldNumber = 4,
    kServerFieldNumber = 5,
    kSessionFieldNumber = 6,
    kSessionListFieldNumber = 7,
    kInteractionFieldNumber = 8,
    kInteractionListFieldNumber = 9,
    kStringListFieldNumber = 10,
    kTopicMuxFieldNumber = 11,
    kTopicMuxListFieldNumber = 12,
    kTopicDemuxFieldNumber = 13,
    kTopicDemuxListFieldNumber = 14,
    kClientListFieldNumber = 15,
    kDeviceListFieldNumber = 16,
    kServiceFieldNumber = 17,
    kServiceListFieldNumber = 18,
  };
  // .ubii.general.Success success = 1;
  bool has_success() const;
  private:
  bool _internal_has_success() const;
  public:
  void clear_success();
  const ::ubii::general::Success& success() const;
  ::ubii::general::Success* release_success();
  ::ubii::general::Success* mutable_success();
  void set_allocated_success(::ubii::general::Success* success);
  private:
  const ::ubii::general::Success& _internal_success() const;
  ::ubii::general::Success* _internal_mutable_success();
  public:

  // .ubii.general.Error error = 2;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::ubii::general::Error& error() const;
  ::ubii::general::Error* release_error();
  ::ubii::general::Error* mutable_error();
  void set_allocated_error(::ubii::general::Error* error);
  private:
  const ::ubii::general::Error& _internal_error() const;
  ::ubii::general::Error* _internal_mutable_error();
  public:

  // .ubii.clients.Client client = 3;
  bool has_client() const;
  private:
  bool _internal_has_client() const;
  public:
  void clear_client();
  const ::ubii::clients::Client& client() const;
  ::ubii::clients::Client* release_client();
  ::ubii::clients::Client* mutable_client();
  void set_allocated_client(::ubii::clients::Client* client);
  private:
  const ::ubii::clients::Client& _internal_client() const;
  ::ubii::clients::Client* _internal_mutable_client();
  public:

  // .ubii.devices.Device device = 4;
  bool has_device() const;
  private:
  bool _internal_has_device() const;
  public:
  void clear_device();
  const ::ubii::devices::Device& device() const;
  ::ubii::devices::Device* release_device();
  ::ubii::devices::Device* mutable_device();
  void set_allocated_device(::ubii::devices::Device* device);
  private:
  const ::ubii::devices::Device& _internal_device() const;
  ::ubii::devices::Device* _internal_mutable_device();
  public:

  // .ubii.servers.Server server = 5;
  bool has_server() const;
  private:
  bool _internal_has_server() const;
  public:
  void clear_server();
  const ::ubii::servers::Server& server() const;
  ::ubii::servers::Server* release_server();
  ::ubii::servers::Server* mutable_server();
  void set_allocated_server(::ubii::servers::Server* server);
  private:
  const ::ubii::servers::Server& _internal_server() const;
  ::ubii::servers::Server* _internal_mutable_server();
  public:

  // .ubii.sessions.Session session = 6;
  bool has_session() const;
  private:
  bool _internal_has_session() const;
  public:
  void clear_session();
  const ::ubii::sessions::Session& session() const;
  ::ubii::sessions::Session* release_session();
  ::ubii::sessions::Session* mutable_session();
  void set_allocated_session(::ubii::sessions::Session* session);
  private:
  const ::ubii::sessions::Session& _internal_session() const;
  ::ubii::sessions::Session* _internal_mutable_session();
  public:

  // .ubii.sessions.SessionList session_list = 7;
  bool has_session_list() const;
  private:
  bool _internal_has_session_list() const;
  public:
  void clear_session_list();
  const ::ubii::sessions::SessionList& session_list() const;
  ::ubii::sessions::SessionList* release_session_list();
  ::ubii::sessions::SessionList* mutable_session_list();
  void set_allocated_session_list(::ubii::sessions::SessionList* session_list);
  private:
  const ::ubii::sessions::SessionList& _internal_session_list() const;
  ::ubii::sessions::SessionList* _internal_mutable_session_list();
  public:

  // .ubii.interactions.Interaction interaction = 8;
  bool has_interaction() const;
  private:
  bool _internal_has_interaction() const;
  public:
  void clear_interaction();
  const ::ubii::interactions::Interaction& interaction() const;
  ::ubii::interactions::Interaction* release_interaction();
  ::ubii::interactions::Interaction* mutable_interaction();
  void set_allocated_interaction(::ubii::interactions::Interaction* interaction);
  private:
  const ::ubii::interactions::Interaction& _internal_interaction() const;
  ::ubii::interactions::Interaction* _internal_mutable_interaction();
  public:

  // .ubii.interactions.InteractionList interaction_list = 9;
  bool has_interaction_list() const;
  private:
  bool _internal_has_interaction_list() const;
  public:
  void clear_interaction_list();
  const ::ubii::interactions::InteractionList& interaction_list() const;
  ::ubii::interactions::InteractionList* release_interaction_list();
  ::ubii::interactions::InteractionList* mutable_interaction_list();
  void set_allocated_interaction_list(::ubii::interactions::InteractionList* interaction_list);
  private:
  const ::ubii::interactions::InteractionList& _internal_interaction_list() const;
  ::ubii::interactions::InteractionList* _internal_mutable_interaction_list();
  public:

  // .ubii.dataStructure.StringList string_list = 10;
  bool has_string_list() const;
  private:
  bool _internal_has_string_list() const;
  public:
  void clear_string_list();
  const ::ubii::dataStructure::StringList& string_list() const;
  ::ubii::dataStructure::StringList* release_string_list();
  ::ubii::dataStructure::StringList* mutable_string_list();
  void set_allocated_string_list(::ubii::dataStructure::StringList* string_list);
  private:
  const ::ubii::dataStructure::StringList& _internal_string_list() const;
  ::ubii::dataStructure::StringList* _internal_mutable_string_list();
  public:

  // .ubii.devices.TopicMux topic_mux = 11;
  bool has_topic_mux() const;
  private:
  bool _internal_has_topic_mux() const;
  public:
  void clear_topic_mux();
  const ::ubii::devices::TopicMux& topic_mux() const;
  ::ubii::devices::TopicMux* release_topic_mux();
  ::ubii::devices::TopicMux* mutable_topic_mux();
  void set_allocated_topic_mux(::ubii::devices::TopicMux* topic_mux);
  private:
  const ::ubii::devices::TopicMux& _internal_topic_mux() const;
  ::ubii::devices::TopicMux* _internal_mutable_topic_mux();
  public:

  // .ubii.devices.TopicMuxList topic_mux_list = 12;
  bool has_topic_mux_list() const;
  private:
  bool _internal_has_topic_mux_list() const;
  public:
  void clear_topic_mux_list();
  const ::ubii::devices::TopicMuxList& topic_mux_list() const;
  ::ubii::devices::TopicMuxList* release_topic_mux_list();
  ::ubii::devices::TopicMuxList* mutable_topic_mux_list();
  void set_allocated_topic_mux_list(::ubii::devices::TopicMuxList* topic_mux_list);
  private:
  const ::ubii::devices::TopicMuxList& _internal_topic_mux_list() const;
  ::ubii::devices::TopicMuxList* _internal_mutable_topic_mux_list();
  public:

  // .ubii.devices.TopicDemux topic_demux = 13;
  bool has_topic_demux() const;
  private:
  bool _internal_has_topic_demux() const;
  public:
  void clear_topic_demux();
  const ::ubii::devices::TopicDemux& topic_demux() const;
  ::ubii::devices::TopicDemux* release_topic_demux();
  ::ubii::devices::TopicDemux* mutable_topic_demux();
  void set_allocated_topic_demux(::ubii::devices::TopicDemux* topic_demux);
  private:
  const ::ubii::devices::TopicDemux& _internal_topic_demux() const;
  ::ubii::devices::TopicDemux* _internal_mutable_topic_demux();
  public:

  // .ubii.devices.TopicDemuxList topic_demux_list = 14;
  bool has_topic_demux_list() const;
  private:
  bool _internal_has_topic_demux_list() const;
  public:
  void clear_topic_demux_list();
  const ::ubii::devices::TopicDemuxList& topic_demux_list() const;
  ::ubii::devices::TopicDemuxList* release_topic_demux_list();
  ::ubii::devices::TopicDemuxList* mutable_topic_demux_list();
  void set_allocated_topic_demux_list(::ubii::devices::TopicDemuxList* topic_demux_list);
  private:
  const ::ubii::devices::TopicDemuxList& _internal_topic_demux_list() const;
  ::ubii::devices::TopicDemuxList* _internal_mutable_topic_demux_list();
  public:

  // .ubii.clients.ClientList client_list = 15;
  bool has_client_list() const;
  private:
  bool _internal_has_client_list() const;
  public:
  void clear_client_list();
  const ::ubii::clients::ClientList& client_list() const;
  ::ubii::clients::ClientList* release_client_list();
  ::ubii::clients::ClientList* mutable_client_list();
  void set_allocated_client_list(::ubii::clients::ClientList* client_list);
  private:
  const ::ubii::clients::ClientList& _internal_client_list() const;
  ::ubii::clients::ClientList* _internal_mutable_client_list();
  public:

  // .ubii.devices.DeviceList device_list = 16;
  bool has_device_list() const;
  private:
  bool _internal_has_device_list() const;
  public:
  void clear_device_list();
  const ::ubii::devices::DeviceList& device_list() const;
  ::ubii::devices::DeviceList* release_device_list();
  ::ubii::devices::DeviceList* mutable_device_list();
  void set_allocated_device_list(::ubii::devices::DeviceList* device_list);
  private:
  const ::ubii::devices::DeviceList& _internal_device_list() const;
  ::ubii::devices::DeviceList* _internal_mutable_device_list();
  public:

  // .ubii.services.Service service = 17;
  bool has_service() const;
  private:
  bool _internal_has_service() const;
  public:
  void clear_service();
  const ::ubii::services::Service& service() const;
  ::ubii::services::Service* release_service();
  ::ubii::services::Service* mutable_service();
  void set_allocated_service(::ubii::services::Service* service);
  private:
  const ::ubii::services::Service& _internal_service() const;
  ::ubii::services::Service* _internal_mutable_service();
  public:

  // .ubii.services.ServiceList service_list = 18;
  bool has_service_list() const;
  private:
  bool _internal_has_service_list() const;
  public:
  void clear_service_list();
  const ::ubii::services::ServiceList& service_list() const;
  ::ubii::services::ServiceList* release_service_list();
  ::ubii::services::ServiceList* mutable_service_list();
  void set_allocated_service_list(::ubii::services::ServiceList* service_list);
  private:
  const ::ubii::services::ServiceList& _internal_service_list() const;
  ::ubii::services::ServiceList* _internal_mutable_service_list();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ubii.services.ServiceReply)
 private:
  class _Internal;
  void set_has_success();
  void set_has_error();
  void set_has_client();
  void set_has_device();
  void set_has_server();
  void set_has_session();
  void set_has_session_list();
  void set_has_interaction();
  void set_has_interaction_list();
  void set_has_string_list();
  void set_has_topic_mux();
  void set_has_topic_mux_list();
  void set_has_topic_demux();
  void set_has_topic_demux_list();
  void set_has_client_list();
  void set_has_device_list();
  void set_has_service();
  void set_has_service_list();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::ubii::general::Success* success_;
    ::ubii::general::Error* error_;
    ::ubii::clients::Client* client_;
    ::ubii::devices::Device* device_;
    ::ubii::servers::Server* server_;
    ::ubii::sessions::Session* session_;
    ::ubii::sessions::SessionList* session_list_;
    ::ubii::interactions::Interaction* interaction_;
    ::ubii::interactions::InteractionList* interaction_list_;
    ::ubii::dataStructure::StringList* string_list_;
    ::ubii::devices::TopicMux* topic_mux_;
    ::ubii::devices::TopicMuxList* topic_mux_list_;
    ::ubii::devices::TopicDemux* topic_demux_;
    ::ubii::devices::TopicDemuxList* topic_demux_list_;
    ::ubii::clients::ClientList* client_list_;
    ::ubii::devices::DeviceList* device_list_;
    ::ubii::services::Service* service_;
    ::ubii::services::ServiceList* service_list_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fservices_2fserviceReply_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ServiceReply

// .ubii.general.Success success = 1;
inline bool ServiceReply::_internal_has_success() const {
  return type_case() == kSuccess;
}
inline bool ServiceReply::has_success() const {
  return _internal_has_success();
}
inline void ServiceReply::set_has_success() {
  _oneof_case_[0] = kSuccess;
}
inline ::ubii::general::Success* ServiceReply::release_success() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.success)
  if (has_success()) {
    clear_has_type();
      ::ubii::general::Success* temp = type_.success_;
    type_.success_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::general::Success& ServiceReply::_internal_success() const {
  return _internal_has_success()
      ? *type_.success_
      : *reinterpret_cast< ::ubii::general::Success*>(&::ubii::general::_Success_default_instance_);
}
inline const ::ubii::general::Success& ServiceReply::success() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.success)
  return _internal_success();
}
inline ::ubii::general::Success* ServiceReply::_internal_mutable_success() {
  if (!_internal_has_success()) {
    clear_type();
    set_has_success();
    type_.success_ = CreateMaybeMessage< ::ubii::general::Success >(
        GetArenaNoVirtual());
  }
  return type_.success_;
}
inline ::ubii::general::Success* ServiceReply::mutable_success() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.success)
  return _internal_mutable_success();
}

// .ubii.general.Error error = 2;
inline bool ServiceReply::_internal_has_error() const {
  return type_case() == kError;
}
inline bool ServiceReply::has_error() const {
  return _internal_has_error();
}
inline void ServiceReply::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::ubii::general::Error* ServiceReply::release_error() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.error)
  if (has_error()) {
    clear_has_type();
      ::ubii::general::Error* temp = type_.error_;
    type_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::general::Error& ServiceReply::_internal_error() const {
  return _internal_has_error()
      ? *type_.error_
      : *reinterpret_cast< ::ubii::general::Error*>(&::ubii::general::_Error_default_instance_);
}
inline const ::ubii::general::Error& ServiceReply::error() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.error)
  return _internal_error();
}
inline ::ubii::general::Error* ServiceReply::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_type();
    set_has_error();
    type_.error_ = CreateMaybeMessage< ::ubii::general::Error >(
        GetArenaNoVirtual());
  }
  return type_.error_;
}
inline ::ubii::general::Error* ServiceReply::mutable_error() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.error)
  return _internal_mutable_error();
}

// .ubii.clients.Client client = 3;
inline bool ServiceReply::_internal_has_client() const {
  return type_case() == kClient;
}
inline bool ServiceReply::has_client() const {
  return _internal_has_client();
}
inline void ServiceReply::set_has_client() {
  _oneof_case_[0] = kClient;
}
inline ::ubii::clients::Client* ServiceReply::release_client() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.client)
  if (has_client()) {
    clear_has_type();
      ::ubii::clients::Client* temp = type_.client_;
    type_.client_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::clients::Client& ServiceReply::_internal_client() const {
  return _internal_has_client()
      ? *type_.client_
      : *reinterpret_cast< ::ubii::clients::Client*>(&::ubii::clients::_Client_default_instance_);
}
inline const ::ubii::clients::Client& ServiceReply::client() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.client)
  return _internal_client();
}
inline ::ubii::clients::Client* ServiceReply::_internal_mutable_client() {
  if (!_internal_has_client()) {
    clear_type();
    set_has_client();
    type_.client_ = CreateMaybeMessage< ::ubii::clients::Client >(
        GetArenaNoVirtual());
  }
  return type_.client_;
}
inline ::ubii::clients::Client* ServiceReply::mutable_client() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.client)
  return _internal_mutable_client();
}

// .ubii.devices.Device device = 4;
inline bool ServiceReply::_internal_has_device() const {
  return type_case() == kDevice;
}
inline bool ServiceReply::has_device() const {
  return _internal_has_device();
}
inline void ServiceReply::set_has_device() {
  _oneof_case_[0] = kDevice;
}
inline ::ubii::devices::Device* ServiceReply::release_device() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.device)
  if (has_device()) {
    clear_has_type();
      ::ubii::devices::Device* temp = type_.device_;
    type_.device_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::devices::Device& ServiceReply::_internal_device() const {
  return _internal_has_device()
      ? *type_.device_
      : *reinterpret_cast< ::ubii::devices::Device*>(&::ubii::devices::_Device_default_instance_);
}
inline const ::ubii::devices::Device& ServiceReply::device() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.device)
  return _internal_device();
}
inline ::ubii::devices::Device* ServiceReply::_internal_mutable_device() {
  if (!_internal_has_device()) {
    clear_type();
    set_has_device();
    type_.device_ = CreateMaybeMessage< ::ubii::devices::Device >(
        GetArenaNoVirtual());
  }
  return type_.device_;
}
inline ::ubii::devices::Device* ServiceReply::mutable_device() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.device)
  return _internal_mutable_device();
}

// .ubii.servers.Server server = 5;
inline bool ServiceReply::_internal_has_server() const {
  return type_case() == kServer;
}
inline bool ServiceReply::has_server() const {
  return _internal_has_server();
}
inline void ServiceReply::set_has_server() {
  _oneof_case_[0] = kServer;
}
inline ::ubii::servers::Server* ServiceReply::release_server() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.server)
  if (has_server()) {
    clear_has_type();
      ::ubii::servers::Server* temp = type_.server_;
    type_.server_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::servers::Server& ServiceReply::_internal_server() const {
  return _internal_has_server()
      ? *type_.server_
      : *reinterpret_cast< ::ubii::servers::Server*>(&::ubii::servers::_Server_default_instance_);
}
inline const ::ubii::servers::Server& ServiceReply::server() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.server)
  return _internal_server();
}
inline ::ubii::servers::Server* ServiceReply::_internal_mutable_server() {
  if (!_internal_has_server()) {
    clear_type();
    set_has_server();
    type_.server_ = CreateMaybeMessage< ::ubii::servers::Server >(
        GetArenaNoVirtual());
  }
  return type_.server_;
}
inline ::ubii::servers::Server* ServiceReply::mutable_server() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.server)
  return _internal_mutable_server();
}

// .ubii.sessions.Session session = 6;
inline bool ServiceReply::_internal_has_session() const {
  return type_case() == kSession;
}
inline bool ServiceReply::has_session() const {
  return _internal_has_session();
}
inline void ServiceReply::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline ::ubii::sessions::Session* ServiceReply::release_session() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.session)
  if (has_session()) {
    clear_has_type();
      ::ubii::sessions::Session* temp = type_.session_;
    type_.session_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::sessions::Session& ServiceReply::_internal_session() const {
  return _internal_has_session()
      ? *type_.session_
      : *reinterpret_cast< ::ubii::sessions::Session*>(&::ubii::sessions::_Session_default_instance_);
}
inline const ::ubii::sessions::Session& ServiceReply::session() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.session)
  return _internal_session();
}
inline ::ubii::sessions::Session* ServiceReply::_internal_mutable_session() {
  if (!_internal_has_session()) {
    clear_type();
    set_has_session();
    type_.session_ = CreateMaybeMessage< ::ubii::sessions::Session >(
        GetArenaNoVirtual());
  }
  return type_.session_;
}
inline ::ubii::sessions::Session* ServiceReply::mutable_session() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.session)
  return _internal_mutable_session();
}

// .ubii.sessions.SessionList session_list = 7;
inline bool ServiceReply::_internal_has_session_list() const {
  return type_case() == kSessionList;
}
inline bool ServiceReply::has_session_list() const {
  return _internal_has_session_list();
}
inline void ServiceReply::set_has_session_list() {
  _oneof_case_[0] = kSessionList;
}
inline ::ubii::sessions::SessionList* ServiceReply::release_session_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.session_list)
  if (has_session_list()) {
    clear_has_type();
      ::ubii::sessions::SessionList* temp = type_.session_list_;
    type_.session_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::sessions::SessionList& ServiceReply::_internal_session_list() const {
  return _internal_has_session_list()
      ? *type_.session_list_
      : *reinterpret_cast< ::ubii::sessions::SessionList*>(&::ubii::sessions::_SessionList_default_instance_);
}
inline const ::ubii::sessions::SessionList& ServiceReply::session_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.session_list)
  return _internal_session_list();
}
inline ::ubii::sessions::SessionList* ServiceReply::_internal_mutable_session_list() {
  if (!_internal_has_session_list()) {
    clear_type();
    set_has_session_list();
    type_.session_list_ = CreateMaybeMessage< ::ubii::sessions::SessionList >(
        GetArenaNoVirtual());
  }
  return type_.session_list_;
}
inline ::ubii::sessions::SessionList* ServiceReply::mutable_session_list() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.session_list)
  return _internal_mutable_session_list();
}

// .ubii.interactions.Interaction interaction = 8;
inline bool ServiceReply::_internal_has_interaction() const {
  return type_case() == kInteraction;
}
inline bool ServiceReply::has_interaction() const {
  return _internal_has_interaction();
}
inline void ServiceReply::set_has_interaction() {
  _oneof_case_[0] = kInteraction;
}
inline ::ubii::interactions::Interaction* ServiceReply::release_interaction() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.interaction)
  if (has_interaction()) {
    clear_has_type();
      ::ubii::interactions::Interaction* temp = type_.interaction_;
    type_.interaction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::interactions::Interaction& ServiceReply::_internal_interaction() const {
  return _internal_has_interaction()
      ? *type_.interaction_
      : *reinterpret_cast< ::ubii::interactions::Interaction*>(&::ubii::interactions::_Interaction_default_instance_);
}
inline const ::ubii::interactions::Interaction& ServiceReply::interaction() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.interaction)
  return _internal_interaction();
}
inline ::ubii::interactions::Interaction* ServiceReply::_internal_mutable_interaction() {
  if (!_internal_has_interaction()) {
    clear_type();
    set_has_interaction();
    type_.interaction_ = CreateMaybeMessage< ::ubii::interactions::Interaction >(
        GetArenaNoVirtual());
  }
  return type_.interaction_;
}
inline ::ubii::interactions::Interaction* ServiceReply::mutable_interaction() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.interaction)
  return _internal_mutable_interaction();
}

// .ubii.interactions.InteractionList interaction_list = 9;
inline bool ServiceReply::_internal_has_interaction_list() const {
  return type_case() == kInteractionList;
}
inline bool ServiceReply::has_interaction_list() const {
  return _internal_has_interaction_list();
}
inline void ServiceReply::set_has_interaction_list() {
  _oneof_case_[0] = kInteractionList;
}
inline ::ubii::interactions::InteractionList* ServiceReply::release_interaction_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.interaction_list)
  if (has_interaction_list()) {
    clear_has_type();
      ::ubii::interactions::InteractionList* temp = type_.interaction_list_;
    type_.interaction_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::interactions::InteractionList& ServiceReply::_internal_interaction_list() const {
  return _internal_has_interaction_list()
      ? *type_.interaction_list_
      : *reinterpret_cast< ::ubii::interactions::InteractionList*>(&::ubii::interactions::_InteractionList_default_instance_);
}
inline const ::ubii::interactions::InteractionList& ServiceReply::interaction_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.interaction_list)
  return _internal_interaction_list();
}
inline ::ubii::interactions::InteractionList* ServiceReply::_internal_mutable_interaction_list() {
  if (!_internal_has_interaction_list()) {
    clear_type();
    set_has_interaction_list();
    type_.interaction_list_ = CreateMaybeMessage< ::ubii::interactions::InteractionList >(
        GetArenaNoVirtual());
  }
  return type_.interaction_list_;
}
inline ::ubii::interactions::InteractionList* ServiceReply::mutable_interaction_list() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.interaction_list)
  return _internal_mutable_interaction_list();
}

// .ubii.dataStructure.StringList string_list = 10;
inline bool ServiceReply::_internal_has_string_list() const {
  return type_case() == kStringList;
}
inline bool ServiceReply::has_string_list() const {
  return _internal_has_string_list();
}
inline void ServiceReply::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
inline ::ubii::dataStructure::StringList* ServiceReply::release_string_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.string_list)
  if (has_string_list()) {
    clear_has_type();
      ::ubii::dataStructure::StringList* temp = type_.string_list_;
    type_.string_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::dataStructure::StringList& ServiceReply::_internal_string_list() const {
  return _internal_has_string_list()
      ? *type_.string_list_
      : *reinterpret_cast< ::ubii::dataStructure::StringList*>(&::ubii::dataStructure::_StringList_default_instance_);
}
inline const ::ubii::dataStructure::StringList& ServiceReply::string_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.string_list)
  return _internal_string_list();
}
inline ::ubii::dataStructure::StringList* ServiceReply::_internal_mutable_string_list() {
  if (!_internal_has_string_list()) {
    clear_type();
    set_has_string_list();
    type_.string_list_ = CreateMaybeMessage< ::ubii::dataStructure::StringList >(
        GetArenaNoVirtual());
  }
  return type_.string_list_;
}
inline ::ubii::dataStructure::StringList* ServiceReply::mutable_string_list() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.string_list)
  return _internal_mutable_string_list();
}

// .ubii.devices.TopicMux topic_mux = 11;
inline bool ServiceReply::_internal_has_topic_mux() const {
  return type_case() == kTopicMux;
}
inline bool ServiceReply::has_topic_mux() const {
  return _internal_has_topic_mux();
}
inline void ServiceReply::set_has_topic_mux() {
  _oneof_case_[0] = kTopicMux;
}
inline ::ubii::devices::TopicMux* ServiceReply::release_topic_mux() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.topic_mux)
  if (has_topic_mux()) {
    clear_has_type();
      ::ubii::devices::TopicMux* temp = type_.topic_mux_;
    type_.topic_mux_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::devices::TopicMux& ServiceReply::_internal_topic_mux() const {
  return _internal_has_topic_mux()
      ? *type_.topic_mux_
      : *reinterpret_cast< ::ubii::devices::TopicMux*>(&::ubii::devices::_TopicMux_default_instance_);
}
inline const ::ubii::devices::TopicMux& ServiceReply::topic_mux() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.topic_mux)
  return _internal_topic_mux();
}
inline ::ubii::devices::TopicMux* ServiceReply::_internal_mutable_topic_mux() {
  if (!_internal_has_topic_mux()) {
    clear_type();
    set_has_topic_mux();
    type_.topic_mux_ = CreateMaybeMessage< ::ubii::devices::TopicMux >(
        GetArenaNoVirtual());
  }
  return type_.topic_mux_;
}
inline ::ubii::devices::TopicMux* ServiceReply::mutable_topic_mux() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.topic_mux)
  return _internal_mutable_topic_mux();
}

// .ubii.devices.TopicMuxList topic_mux_list = 12;
inline bool ServiceReply::_internal_has_topic_mux_list() const {
  return type_case() == kTopicMuxList;
}
inline bool ServiceReply::has_topic_mux_list() const {
  return _internal_has_topic_mux_list();
}
inline void ServiceReply::set_has_topic_mux_list() {
  _oneof_case_[0] = kTopicMuxList;
}
inline ::ubii::devices::TopicMuxList* ServiceReply::release_topic_mux_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.topic_mux_list)
  if (has_topic_mux_list()) {
    clear_has_type();
      ::ubii::devices::TopicMuxList* temp = type_.topic_mux_list_;
    type_.topic_mux_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::devices::TopicMuxList& ServiceReply::_internal_topic_mux_list() const {
  return _internal_has_topic_mux_list()
      ? *type_.topic_mux_list_
      : *reinterpret_cast< ::ubii::devices::TopicMuxList*>(&::ubii::devices::_TopicMuxList_default_instance_);
}
inline const ::ubii::devices::TopicMuxList& ServiceReply::topic_mux_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.topic_mux_list)
  return _internal_topic_mux_list();
}
inline ::ubii::devices::TopicMuxList* ServiceReply::_internal_mutable_topic_mux_list() {
  if (!_internal_has_topic_mux_list()) {
    clear_type();
    set_has_topic_mux_list();
    type_.topic_mux_list_ = CreateMaybeMessage< ::ubii::devices::TopicMuxList >(
        GetArenaNoVirtual());
  }
  return type_.topic_mux_list_;
}
inline ::ubii::devices::TopicMuxList* ServiceReply::mutable_topic_mux_list() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.topic_mux_list)
  return _internal_mutable_topic_mux_list();
}

// .ubii.devices.TopicDemux topic_demux = 13;
inline bool ServiceReply::_internal_has_topic_demux() const {
  return type_case() == kTopicDemux;
}
inline bool ServiceReply::has_topic_demux() const {
  return _internal_has_topic_demux();
}
inline void ServiceReply::set_has_topic_demux() {
  _oneof_case_[0] = kTopicDemux;
}
inline ::ubii::devices::TopicDemux* ServiceReply::release_topic_demux() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.topic_demux)
  if (has_topic_demux()) {
    clear_has_type();
      ::ubii::devices::TopicDemux* temp = type_.topic_demux_;
    type_.topic_demux_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::devices::TopicDemux& ServiceReply::_internal_topic_demux() const {
  return _internal_has_topic_demux()
      ? *type_.topic_demux_
      : *reinterpret_cast< ::ubii::devices::TopicDemux*>(&::ubii::devices::_TopicDemux_default_instance_);
}
inline const ::ubii::devices::TopicDemux& ServiceReply::topic_demux() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.topic_demux)
  return _internal_topic_demux();
}
inline ::ubii::devices::TopicDemux* ServiceReply::_internal_mutable_topic_demux() {
  if (!_internal_has_topic_demux()) {
    clear_type();
    set_has_topic_demux();
    type_.topic_demux_ = CreateMaybeMessage< ::ubii::devices::TopicDemux >(
        GetArenaNoVirtual());
  }
  return type_.topic_demux_;
}
inline ::ubii::devices::TopicDemux* ServiceReply::mutable_topic_demux() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.topic_demux)
  return _internal_mutable_topic_demux();
}

// .ubii.devices.TopicDemuxList topic_demux_list = 14;
inline bool ServiceReply::_internal_has_topic_demux_list() const {
  return type_case() == kTopicDemuxList;
}
inline bool ServiceReply::has_topic_demux_list() const {
  return _internal_has_topic_demux_list();
}
inline void ServiceReply::set_has_topic_demux_list() {
  _oneof_case_[0] = kTopicDemuxList;
}
inline ::ubii::devices::TopicDemuxList* ServiceReply::release_topic_demux_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.topic_demux_list)
  if (has_topic_demux_list()) {
    clear_has_type();
      ::ubii::devices::TopicDemuxList* temp = type_.topic_demux_list_;
    type_.topic_demux_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::devices::TopicDemuxList& ServiceReply::_internal_topic_demux_list() const {
  return _internal_has_topic_demux_list()
      ? *type_.topic_demux_list_
      : *reinterpret_cast< ::ubii::devices::TopicDemuxList*>(&::ubii::devices::_TopicDemuxList_default_instance_);
}
inline const ::ubii::devices::TopicDemuxList& ServiceReply::topic_demux_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.topic_demux_list)
  return _internal_topic_demux_list();
}
inline ::ubii::devices::TopicDemuxList* ServiceReply::_internal_mutable_topic_demux_list() {
  if (!_internal_has_topic_demux_list()) {
    clear_type();
    set_has_topic_demux_list();
    type_.topic_demux_list_ = CreateMaybeMessage< ::ubii::devices::TopicDemuxList >(
        GetArenaNoVirtual());
  }
  return type_.topic_demux_list_;
}
inline ::ubii::devices::TopicDemuxList* ServiceReply::mutable_topic_demux_list() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.topic_demux_list)
  return _internal_mutable_topic_demux_list();
}

// .ubii.clients.ClientList client_list = 15;
inline bool ServiceReply::_internal_has_client_list() const {
  return type_case() == kClientList;
}
inline bool ServiceReply::has_client_list() const {
  return _internal_has_client_list();
}
inline void ServiceReply::set_has_client_list() {
  _oneof_case_[0] = kClientList;
}
inline ::ubii::clients::ClientList* ServiceReply::release_client_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.client_list)
  if (has_client_list()) {
    clear_has_type();
      ::ubii::clients::ClientList* temp = type_.client_list_;
    type_.client_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::clients::ClientList& ServiceReply::_internal_client_list() const {
  return _internal_has_client_list()
      ? *type_.client_list_
      : *reinterpret_cast< ::ubii::clients::ClientList*>(&::ubii::clients::_ClientList_default_instance_);
}
inline const ::ubii::clients::ClientList& ServiceReply::client_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.client_list)
  return _internal_client_list();
}
inline ::ubii::clients::ClientList* ServiceReply::_internal_mutable_client_list() {
  if (!_internal_has_client_list()) {
    clear_type();
    set_has_client_list();
    type_.client_list_ = CreateMaybeMessage< ::ubii::clients::ClientList >(
        GetArenaNoVirtual());
  }
  return type_.client_list_;
}
inline ::ubii::clients::ClientList* ServiceReply::mutable_client_list() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.client_list)
  return _internal_mutable_client_list();
}

// .ubii.devices.DeviceList device_list = 16;
inline bool ServiceReply::_internal_has_device_list() const {
  return type_case() == kDeviceList;
}
inline bool ServiceReply::has_device_list() const {
  return _internal_has_device_list();
}
inline void ServiceReply::set_has_device_list() {
  _oneof_case_[0] = kDeviceList;
}
inline ::ubii::devices::DeviceList* ServiceReply::release_device_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.device_list)
  if (has_device_list()) {
    clear_has_type();
      ::ubii::devices::DeviceList* temp = type_.device_list_;
    type_.device_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::devices::DeviceList& ServiceReply::_internal_device_list() const {
  return _internal_has_device_list()
      ? *type_.device_list_
      : *reinterpret_cast< ::ubii::devices::DeviceList*>(&::ubii::devices::_DeviceList_default_instance_);
}
inline const ::ubii::devices::DeviceList& ServiceReply::device_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.device_list)
  return _internal_device_list();
}
inline ::ubii::devices::DeviceList* ServiceReply::_internal_mutable_device_list() {
  if (!_internal_has_device_list()) {
    clear_type();
    set_has_device_list();
    type_.device_list_ = CreateMaybeMessage< ::ubii::devices::DeviceList >(
        GetArenaNoVirtual());
  }
  return type_.device_list_;
}
inline ::ubii::devices::DeviceList* ServiceReply::mutable_device_list() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.device_list)
  return _internal_mutable_device_list();
}

// .ubii.services.Service service = 17;
inline bool ServiceReply::_internal_has_service() const {
  return type_case() == kService;
}
inline bool ServiceReply::has_service() const {
  return _internal_has_service();
}
inline void ServiceReply::set_has_service() {
  _oneof_case_[0] = kService;
}
inline ::ubii::services::Service* ServiceReply::release_service() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.service)
  if (has_service()) {
    clear_has_type();
      ::ubii::services::Service* temp = type_.service_;
    type_.service_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::services::Service& ServiceReply::_internal_service() const {
  return _internal_has_service()
      ? *type_.service_
      : *reinterpret_cast< ::ubii::services::Service*>(&::ubii::services::_Service_default_instance_);
}
inline const ::ubii::services::Service& ServiceReply::service() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.service)
  return _internal_service();
}
inline ::ubii::services::Service* ServiceReply::_internal_mutable_service() {
  if (!_internal_has_service()) {
    clear_type();
    set_has_service();
    type_.service_ = CreateMaybeMessage< ::ubii::services::Service >(
        GetArenaNoVirtual());
  }
  return type_.service_;
}
inline ::ubii::services::Service* ServiceReply::mutable_service() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.service)
  return _internal_mutable_service();
}

// .ubii.services.ServiceList service_list = 18;
inline bool ServiceReply::_internal_has_service_list() const {
  return type_case() == kServiceList;
}
inline bool ServiceReply::has_service_list() const {
  return _internal_has_service_list();
}
inline void ServiceReply::set_has_service_list() {
  _oneof_case_[0] = kServiceList;
}
inline ::ubii::services::ServiceList* ServiceReply::release_service_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.service_list)
  if (has_service_list()) {
    clear_has_type();
      ::ubii::services::ServiceList* temp = type_.service_list_;
    type_.service_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::services::ServiceList& ServiceReply::_internal_service_list() const {
  return _internal_has_service_list()
      ? *type_.service_list_
      : *reinterpret_cast< ::ubii::services::ServiceList*>(&::ubii::services::_ServiceList_default_instance_);
}
inline const ::ubii::services::ServiceList& ServiceReply::service_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.service_list)
  return _internal_service_list();
}
inline ::ubii::services::ServiceList* ServiceReply::_internal_mutable_service_list() {
  if (!_internal_has_service_list()) {
    clear_type();
    set_has_service_list();
    type_.service_list_ = CreateMaybeMessage< ::ubii::services::ServiceList >(
        GetArenaNoVirtual());
  }
  return type_.service_list_;
}
inline ::ubii::services::ServiceList* ServiceReply::mutable_service_list() {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.service_list)
  return _internal_mutable_service_list();
}

inline bool ServiceReply::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void ServiceReply::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline ServiceReply::TypeCase ServiceReply::type_case() const {
  return ServiceReply::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2fserviceReply_2eproto
