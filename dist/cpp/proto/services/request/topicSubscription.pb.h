// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/request/topicSubscription.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2frequest_2ftopicSubscription_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2frequest_2ftopicSubscription_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fservices_2frequest_2ftopicSubscription_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fservices_2frequest_2ftopicSubscription_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto;
namespace ubii {
namespace services {
namespace request {
class TopicSubscription;
class TopicSubscriptionDefaultTypeInternal;
extern TopicSubscriptionDefaultTypeInternal _TopicSubscription_default_instance_;
}  // namespace request
}  // namespace services
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::services::request::TopicSubscription* Arena::CreateMaybeMessage<::ubii::services::request::TopicSubscription>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace services {
namespace request {

// ===================================================================

class TopicSubscription :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.services.request.TopicSubscription) */ {
 public:
  TopicSubscription();
  virtual ~TopicSubscription();

  TopicSubscription(const TopicSubscription& from);
  TopicSubscription(TopicSubscription&& from) noexcept
    : TopicSubscription() {
    *this = ::std::move(from);
  }

  inline TopicSubscription& operator=(const TopicSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicSubscription& operator=(TopicSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicSubscription* internal_default_instance() {
    return reinterpret_cast<const TopicSubscription*>(
               &_TopicSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TopicSubscription& a, TopicSubscription& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicSubscription* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicSubscription* New() const final {
    return CreateMaybeMessage<TopicSubscription>(nullptr);
  }

  TopicSubscription* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicSubscription>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicSubscription& from);
  void MergeFrom(const TopicSubscription& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicSubscription* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.services.request.TopicSubscription";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto);
    return ::descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSubscribeTopicsFieldNumber = 2,
    kUnsubscribeTopicsFieldNumber = 3,
    kClientIdFieldNumber = 1,
    kSubscribeTopicRegexpFieldNumber = 4,
  };
  // repeated string subscribe_topics = 2;
  int subscribe_topics_size() const;
  private:
  int _internal_subscribe_topics_size() const;
  public:
  void clear_subscribe_topics();
  const std::string& subscribe_topics(int index) const;
  std::string* mutable_subscribe_topics(int index);
  void set_subscribe_topics(int index, const std::string& value);
  void set_subscribe_topics(int index, std::string&& value);
  void set_subscribe_topics(int index, const char* value);
  void set_subscribe_topics(int index, const char* value, size_t size);
  std::string* add_subscribe_topics();
  void add_subscribe_topics(const std::string& value);
  void add_subscribe_topics(std::string&& value);
  void add_subscribe_topics(const char* value);
  void add_subscribe_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& subscribe_topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_subscribe_topics();
  private:
  const std::string& _internal_subscribe_topics(int index) const;
  std::string* _internal_add_subscribe_topics();
  public:

  // repeated string unsubscribe_topics = 3;
  int unsubscribe_topics_size() const;
  private:
  int _internal_unsubscribe_topics_size() const;
  public:
  void clear_unsubscribe_topics();
  const std::string& unsubscribe_topics(int index) const;
  std::string* mutable_unsubscribe_topics(int index);
  void set_unsubscribe_topics(int index, const std::string& value);
  void set_unsubscribe_topics(int index, std::string&& value);
  void set_unsubscribe_topics(int index, const char* value);
  void set_unsubscribe_topics(int index, const char* value, size_t size);
  std::string* add_unsubscribe_topics();
  void add_unsubscribe_topics(const std::string& value);
  void add_unsubscribe_topics(std::string&& value);
  void add_unsubscribe_topics(const char* value);
  void add_unsubscribe_topics(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& unsubscribe_topics() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_unsubscribe_topics();
  private:
  const std::string& _internal_unsubscribe_topics(int index) const;
  std::string* _internal_add_unsubscribe_topics();
  public:

  // string client_id = 1;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string subscribe_topic_regexp = 4;
  void clear_subscribe_topic_regexp();
  const std::string& subscribe_topic_regexp() const;
  void set_subscribe_topic_regexp(const std::string& value);
  void set_subscribe_topic_regexp(std::string&& value);
  void set_subscribe_topic_regexp(const char* value);
  void set_subscribe_topic_regexp(const char* value, size_t size);
  std::string* mutable_subscribe_topic_regexp();
  std::string* release_subscribe_topic_regexp();
  void set_allocated_subscribe_topic_regexp(std::string* subscribe_topic_regexp);
  private:
  const std::string& _internal_subscribe_topic_regexp() const;
  void _internal_set_subscribe_topic_regexp(const std::string& value);
  std::string* _internal_mutable_subscribe_topic_regexp();
  public:

  // @@protoc_insertion_point(class_scope:ubii.services.request.TopicSubscription)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> subscribe_topics_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> unsubscribe_topics_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr subscribe_topic_regexp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fservices_2frequest_2ftopicSubscription_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicSubscription

// string client_id = 1;
inline void TopicSubscription::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TopicSubscription::client_id() const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.client_id)
  return _internal_client_id();
}
inline void TopicSubscription::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.client_id)
}
inline std::string* TopicSubscription::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& TopicSubscription::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void TopicSubscription::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TopicSubscription::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.services.request.TopicSubscription.client_id)
}
inline void TopicSubscription::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.client_id)
}
inline void TopicSubscription::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.client_id)
}
inline std::string* TopicSubscription::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TopicSubscription::release_client_id() {
  // @@protoc_insertion_point(field_release:ubii.services.request.TopicSubscription.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TopicSubscription::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.request.TopicSubscription.client_id)
}

// repeated string subscribe_topics = 2;
inline int TopicSubscription::_internal_subscribe_topics_size() const {
  return subscribe_topics_.size();
}
inline int TopicSubscription::subscribe_topics_size() const {
  return _internal_subscribe_topics_size();
}
inline void TopicSubscription::clear_subscribe_topics() {
  subscribe_topics_.Clear();
}
inline std::string* TopicSubscription::add_subscribe_topics() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.subscribe_topics)
  return _internal_add_subscribe_topics();
}
inline const std::string& TopicSubscription::_internal_subscribe_topics(int index) const {
  return subscribe_topics_.Get(index);
}
inline const std::string& TopicSubscription::subscribe_topics(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.subscribe_topics)
  return _internal_subscribe_topics(index);
}
inline std::string* TopicSubscription::mutable_subscribe_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_.Mutable(index);
}
inline void TopicSubscription::set_subscribe_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topics)
  subscribe_topics_.Mutable(index)->assign(value);
}
inline void TopicSubscription::set_subscribe_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topics)
  subscribe_topics_.Mutable(index)->assign(std::move(value));
}
inline void TopicSubscription::set_subscribe_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subscribe_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline void TopicSubscription::set_subscribe_topics(int index, const char* value, size_t size) {
  subscribe_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline std::string* TopicSubscription::_internal_add_subscribe_topics() {
  return subscribe_topics_.Add();
}
inline void TopicSubscription::add_subscribe_topics(const std::string& value) {
  subscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline void TopicSubscription::add_subscribe_topics(std::string&& value) {
  subscribe_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline void TopicSubscription::add_subscribe_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  subscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline void TopicSubscription::add_subscribe_topics(const char* value, size_t size) {
  subscribe_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TopicSubscription::subscribe_topics() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TopicSubscription::mutable_subscribe_topics() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.subscribe_topics)
  return &subscribe_topics_;
}

// repeated string unsubscribe_topics = 3;
inline int TopicSubscription::_internal_unsubscribe_topics_size() const {
  return unsubscribe_topics_.size();
}
inline int TopicSubscription::unsubscribe_topics_size() const {
  return _internal_unsubscribe_topics_size();
}
inline void TopicSubscription::clear_unsubscribe_topics() {
  unsubscribe_topics_.Clear();
}
inline std::string* TopicSubscription::add_unsubscribe_topics() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return _internal_add_unsubscribe_topics();
}
inline const std::string& TopicSubscription::_internal_unsubscribe_topics(int index) const {
  return unsubscribe_topics_.Get(index);
}
inline const std::string& TopicSubscription::unsubscribe_topics(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return _internal_unsubscribe_topics(index);
}
inline std::string* TopicSubscription::mutable_unsubscribe_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_.Mutable(index);
}
inline void TopicSubscription::set_unsubscribe_topics(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.unsubscribe_topics)
  unsubscribe_topics_.Mutable(index)->assign(value);
}
inline void TopicSubscription::set_unsubscribe_topics(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.unsubscribe_topics)
  unsubscribe_topics_.Mutable(index)->assign(std::move(value));
}
inline void TopicSubscription::set_unsubscribe_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unsubscribe_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline void TopicSubscription::set_unsubscribe_topics(int index, const char* value, size_t size) {
  unsubscribe_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline std::string* TopicSubscription::_internal_add_unsubscribe_topics() {
  return unsubscribe_topics_.Add();
}
inline void TopicSubscription::add_unsubscribe_topics(const std::string& value) {
  unsubscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline void TopicSubscription::add_unsubscribe_topics(std::string&& value) {
  unsubscribe_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline void TopicSubscription::add_unsubscribe_topics(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  unsubscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline void TopicSubscription::add_unsubscribe_topics(const char* value, size_t size) {
  unsubscribe_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
TopicSubscription::unsubscribe_topics() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
TopicSubscription::mutable_unsubscribe_topics() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return &unsubscribe_topics_;
}

// string subscribe_topic_regexp = 4;
inline void TopicSubscription::clear_subscribe_topic_regexp() {
  subscribe_topic_regexp_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& TopicSubscription::subscribe_topic_regexp() const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return _internal_subscribe_topic_regexp();
}
inline void TopicSubscription::set_subscribe_topic_regexp(const std::string& value) {
  _internal_set_subscribe_topic_regexp(value);
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
inline std::string* TopicSubscription::mutable_subscribe_topic_regexp() {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return _internal_mutable_subscribe_topic_regexp();
}
inline const std::string& TopicSubscription::_internal_subscribe_topic_regexp() const {
  return subscribe_topic_regexp_.GetNoArena();
}
inline void TopicSubscription::_internal_set_subscribe_topic_regexp(const std::string& value) {
  
  subscribe_topic_regexp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TopicSubscription::set_subscribe_topic_regexp(std::string&& value) {
  
  subscribe_topic_regexp_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
inline void TopicSubscription::set_subscribe_topic_regexp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  subscribe_topic_regexp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
inline void TopicSubscription::set_subscribe_topic_regexp(const char* value, size_t size) {
  
  subscribe_topic_regexp_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
inline std::string* TopicSubscription::_internal_mutable_subscribe_topic_regexp() {
  
  return subscribe_topic_regexp_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TopicSubscription::release_subscribe_topic_regexp() {
  // @@protoc_insertion_point(field_release:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  
  return subscribe_topic_regexp_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void TopicSubscription::set_allocated_subscribe_topic_regexp(std::string* subscribe_topic_regexp) {
  if (subscribe_topic_regexp != nullptr) {
    
  } else {
    
  }
  subscribe_topic_regexp_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), subscribe_topic_regexp);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace services
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fservices_2frequest_2ftopicSubscription_2eproto
