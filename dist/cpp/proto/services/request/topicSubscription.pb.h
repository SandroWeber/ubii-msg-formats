// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/request/topicSubscription.proto

#ifndef PROTOBUF_INCLUDED_proto_2fservices_2frequest_2ftopicSubscription_2eproto
#define PROTOBUF_INCLUDED_proto_2fservices_2frequest_2ftopicSubscription_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fservices_2frequest_2ftopicSubscription_2eproto 

namespace protobuf_proto_2fservices_2frequest_2ftopicSubscription_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fservices_2frequest_2ftopicSubscription_2eproto
namespace ubii {
namespace services {
namespace request {
class TopicSubscription;
class TopicSubscriptionDefaultTypeInternal;
extern TopicSubscriptionDefaultTypeInternal _TopicSubscription_default_instance_;
}  // namespace request
}  // namespace services
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::services::request::TopicSubscription* Arena::CreateMaybeMessage<::ubii::services::request::TopicSubscription>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace services {
namespace request {

// ===================================================================

class TopicSubscription : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.services.request.TopicSubscription) */ {
 public:
  TopicSubscription();
  virtual ~TopicSubscription();

  TopicSubscription(const TopicSubscription& from);

  inline TopicSubscription& operator=(const TopicSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicSubscription(TopicSubscription&& from) noexcept
    : TopicSubscription() {
    *this = ::std::move(from);
  }

  inline TopicSubscription& operator=(TopicSubscription&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicSubscription& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicSubscription* internal_default_instance() {
    return reinterpret_cast<const TopicSubscription*>(
               &_TopicSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TopicSubscription* other);
  friend void swap(TopicSubscription& a, TopicSubscription& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicSubscription* New() const final {
    return CreateMaybeMessage<TopicSubscription>(NULL);
  }

  TopicSubscription* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicSubscription>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicSubscription& from);
  void MergeFrom(const TopicSubscription& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicSubscription* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string subscribe_topics = 2;
  int subscribe_topics_size() const;
  void clear_subscribe_topics();
  static const int kSubscribeTopicsFieldNumber = 2;
  const ::std::string& subscribe_topics(int index) const;
  ::std::string* mutable_subscribe_topics(int index);
  void set_subscribe_topics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subscribe_topics(int index, ::std::string&& value);
  #endif
  void set_subscribe_topics(int index, const char* value);
  void set_subscribe_topics(int index, const char* value, size_t size);
  ::std::string* add_subscribe_topics();
  void add_subscribe_topics(const ::std::string& value);
  #if LANG_CXX11
  void add_subscribe_topics(::std::string&& value);
  #endif
  void add_subscribe_topics(const char* value);
  void add_subscribe_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subscribe_topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subscribe_topics();

  // repeated string unsubscribe_topics = 3;
  int unsubscribe_topics_size() const;
  void clear_unsubscribe_topics();
  static const int kUnsubscribeTopicsFieldNumber = 3;
  const ::std::string& unsubscribe_topics(int index) const;
  ::std::string* mutable_unsubscribe_topics(int index);
  void set_unsubscribe_topics(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_unsubscribe_topics(int index, ::std::string&& value);
  #endif
  void set_unsubscribe_topics(int index, const char* value);
  void set_unsubscribe_topics(int index, const char* value, size_t size);
  ::std::string* add_unsubscribe_topics();
  void add_unsubscribe_topics(const ::std::string& value);
  #if LANG_CXX11
  void add_unsubscribe_topics(::std::string&& value);
  #endif
  void add_unsubscribe_topics(const char* value);
  void add_unsubscribe_topics(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& unsubscribe_topics() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unsubscribe_topics();

  // repeated string subscribe_topic_regexp = 4;
  int subscribe_topic_regexp_size() const;
  void clear_subscribe_topic_regexp();
  static const int kSubscribeTopicRegexpFieldNumber = 4;
  const ::std::string& subscribe_topic_regexp(int index) const;
  ::std::string* mutable_subscribe_topic_regexp(int index);
  void set_subscribe_topic_regexp(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_subscribe_topic_regexp(int index, ::std::string&& value);
  #endif
  void set_subscribe_topic_regexp(int index, const char* value);
  void set_subscribe_topic_regexp(int index, const char* value, size_t size);
  ::std::string* add_subscribe_topic_regexp();
  void add_subscribe_topic_regexp(const ::std::string& value);
  #if LANG_CXX11
  void add_subscribe_topic_regexp(::std::string&& value);
  #endif
  void add_subscribe_topic_regexp(const char* value);
  void add_subscribe_topic_regexp(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& subscribe_topic_regexp() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_subscribe_topic_regexp();

  // repeated string unsubscribe_topic_regexp = 5;
  int unsubscribe_topic_regexp_size() const;
  void clear_unsubscribe_topic_regexp();
  static const int kUnsubscribeTopicRegexpFieldNumber = 5;
  const ::std::string& unsubscribe_topic_regexp(int index) const;
  ::std::string* mutable_unsubscribe_topic_regexp(int index);
  void set_unsubscribe_topic_regexp(int index, const ::std::string& value);
  #if LANG_CXX11
  void set_unsubscribe_topic_regexp(int index, ::std::string&& value);
  #endif
  void set_unsubscribe_topic_regexp(int index, const char* value);
  void set_unsubscribe_topic_regexp(int index, const char* value, size_t size);
  ::std::string* add_unsubscribe_topic_regexp();
  void add_unsubscribe_topic_regexp(const ::std::string& value);
  #if LANG_CXX11
  void add_unsubscribe_topic_regexp(::std::string&& value);
  #endif
  void add_unsubscribe_topic_regexp(const char* value);
  void add_unsubscribe_topic_regexp(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& unsubscribe_topic_regexp() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_unsubscribe_topic_regexp();

  // string client_id = 1;
  void clear_client_id();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& client_id() const;
  void set_client_id(const ::std::string& value);
  #if LANG_CXX11
  void set_client_id(::std::string&& value);
  #endif
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  ::std::string* mutable_client_id();
  ::std::string* release_client_id();
  void set_allocated_client_id(::std::string* client_id);

  // @@protoc_insertion_point(class_scope:ubii.services.request.TopicSubscription)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subscribe_topics_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unsubscribe_topics_;
  ::google::protobuf::RepeatedPtrField< ::std::string> subscribe_topic_regexp_;
  ::google::protobuf::RepeatedPtrField< ::std::string> unsubscribe_topic_regexp_;
  ::google::protobuf::internal::ArenaStringPtr client_id_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fservices_2frequest_2ftopicSubscription_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicSubscription

// string client_id = 1;
inline void TopicSubscription::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicSubscription::client_id() const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.client_id)
  return client_id_.GetNoArena();
}
inline void TopicSubscription::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.client_id)
}
#if LANG_CXX11
inline void TopicSubscription::set_client_id(::std::string&& value) {
  
  client_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.services.request.TopicSubscription.client_id)
}
#endif
inline void TopicSubscription::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.client_id)
}
inline void TopicSubscription::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.client_id)
}
inline ::std::string* TopicSubscription::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicSubscription::release_client_id() {
  // @@protoc_insertion_point(field_release:ubii.services.request.TopicSubscription.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicSubscription::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.request.TopicSubscription.client_id)
}

// repeated string subscribe_topics = 2;
inline int TopicSubscription::subscribe_topics_size() const {
  return subscribe_topics_.size();
}
inline void TopicSubscription::clear_subscribe_topics() {
  subscribe_topics_.Clear();
}
inline const ::std::string& TopicSubscription::subscribe_topics(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_.Get(index);
}
inline ::std::string* TopicSubscription::mutable_subscribe_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_.Mutable(index);
}
inline void TopicSubscription::set_subscribe_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topics)
  subscribe_topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TopicSubscription::set_subscribe_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topics)
  subscribe_topics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TopicSubscription::set_subscribe_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subscribe_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline void TopicSubscription::set_subscribe_topics(int index, const char* value, size_t size) {
  subscribe_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline ::std::string* TopicSubscription::add_subscribe_topics() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_.Add();
}
inline void TopicSubscription::add_subscribe_topics(const ::std::string& value) {
  subscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.subscribe_topics)
}
#if LANG_CXX11
inline void TopicSubscription::add_subscribe_topics(::std::string&& value) {
  subscribe_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.subscribe_topics)
}
#endif
inline void TopicSubscription::add_subscribe_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline void TopicSubscription::add_subscribe_topics(const char* value, size_t size) {
  subscribe_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.subscribe_topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSubscription::subscribe_topics() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSubscription::mutable_subscribe_topics() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.subscribe_topics)
  return &subscribe_topics_;
}

// repeated string unsubscribe_topics = 3;
inline int TopicSubscription::unsubscribe_topics_size() const {
  return unsubscribe_topics_.size();
}
inline void TopicSubscription::clear_unsubscribe_topics() {
  unsubscribe_topics_.Clear();
}
inline const ::std::string& TopicSubscription::unsubscribe_topics(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_.Get(index);
}
inline ::std::string* TopicSubscription::mutable_unsubscribe_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_.Mutable(index);
}
inline void TopicSubscription::set_unsubscribe_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.unsubscribe_topics)
  unsubscribe_topics_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TopicSubscription::set_unsubscribe_topics(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.unsubscribe_topics)
  unsubscribe_topics_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TopicSubscription::set_unsubscribe_topics(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  unsubscribe_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline void TopicSubscription::set_unsubscribe_topics(int index, const char* value, size_t size) {
  unsubscribe_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline ::std::string* TopicSubscription::add_unsubscribe_topics() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_.Add();
}
inline void TopicSubscription::add_unsubscribe_topics(const ::std::string& value) {
  unsubscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
#if LANG_CXX11
inline void TopicSubscription::add_unsubscribe_topics(::std::string&& value) {
  unsubscribe_topics_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
#endif
inline void TopicSubscription::add_unsubscribe_topics(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  unsubscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline void TopicSubscription::add_unsubscribe_topics(const char* value, size_t size) {
  unsubscribe_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSubscription::unsubscribe_topics() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSubscription::mutable_unsubscribe_topics() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return &unsubscribe_topics_;
}

// repeated string subscribe_topic_regexp = 4;
inline int TopicSubscription::subscribe_topic_regexp_size() const {
  return subscribe_topic_regexp_.size();
}
inline void TopicSubscription::clear_subscribe_topic_regexp() {
  subscribe_topic_regexp_.Clear();
}
inline const ::std::string& TopicSubscription::subscribe_topic_regexp(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return subscribe_topic_regexp_.Get(index);
}
inline ::std::string* TopicSubscription::mutable_subscribe_topic_regexp(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return subscribe_topic_regexp_.Mutable(index);
}
inline void TopicSubscription::set_subscribe_topic_regexp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  subscribe_topic_regexp_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TopicSubscription::set_subscribe_topic_regexp(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  subscribe_topic_regexp_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TopicSubscription::set_subscribe_topic_regexp(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subscribe_topic_regexp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
inline void TopicSubscription::set_subscribe_topic_regexp(int index, const char* value, size_t size) {
  subscribe_topic_regexp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
inline ::std::string* TopicSubscription::add_subscribe_topic_regexp() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return subscribe_topic_regexp_.Add();
}
inline void TopicSubscription::add_subscribe_topic_regexp(const ::std::string& value) {
  subscribe_topic_regexp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
#if LANG_CXX11
inline void TopicSubscription::add_subscribe_topic_regexp(::std::string&& value) {
  subscribe_topic_regexp_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
#endif
inline void TopicSubscription::add_subscribe_topic_regexp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  subscribe_topic_regexp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
inline void TopicSubscription::add_subscribe_topic_regexp(const char* value, size_t size) {
  subscribe_topic_regexp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSubscription::subscribe_topic_regexp() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return subscribe_topic_regexp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSubscription::mutable_subscribe_topic_regexp() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return &subscribe_topic_regexp_;
}

// repeated string unsubscribe_topic_regexp = 5;
inline int TopicSubscription::unsubscribe_topic_regexp_size() const {
  return unsubscribe_topic_regexp_.size();
}
inline void TopicSubscription::clear_unsubscribe_topic_regexp() {
  unsubscribe_topic_regexp_.Clear();
}
inline const ::std::string& TopicSubscription::unsubscribe_topic_regexp(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return unsubscribe_topic_regexp_.Get(index);
}
inline ::std::string* TopicSubscription::mutable_unsubscribe_topic_regexp(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return unsubscribe_topic_regexp_.Mutable(index);
}
inline void TopicSubscription::set_unsubscribe_topic_regexp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  unsubscribe_topic_regexp_.Mutable(index)->assign(value);
}
#if LANG_CXX11
inline void TopicSubscription::set_unsubscribe_topic_regexp(int index, ::std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  unsubscribe_topic_regexp_.Mutable(index)->assign(std::move(value));
}
#endif
inline void TopicSubscription::set_unsubscribe_topic_regexp(int index, const char* value) {
  GOOGLE_DCHECK(value != NULL);
  unsubscribe_topic_regexp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
inline void TopicSubscription::set_unsubscribe_topic_regexp(int index, const char* value, size_t size) {
  unsubscribe_topic_regexp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
inline ::std::string* TopicSubscription::add_unsubscribe_topic_regexp() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return unsubscribe_topic_regexp_.Add();
}
inline void TopicSubscription::add_unsubscribe_topic_regexp(const ::std::string& value) {
  unsubscribe_topic_regexp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
#if LANG_CXX11
inline void TopicSubscription::add_unsubscribe_topic_regexp(::std::string&& value) {
  unsubscribe_topic_regexp_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
#endif
inline void TopicSubscription::add_unsubscribe_topic_regexp(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  unsubscribe_topic_regexp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
inline void TopicSubscription::add_unsubscribe_topic_regexp(const char* value, size_t size) {
  unsubscribe_topic_regexp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSubscription::unsubscribe_topic_regexp() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return unsubscribe_topic_regexp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSubscription::mutable_unsubscribe_topic_regexp() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return &unsubscribe_topic_regexp_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace services
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fservices_2frequest_2ftopicSubscription_2eproto
