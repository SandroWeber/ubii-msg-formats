// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/request/topicSubscription.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/services/request/topicSubscription.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace services {
namespace request {

namespace {

const ::google::protobuf::Descriptor* TopicSubscription_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicSubscription_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto() {
  protobuf_AddDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/services/request/topicSubscription.proto");
  GOOGLE_CHECK(file != NULL);
  TopicSubscription_descriptor_ = file->message_type(0);
  static const int TopicSubscription_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscription, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscription, subscribe_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscription, unsubscribe_topics_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscription, subscribe_topic_regexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscription, unsubscribe_topic_regexp_),
  };
  TopicSubscription_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicSubscription_descriptor_,
      TopicSubscription::default_instance_,
      TopicSubscription_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopicSubscription),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscription, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicSubscription, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicSubscription_descriptor_, &TopicSubscription::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fservices_2frequest_2ftopicSubscription_2eproto() {
  delete TopicSubscription::default_instance_;
  delete TopicSubscription_reflection_;
}

void protobuf_AddDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n.proto/services/request/topicSubscripti"
    "on.proto\022\025ubii.services.request\"\236\001\n\021Topi"
    "cSubscription\022\021\n\tclient_id\030\001 \001(\t\022\030\n\020subs"
    "cribe_topics\030\002 \003(\t\022\032\n\022unsubscribe_topics"
    "\030\003 \003(\t\022\036\n\026subscribe_topic_regexp\030\004 \003(\t\022 "
    "\n\030unsubscribe_topic_regexp\030\005 \003(\tb\006proto3", 240);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/services/request/topicSubscription.proto", &protobuf_RegisterTypes);
  TopicSubscription::default_instance_ = new TopicSubscription();
  TopicSubscription::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fservices_2frequest_2ftopicSubscription_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fservices_2frequest_2ftopicSubscription_2eproto {
  StaticDescriptorInitializer_proto_2fservices_2frequest_2ftopicSubscription_2eproto() {
    protobuf_AddDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto();
  }
} static_descriptor_initializer_proto_2fservices_2frequest_2ftopicSubscription_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicSubscription::kClientIdFieldNumber;
const int TopicSubscription::kSubscribeTopicsFieldNumber;
const int TopicSubscription::kUnsubscribeTopicsFieldNumber;
const int TopicSubscription::kSubscribeTopicRegexpFieldNumber;
const int TopicSubscription::kUnsubscribeTopicRegexpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicSubscription::TopicSubscription()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.services.request.TopicSubscription)
}

void TopicSubscription::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TopicSubscription::TopicSubscription(const TopicSubscription& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.services.request.TopicSubscription)
}

void TopicSubscription::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopicSubscription::~TopicSubscription() {
  // @@protoc_insertion_point(destructor:ubii.services.request.TopicSubscription)
  SharedDtor();
}

void TopicSubscription::SharedDtor() {
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TopicSubscription::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicSubscription::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicSubscription_descriptor_;
}

const TopicSubscription& TopicSubscription::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto();
  return *default_instance_;
}

TopicSubscription* TopicSubscription::default_instance_ = NULL;

TopicSubscription* TopicSubscription::New(::google::protobuf::Arena* arena) const {
  TopicSubscription* n = new TopicSubscription;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.services.request.TopicSubscription)
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  subscribe_topics_.Clear();
  unsubscribe_topics_.Clear();
  subscribe_topic_regexp_.Clear();
  unsubscribe_topic_regexp_.Clear();
}

bool TopicSubscription::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.services.request.TopicSubscription)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string client_id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.request.TopicSubscription.client_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subscribe_topics;
        break;
      }

      // repeated string subscribe_topics = 2;
      case 2: {
        if (tag == 18) {
         parse_subscribe_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subscribe_topics()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscribe_topics(this->subscribe_topics_size() - 1).data(),
            this->subscribe_topics(this->subscribe_topics_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.request.TopicSubscription.subscribe_topics"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_subscribe_topics;
        if (input->ExpectTag(26)) goto parse_unsubscribe_topics;
        break;
      }

      // repeated string unsubscribe_topics = 3;
      case 3: {
        if (tag == 26) {
         parse_unsubscribe_topics:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unsubscribe_topics()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unsubscribe_topics(this->unsubscribe_topics_size() - 1).data(),
            this->unsubscribe_topics(this->unsubscribe_topics_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.request.TopicSubscription.unsubscribe_topics"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_unsubscribe_topics;
        if (input->ExpectTag(34)) goto parse_subscribe_topic_regexp;
        break;
      }

      // repeated string subscribe_topic_regexp = 4;
      case 4: {
        if (tag == 34) {
         parse_subscribe_topic_regexp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_subscribe_topic_regexp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->subscribe_topic_regexp(this->subscribe_topic_regexp_size() - 1).data(),
            this->subscribe_topic_regexp(this->subscribe_topic_regexp_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.request.TopicSubscription.subscribe_topic_regexp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_subscribe_topic_regexp;
        if (input->ExpectTag(42)) goto parse_unsubscribe_topic_regexp;
        break;
      }

      // repeated string unsubscribe_topic_regexp = 5;
      case 5: {
        if (tag == 42) {
         parse_unsubscribe_topic_regexp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_unsubscribe_topic_regexp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->unsubscribe_topic_regexp(this->unsubscribe_topic_regexp_size() - 1).data(),
            this->unsubscribe_topic_regexp(this->unsubscribe_topic_regexp_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.request.TopicSubscription.unsubscribe_topic_regexp"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_unsubscribe_topic_regexp;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.services.request.TopicSubscription)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.services.request.TopicSubscription)
  return false;
#undef DO_
}

void TopicSubscription::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.services.request.TopicSubscription)
  // optional string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->client_id(), output);
  }

  // repeated string subscribe_topics = 2;
  for (int i = 0; i < this->subscribe_topics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscribe_topics(i).data(), this->subscribe_topics(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.subscribe_topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->subscribe_topics(i), output);
  }

  // repeated string unsubscribe_topics = 3;
  for (int i = 0; i < this->unsubscribe_topics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unsubscribe_topics(i).data(), this->unsubscribe_topics(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.unsubscribe_topics");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->unsubscribe_topics(i), output);
  }

  // repeated string subscribe_topic_regexp = 4;
  for (int i = 0; i < this->subscribe_topic_regexp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscribe_topic_regexp(i).data(), this->subscribe_topic_regexp(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.subscribe_topic_regexp");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->subscribe_topic_regexp(i), output);
  }

  // repeated string unsubscribe_topic_regexp = 5;
  for (int i = 0; i < this->unsubscribe_topic_regexp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unsubscribe_topic_regexp(i).data(), this->unsubscribe_topic_regexp(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.unsubscribe_topic_regexp");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->unsubscribe_topic_regexp(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.services.request.TopicSubscription)
}

::google::protobuf::uint8* TopicSubscription::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.services.request.TopicSubscription)
  // optional string client_id = 1;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->client_id(), target);
  }

  // repeated string subscribe_topics = 2;
  for (int i = 0; i < this->subscribe_topics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscribe_topics(i).data(), this->subscribe_topics(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.subscribe_topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->subscribe_topics(i), target);
  }

  // repeated string unsubscribe_topics = 3;
  for (int i = 0; i < this->unsubscribe_topics_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unsubscribe_topics(i).data(), this->unsubscribe_topics(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.unsubscribe_topics");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->unsubscribe_topics(i), target);
  }

  // repeated string subscribe_topic_regexp = 4;
  for (int i = 0; i < this->subscribe_topic_regexp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->subscribe_topic_regexp(i).data(), this->subscribe_topic_regexp(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.subscribe_topic_regexp");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->subscribe_topic_regexp(i), target);
  }

  // repeated string unsubscribe_topic_regexp = 5;
  for (int i = 0; i < this->unsubscribe_topic_regexp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->unsubscribe_topic_regexp(i).data(), this->unsubscribe_topic_regexp(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.unsubscribe_topic_regexp");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->unsubscribe_topic_regexp(i), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.services.request.TopicSubscription)
  return target;
}

int TopicSubscription::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.services.request.TopicSubscription)
  int total_size = 0;

  // optional string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // repeated string subscribe_topics = 2;
  total_size += 1 * this->subscribe_topics_size();
  for (int i = 0; i < this->subscribe_topics_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subscribe_topics(i));
  }

  // repeated string unsubscribe_topics = 3;
  total_size += 1 * this->unsubscribe_topics_size();
  for (int i = 0; i < this->unsubscribe_topics_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unsubscribe_topics(i));
  }

  // repeated string subscribe_topic_regexp = 4;
  total_size += 1 * this->subscribe_topic_regexp_size();
  for (int i = 0; i < this->subscribe_topic_regexp_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->subscribe_topic_regexp(i));
  }

  // repeated string unsubscribe_topic_regexp = 5;
  total_size += 1 * this->unsubscribe_topic_regexp_size();
  for (int i = 0; i < this->unsubscribe_topic_regexp_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->unsubscribe_topic_regexp(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicSubscription::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.services.request.TopicSubscription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicSubscription* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicSubscription>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.services.request.TopicSubscription)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.services.request.TopicSubscription)
    MergeFrom(*source);
  }
}

void TopicSubscription::MergeFrom(const TopicSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.services.request.TopicSubscription)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  subscribe_topics_.MergeFrom(from.subscribe_topics_);
  unsubscribe_topics_.MergeFrom(from.unsubscribe_topics_);
  subscribe_topic_regexp_.MergeFrom(from.subscribe_topic_regexp_);
  unsubscribe_topic_regexp_.MergeFrom(from.unsubscribe_topic_regexp_);
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
}

void TopicSubscription::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.services.request.TopicSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicSubscription::CopyFrom(const TopicSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.services.request.TopicSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicSubscription::IsInitialized() const {

  return true;
}

void TopicSubscription::Swap(TopicSubscription* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicSubscription::InternalSwap(TopicSubscription* other) {
  client_id_.Swap(&other->client_id_);
  subscribe_topics_.UnsafeArenaSwap(&other->subscribe_topics_);
  unsubscribe_topics_.UnsafeArenaSwap(&other->unsubscribe_topics_);
  subscribe_topic_regexp_.UnsafeArenaSwap(&other->subscribe_topic_regexp_);
  unsubscribe_topic_regexp_.UnsafeArenaSwap(&other->unsubscribe_topic_regexp_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicSubscription::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicSubscription_descriptor_;
  metadata.reflection = TopicSubscription_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicSubscription

// optional string client_id = 1;
void TopicSubscription::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TopicSubscription::client_id() const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.client_id)
  return client_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicSubscription::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.client_id)
}
 void TopicSubscription::set_client_id(const char* value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.client_id)
}
 void TopicSubscription::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.client_id)
}
 ::std::string* TopicSubscription::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicSubscription::release_client_id() {
  // @@protoc_insertion_point(field_release:ubii.services.request.TopicSubscription.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicSubscription::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.request.TopicSubscription.client_id)
}

// repeated string subscribe_topics = 2;
int TopicSubscription::subscribe_topics_size() const {
  return subscribe_topics_.size();
}
void TopicSubscription::clear_subscribe_topics() {
  subscribe_topics_.Clear();
}
 const ::std::string& TopicSubscription::subscribe_topics(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_.Get(index);
}
 ::std::string* TopicSubscription::mutable_subscribe_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_.Mutable(index);
}
 void TopicSubscription::set_subscribe_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topics)
  subscribe_topics_.Mutable(index)->assign(value);
}
 void TopicSubscription::set_subscribe_topics(int index, const char* value) {
  subscribe_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.subscribe_topics)
}
 void TopicSubscription::set_subscribe_topics(int index, const char* value, size_t size) {
  subscribe_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.subscribe_topics)
}
 ::std::string* TopicSubscription::add_subscribe_topics() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_.Add();
}
 void TopicSubscription::add_subscribe_topics(const ::std::string& value) {
  subscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.subscribe_topics)
}
 void TopicSubscription::add_subscribe_topics(const char* value) {
  subscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.subscribe_topics)
}
 void TopicSubscription::add_subscribe_topics(const char* value, size_t size) {
  subscribe_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.subscribe_topics)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSubscription::subscribe_topics() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.subscribe_topics)
  return subscribe_topics_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSubscription::mutable_subscribe_topics() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.subscribe_topics)
  return &subscribe_topics_;
}

// repeated string unsubscribe_topics = 3;
int TopicSubscription::unsubscribe_topics_size() const {
  return unsubscribe_topics_.size();
}
void TopicSubscription::clear_unsubscribe_topics() {
  unsubscribe_topics_.Clear();
}
 const ::std::string& TopicSubscription::unsubscribe_topics(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_.Get(index);
}
 ::std::string* TopicSubscription::mutable_unsubscribe_topics(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_.Mutable(index);
}
 void TopicSubscription::set_unsubscribe_topics(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.unsubscribe_topics)
  unsubscribe_topics_.Mutable(index)->assign(value);
}
 void TopicSubscription::set_unsubscribe_topics(int index, const char* value) {
  unsubscribe_topics_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
 void TopicSubscription::set_unsubscribe_topics(int index, const char* value, size_t size) {
  unsubscribe_topics_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
 ::std::string* TopicSubscription::add_unsubscribe_topics() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_.Add();
}
 void TopicSubscription::add_unsubscribe_topics(const ::std::string& value) {
  unsubscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
 void TopicSubscription::add_unsubscribe_topics(const char* value) {
  unsubscribe_topics_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
 void TopicSubscription::add_unsubscribe_topics(const char* value, size_t size) {
  unsubscribe_topics_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.unsubscribe_topics)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSubscription::unsubscribe_topics() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return unsubscribe_topics_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSubscription::mutable_unsubscribe_topics() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.unsubscribe_topics)
  return &unsubscribe_topics_;
}

// repeated string subscribe_topic_regexp = 4;
int TopicSubscription::subscribe_topic_regexp_size() const {
  return subscribe_topic_regexp_.size();
}
void TopicSubscription::clear_subscribe_topic_regexp() {
  subscribe_topic_regexp_.Clear();
}
 const ::std::string& TopicSubscription::subscribe_topic_regexp(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return subscribe_topic_regexp_.Get(index);
}
 ::std::string* TopicSubscription::mutable_subscribe_topic_regexp(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return subscribe_topic_regexp_.Mutable(index);
}
 void TopicSubscription::set_subscribe_topic_regexp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  subscribe_topic_regexp_.Mutable(index)->assign(value);
}
 void TopicSubscription::set_subscribe_topic_regexp(int index, const char* value) {
  subscribe_topic_regexp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
 void TopicSubscription::set_subscribe_topic_regexp(int index, const char* value, size_t size) {
  subscribe_topic_regexp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
 ::std::string* TopicSubscription::add_subscribe_topic_regexp() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return subscribe_topic_regexp_.Add();
}
 void TopicSubscription::add_subscribe_topic_regexp(const ::std::string& value) {
  subscribe_topic_regexp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
 void TopicSubscription::add_subscribe_topic_regexp(const char* value) {
  subscribe_topic_regexp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
 void TopicSubscription::add_subscribe_topic_regexp(const char* value, size_t size) {
  subscribe_topic_regexp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSubscription::subscribe_topic_regexp() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return subscribe_topic_regexp_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSubscription::mutable_subscribe_topic_regexp() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.subscribe_topic_regexp)
  return &subscribe_topic_regexp_;
}

// repeated string unsubscribe_topic_regexp = 5;
int TopicSubscription::unsubscribe_topic_regexp_size() const {
  return unsubscribe_topic_regexp_.size();
}
void TopicSubscription::clear_unsubscribe_topic_regexp() {
  unsubscribe_topic_regexp_.Clear();
}
 const ::std::string& TopicSubscription::unsubscribe_topic_regexp(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return unsubscribe_topic_regexp_.Get(index);
}
 ::std::string* TopicSubscription::mutable_unsubscribe_topic_regexp(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return unsubscribe_topic_regexp_.Mutable(index);
}
 void TopicSubscription::set_unsubscribe_topic_regexp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  unsubscribe_topic_regexp_.Mutable(index)->assign(value);
}
 void TopicSubscription::set_unsubscribe_topic_regexp(int index, const char* value) {
  unsubscribe_topic_regexp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
 void TopicSubscription::set_unsubscribe_topic_regexp(int index, const char* value, size_t size) {
  unsubscribe_topic_regexp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
 ::std::string* TopicSubscription::add_unsubscribe_topic_regexp() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return unsubscribe_topic_regexp_.Add();
}
 void TopicSubscription::add_unsubscribe_topic_regexp(const ::std::string& value) {
  unsubscribe_topic_regexp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
 void TopicSubscription::add_unsubscribe_topic_regexp(const char* value) {
  unsubscribe_topic_regexp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
 void TopicSubscription::add_unsubscribe_topic_regexp(const char* value, size_t size) {
  unsubscribe_topic_regexp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
TopicSubscription::unsubscribe_topic_regexp() const {
  // @@protoc_insertion_point(field_list:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return unsubscribe_topic_regexp_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
TopicSubscription::mutable_unsubscribe_topic_regexp() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.request.TopicSubscription.unsubscribe_topic_regexp)
  return &unsubscribe_topic_regexp_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace request
}  // namespace services
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
