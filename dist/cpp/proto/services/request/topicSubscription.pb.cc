// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/request/topicSubscription.proto

#include "proto/services/request/topicSubscription.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2fcomponent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Component_proto_2fdevices_2fcomponent_2eproto;
namespace ubii {
namespace services {
namespace request {
class TopicSubscriptionDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicSubscription> _instance;
} _TopicSubscription_default_instance_;
}  // namespace request
}  // namespace services
}  // namespace ubii
static void InitDefaultsscc_info_TopicSubscription_proto_2fservices_2frequest_2ftopicSubscription_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::services::request::_TopicSubscription_default_instance_;
    new (ptr) ::ubii::services::request::TopicSubscription();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::services::request::TopicSubscription::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicSubscription_proto_2fservices_2frequest_2ftopicSubscription_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicSubscription_proto_2fservices_2frequest_2ftopicSubscription_2eproto}, {
      &scc_info_Component_proto_2fdevices_2fcomponent_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fservices_2frequest_2ftopicSubscription_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fservices_2frequest_2ftopicSubscription_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fservices_2frequest_2ftopicSubscription_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fservices_2frequest_2ftopicSubscription_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::services::request::TopicSubscription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::services::request::TopicSubscription, client_id_),
  PROTOBUF_FIELD_OFFSET(::ubii::services::request::TopicSubscription, subscribe_topics_),
  PROTOBUF_FIELD_OFFSET(::ubii::services::request::TopicSubscription, unsubscribe_topics_),
  PROTOBUF_FIELD_OFFSET(::ubii::services::request::TopicSubscription, subscribe_topic_regexp_),
  PROTOBUF_FIELD_OFFSET(::ubii::services::request::TopicSubscription, unsubscribe_topic_regexp_),
  PROTOBUF_FIELD_OFFSET(::ubii::services::request::TopicSubscription, subscribe_components_),
  PROTOBUF_FIELD_OFFSET(::ubii::services::request::TopicSubscription, unsubscribe_components_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ubii::services::request::TopicSubscription)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::services::request::_TopicSubscription_default_instance_),
};

const char descriptor_table_protodef_proto_2fservices_2frequest_2ftopicSubscription_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n.proto/services/request/topicSubscripti"
  "on.proto\022\025ubii.services.request\032\035proto/d"
  "evices/component.proto\"\216\002\n\021TopicSubscrip"
  "tion\022\021\n\tclient_id\030\001 \001(\t\022\030\n\020subscribe_top"
  "ics\030\002 \003(\t\022\032\n\022unsubscribe_topics\030\003 \003(\t\022\036\n"
  "\026subscribe_topic_regexp\030\004 \003(\t\022 \n\030unsubsc"
  "ribe_topic_regexp\030\005 \003(\t\0225\n\024subscribe_com"
  "ponents\030\006 \003(\0132\027.ubii.devices.Component\0227"
  "\n\026unsubscribe_components\030\007 \003(\0132\027.ubii.de"
  "vices.Componentb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto_deps[1] = {
  &::descriptor_table_proto_2fdevices_2fcomponent_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto_sccs[1] = {
  &scc_info_TopicSubscription_proto_2fservices_2frequest_2ftopicSubscription_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto_once;
static bool descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto = {
  &descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto_initialized, descriptor_table_protodef_proto_2fservices_2frequest_2ftopicSubscription_2eproto, "proto/services/request/topicSubscription.proto", 383,
  &descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto_once, descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto_sccs, descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto_deps, 1, 1,
  schemas, file_default_instances, TableStruct_proto_2fservices_2frequest_2ftopicSubscription_2eproto::offsets,
  file_level_metadata_proto_2fservices_2frequest_2ftopicSubscription_2eproto, 1, file_level_enum_descriptors_proto_2fservices_2frequest_2ftopicSubscription_2eproto, file_level_service_descriptors_proto_2fservices_2frequest_2ftopicSubscription_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fservices_2frequest_2ftopicSubscription_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fservices_2frequest_2ftopicSubscription_2eproto), true);
namespace ubii {
namespace services {
namespace request {

// ===================================================================

void TopicSubscription::InitAsDefaultInstance() {
}
class TopicSubscription::_Internal {
 public:
};

void TopicSubscription::clear_subscribe_components() {
  subscribe_components_.Clear();
}
void TopicSubscription::clear_unsubscribe_components() {
  unsubscribe_components_.Clear();
}
TopicSubscription::TopicSubscription()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.services.request.TopicSubscription)
}
TopicSubscription::TopicSubscription(const TopicSubscription& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      subscribe_topics_(from.subscribe_topics_),
      unsubscribe_topics_(from.unsubscribe_topics_),
      subscribe_topic_regexp_(from.subscribe_topic_regexp_),
      unsubscribe_topic_regexp_(from.unsubscribe_topic_regexp_),
      subscribe_components_(from.subscribe_components_),
      unsubscribe_components_(from.unsubscribe_components_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_client_id().empty()) {
    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  // @@protoc_insertion_point(copy_constructor:ubii.services.request.TopicSubscription)
}

void TopicSubscription::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicSubscription_proto_2fservices_2frequest_2ftopicSubscription_2eproto.base);
  client_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

TopicSubscription::~TopicSubscription() {
  // @@protoc_insertion_point(destructor:ubii.services.request.TopicSubscription)
  SharedDtor();
}

void TopicSubscription::SharedDtor() {
  client_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TopicSubscription::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicSubscription& TopicSubscription::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicSubscription_proto_2fservices_2frequest_2ftopicSubscription_2eproto.base);
  return *internal_default_instance();
}


void TopicSubscription::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.services.request.TopicSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  subscribe_topics_.Clear();
  unsubscribe_topics_.Clear();
  subscribe_topic_regexp_.Clear();
  unsubscribe_topic_regexp_.Clear();
  subscribe_components_.Clear();
  unsubscribe_components_.Clear();
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* TopicSubscription::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string client_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_client_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.services.request.TopicSubscription.client_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated string subscribe_topics = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subscribe_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.services.request.TopicSubscription.subscribe_topics"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string unsubscribe_topics = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unsubscribe_topics();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.services.request.TopicSubscription.unsubscribe_topics"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string subscribe_topic_regexp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_subscribe_topic_regexp();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.services.request.TopicSubscription.subscribe_topic_regexp"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated string unsubscribe_topic_regexp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_unsubscribe_topic_regexp();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.services.request.TopicSubscription.unsubscribe_topic_regexp"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ubii.devices.Component subscribe_components = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_subscribe_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ubii.devices.Component unsubscribe_components = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_unsubscribe_components(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicSubscription::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.services.request.TopicSubscription)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_client_id().data(), static_cast<int>(this->_internal_client_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.client_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_client_id(), target);
  }

  // repeated string subscribe_topics = 2;
  for (int i = 0, n = this->_internal_subscribe_topics_size(); i < n; i++) {
    const auto& s = this->_internal_subscribe_topics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.subscribe_topics");
    target = stream->WriteString(2, s, target);
  }

  // repeated string unsubscribe_topics = 3;
  for (int i = 0, n = this->_internal_unsubscribe_topics_size(); i < n; i++) {
    const auto& s = this->_internal_unsubscribe_topics(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.unsubscribe_topics");
    target = stream->WriteString(3, s, target);
  }

  // repeated string subscribe_topic_regexp = 4;
  for (int i = 0, n = this->_internal_subscribe_topic_regexp_size(); i < n; i++) {
    const auto& s = this->_internal_subscribe_topic_regexp(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.subscribe_topic_regexp");
    target = stream->WriteString(4, s, target);
  }

  // repeated string unsubscribe_topic_regexp = 5;
  for (int i = 0, n = this->_internal_unsubscribe_topic_regexp_size(); i < n; i++) {
    const auto& s = this->_internal_unsubscribe_topic_regexp(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.services.request.TopicSubscription.unsubscribe_topic_regexp");
    target = stream->WriteString(5, s, target);
  }

  // repeated .ubii.devices.Component subscribe_components = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_subscribe_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_subscribe_components(i), target, stream);
  }

  // repeated .ubii.devices.Component unsubscribe_components = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_unsubscribe_components_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_unsubscribe_components(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.services.request.TopicSubscription)
  return target;
}

size_t TopicSubscription::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.services.request.TopicSubscription)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string subscribe_topics = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(subscribe_topics_.size());
  for (int i = 0, n = subscribe_topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      subscribe_topics_.Get(i));
  }

  // repeated string unsubscribe_topics = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unsubscribe_topics_.size());
  for (int i = 0, n = unsubscribe_topics_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unsubscribe_topics_.Get(i));
  }

  // repeated string subscribe_topic_regexp = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(subscribe_topic_regexp_.size());
  for (int i = 0, n = subscribe_topic_regexp_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      subscribe_topic_regexp_.Get(i));
  }

  // repeated string unsubscribe_topic_regexp = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(unsubscribe_topic_regexp_.size());
  for (int i = 0, n = unsubscribe_topic_regexp_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      unsubscribe_topic_regexp_.Get(i));
  }

  // repeated .ubii.devices.Component subscribe_components = 6;
  total_size += 1UL * this->_internal_subscribe_components_size();
  for (const auto& msg : this->subscribe_components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ubii.devices.Component unsubscribe_components = 7;
  total_size += 1UL * this->_internal_unsubscribe_components_size();
  for (const auto& msg : this->unsubscribe_components_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string client_id = 1;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_client_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicSubscription::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.services.request.TopicSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicSubscription* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicSubscription>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.services.request.TopicSubscription)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.services.request.TopicSubscription)
    MergeFrom(*source);
  }
}

void TopicSubscription::MergeFrom(const TopicSubscription& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.services.request.TopicSubscription)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  subscribe_topics_.MergeFrom(from.subscribe_topics_);
  unsubscribe_topics_.MergeFrom(from.unsubscribe_topics_);
  subscribe_topic_regexp_.MergeFrom(from.subscribe_topic_regexp_);
  unsubscribe_topic_regexp_.MergeFrom(from.unsubscribe_topic_regexp_);
  subscribe_components_.MergeFrom(from.subscribe_components_);
  unsubscribe_components_.MergeFrom(from.unsubscribe_components_);
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
}

void TopicSubscription::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.services.request.TopicSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicSubscription::CopyFrom(const TopicSubscription& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.services.request.TopicSubscription)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicSubscription::IsInitialized() const {
  return true;
}

void TopicSubscription::InternalSwap(TopicSubscription* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  subscribe_topics_.InternalSwap(&other->subscribe_topics_);
  unsubscribe_topics_.InternalSwap(&other->unsubscribe_topics_);
  subscribe_topic_regexp_.InternalSwap(&other->subscribe_topic_regexp_);
  unsubscribe_topic_regexp_.InternalSwap(&other->unsubscribe_topic_regexp_);
  subscribe_components_.InternalSwap(&other->subscribe_components_);
  unsubscribe_components_.InternalSwap(&other->unsubscribe_components_);
  client_id_.Swap(&other->client_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicSubscription::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace request
}  // namespace services
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ubii::services::request::TopicSubscription* Arena::CreateMaybeMessage< ::ubii::services::request::TopicSubscription >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::services::request::TopicSubscription >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
