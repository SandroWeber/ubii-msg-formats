// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/serviceReply.proto

#include "proto/services/serviceReply.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclients_2fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Client_proto_2fclients_2fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fclients_2fclient_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ClientList_proto_2fclients_2fclient_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fconditions_2fnotifyCondition_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_NotifyCondition_proto_2fconditions_2fnotifyCondition_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdataStructure_2flists_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringList_proto_2fdataStructure_2flists_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2fcomponent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Component_proto_2fdevices_2fcomponent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2fcomponent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ComponentList_proto_2fdevices_2fcomponent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Device_proto_2fdevices_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2fdevice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DeviceList_proto_2fdevices_2fdevice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2ftopicDemux_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicDemux_proto_2fdevices_2ftopicDemux_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2ftopicDemux_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicDemuxList_proto_2fdevices_2ftopicDemux_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2ftopicMux_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicMux_proto_2fdevices_2ftopicMux_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2ftopicMux_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicMuxList_proto_2fdevices_2ftopicMux_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgeneral_2ferror_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_proto_2fgeneral_2ferror_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgeneral_2fsuccess_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Success_proto_2fgeneral_2fsuccess_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fprocessing_2flockstepProcessing_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LockstepProcessingReply_proto_2fprocessing_2flockstepProcessing_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fprocessing_2fprocessingModule_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_ProcessingModule_proto_2fprocessing_2fprocessingModule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fprocessing_2fprocessingModule_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessingModuleList_proto_2fprocessing_2fprocessingModule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fservers_2fserver_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Server_proto_2fservers_2fserver_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fservices_2fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Service_proto_2fservices_2fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fservices_2fservice_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ServiceList_proto_2fservices_2fservice_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fsessions_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Session_proto_2fsessions_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fsessions_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SessionList_proto_2fsessions_2fsession_2eproto;
namespace ubii {
namespace services {
class ServiceReplyDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ServiceReply> _instance;
  const ::ubii::general::Success* success_;
  const ::ubii::general::Error* error_;
  const ::ubii::clients::Client* client_;
  const ::ubii::devices::Device* device_;
  const ::ubii::servers::Server* server_;
  const ::ubii::sessions::Session* session_;
  const ::ubii::sessions::SessionList* session_list_;
  const ::ubii::processing::ProcessingModule* processing_module_;
  const ::ubii::processing::ProcessingModuleList* processing_module_list_;
  const ::ubii::dataStructure::StringList* string_list_;
  const ::ubii::devices::TopicMux* topic_mux_;
  const ::ubii::devices::TopicMuxList* topic_mux_list_;
  const ::ubii::devices::TopicDemux* topic_demux_;
  const ::ubii::devices::TopicDemuxList* topic_demux_list_;
  const ::ubii::clients::ClientList* client_list_;
  const ::ubii::devices::DeviceList* device_list_;
  const ::ubii::services::Service* service_;
  const ::ubii::services::ServiceList* service_list_;
  const ::ubii::processing::LockstepProcessingReply* lockstep_processing_reply_;
  const ::ubii::devices::Component* component_;
  const ::ubii::devices::ComponentList* component_list_;
  const ::ubii::conditions::NotifyCondition* notify_condition_;
} _ServiceReply_default_instance_;
}  // namespace services
}  // namespace ubii
static void InitDefaultsscc_info_ServiceReply_proto_2fservices_2fserviceReply_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::services::_ServiceReply_default_instance_;
    new (ptr) ::ubii::services::ServiceReply();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::services::ServiceReply::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<22> scc_info_ServiceReply_proto_2fservices_2fserviceReply_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 22, 0, InitDefaultsscc_info_ServiceReply_proto_2fservices_2fserviceReply_2eproto}, {
      &scc_info_Success_proto_2fgeneral_2fsuccess_2eproto.base,
      &scc_info_Error_proto_2fgeneral_2ferror_2eproto.base,
      &scc_info_Client_proto_2fclients_2fclient_2eproto.base,
      &scc_info_Device_proto_2fdevices_2fdevice_2eproto.base,
      &scc_info_Server_proto_2fservers_2fserver_2eproto.base,
      &scc_info_Session_proto_2fsessions_2fsession_2eproto.base,
      &scc_info_SessionList_proto_2fsessions_2fsession_2eproto.base,
      &scc_info_ProcessingModule_proto_2fprocessing_2fprocessingModule_2eproto.base,
      &scc_info_ProcessingModuleList_proto_2fprocessing_2fprocessingModule_2eproto.base,
      &scc_info_StringList_proto_2fdataStructure_2flists_2eproto.base,
      &scc_info_TopicMux_proto_2fdevices_2ftopicMux_2eproto.base,
      &scc_info_TopicMuxList_proto_2fdevices_2ftopicMux_2eproto.base,
      &scc_info_TopicDemux_proto_2fdevices_2ftopicDemux_2eproto.base,
      &scc_info_TopicDemuxList_proto_2fdevices_2ftopicDemux_2eproto.base,
      &scc_info_ClientList_proto_2fclients_2fclient_2eproto.base,
      &scc_info_DeviceList_proto_2fdevices_2fdevice_2eproto.base,
      &scc_info_Service_proto_2fservices_2fservice_2eproto.base,
      &scc_info_ServiceList_proto_2fservices_2fservice_2eproto.base,
      &scc_info_LockstepProcessingReply_proto_2fprocessing_2flockstepProcessing_2eproto.base,
      &scc_info_Component_proto_2fdevices_2fcomponent_2eproto.base,
      &scc_info_ComponentList_proto_2fdevices_2fcomponent_2eproto.base,
      &scc_info_NotifyCondition_proto_2fconditions_2fnotifyCondition_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fservices_2fserviceReply_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fservices_2fserviceReply_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fservices_2fserviceReply_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fservices_2fserviceReply_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::services::ServiceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ubii::services::ServiceReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, success_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, error_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, client_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, device_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, server_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, session_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, session_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, processing_module_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, processing_module_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, string_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, topic_mux_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, topic_mux_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, topic_demux_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, topic_demux_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, client_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, device_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, service_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, service_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, lockstep_processing_reply_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, component_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, component_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, notify_condition_),
  PROTOBUF_FIELD_OFFSET(::ubii::services::ServiceReply, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ubii::services::ServiceReply)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::services::_ServiceReply_default_instance_),
};

const char descriptor_table_protodef_proto_2fservices_2fserviceReply_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n!proto/services/serviceReply.proto\022\rubi"
  "i.services\032\033proto/general/success.proto\032"
  "\031proto/general/error.proto\032\037proto/dataSt"
  "ructure/lists.proto\032\032proto/clients/clien"
  "t.proto\032&proto/conditions/notifyConditio"
  "n.proto\032\035proto/devices/component.proto\032\032"
  "proto/devices/device.proto\032\034proto/device"
  "s/topicMux.proto\032\036proto/devices/topicDem"
  "ux.proto\032\032proto/servers/server.proto\032\034pr"
  "oto/sessions/session.proto\032\034proto/servic"
  "es/service.proto\032\'proto/processing/proce"
  "ssingModule.proto\032)proto/processing/lock"
  "stepProcessing.proto\"\376\010\n\014ServiceReply\022(\n"
  "\007success\030\001 \001(\0132\025.ubii.general.SuccessH\000\022"
  "$\n\005error\030\002 \001(\0132\023.ubii.general.ErrorH\000\022&\n"
  "\006client\030\003 \001(\0132\024.ubii.clients.ClientH\000\022&\n"
  "\006device\030\004 \001(\0132\024.ubii.devices.DeviceH\000\022&\n"
  "\006server\030\005 \001(\0132\024.ubii.servers.ServerH\000\022)\n"
  "\007session\030\006 \001(\0132\026.ubii.sessions.SessionH\000"
  "\0222\n\014session_list\030\007 \001(\0132\032.ubii.sessions.S"
  "essionListH\000\022>\n\021processing_module\030\010 \001(\0132"
  "!.ubii.processing.ProcessingModuleH\000\022G\n\026"
  "processing_module_list\030\t \001(\0132%.ubii.proc"
  "essing.ProcessingModuleListH\000\0225\n\013string_"
  "list\030\n \001(\0132\036.ubii.dataStructure.StringLi"
  "stH\000\022+\n\ttopic_mux\030\013 \001(\0132\026.ubii.devices.T"
  "opicMuxH\000\0224\n\016topic_mux_list\030\014 \001(\0132\032.ubii"
  ".devices.TopicMuxListH\000\022/\n\013topic_demux\030\r"
  " \001(\0132\030.ubii.devices.TopicDemuxH\000\0228\n\020topi"
  "c_demux_list\030\016 \001(\0132\034.ubii.devices.TopicD"
  "emuxListH\000\022/\n\013client_list\030\017 \001(\0132\030.ubii.c"
  "lients.ClientListH\000\022/\n\013device_list\030\020 \001(\013"
  "2\030.ubii.devices.DeviceListH\000\022)\n\007service\030"
  "\021 \001(\0132\026.ubii.services.ServiceH\000\0222\n\014servi"
  "ce_list\030\022 \001(\0132\032.ubii.services.ServiceLis"
  "tH\000\022M\n\031lockstep_processing_reply\030\023 \001(\0132("
  ".ubii.processing.LockstepProcessingReply"
  "H\000\022,\n\tcomponent\030\024 \001(\0132\027.ubii.devices.Com"
  "ponentH\000\0225\n\016component_list\030\025 \001(\0132\033.ubii."
  "devices.ComponentListH\000\022<\n\020notify_condit"
  "ion\030\026 \001(\0132 .ubii.conditions.NotifyCondit"
  "ionH\000B\006\n\004typeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fservices_2fserviceReply_2eproto_deps[14] = {
  &::descriptor_table_proto_2fclients_2fclient_2eproto,
  &::descriptor_table_proto_2fconditions_2fnotifyCondition_2eproto,
  &::descriptor_table_proto_2fdataStructure_2flists_2eproto,
  &::descriptor_table_proto_2fdevices_2fcomponent_2eproto,
  &::descriptor_table_proto_2fdevices_2fdevice_2eproto,
  &::descriptor_table_proto_2fdevices_2ftopicDemux_2eproto,
  &::descriptor_table_proto_2fdevices_2ftopicMux_2eproto,
  &::descriptor_table_proto_2fgeneral_2ferror_2eproto,
  &::descriptor_table_proto_2fgeneral_2fsuccess_2eproto,
  &::descriptor_table_proto_2fprocessing_2flockstepProcessing_2eproto,
  &::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto,
  &::descriptor_table_proto_2fservers_2fserver_2eproto,
  &::descriptor_table_proto_2fservices_2fservice_2eproto,
  &::descriptor_table_proto_2fsessions_2fsession_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fservices_2fserviceReply_2eproto_sccs[1] = {
  &scc_info_ServiceReply_proto_2fservices_2fserviceReply_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fservices_2fserviceReply_2eproto_once;
static bool descriptor_table_proto_2fservices_2fserviceReply_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fservices_2fserviceReply_2eproto = {
  &descriptor_table_proto_2fservices_2fserviceReply_2eproto_initialized, descriptor_table_protodef_proto_2fservices_2fserviceReply_2eproto, "proto/services/serviceReply.proto", 1661,
  &descriptor_table_proto_2fservices_2fserviceReply_2eproto_once, descriptor_table_proto_2fservices_2fserviceReply_2eproto_sccs, descriptor_table_proto_2fservices_2fserviceReply_2eproto_deps, 1, 14,
  schemas, file_default_instances, TableStruct_proto_2fservices_2fserviceReply_2eproto::offsets,
  file_level_metadata_proto_2fservices_2fserviceReply_2eproto, 1, file_level_enum_descriptors_proto_2fservices_2fserviceReply_2eproto, file_level_service_descriptors_proto_2fservices_2fserviceReply_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fservices_2fserviceReply_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fservices_2fserviceReply_2eproto), true);
namespace ubii {
namespace services {

// ===================================================================

void ServiceReply::InitAsDefaultInstance() {
  ::ubii::services::_ServiceReply_default_instance_.success_ = const_cast< ::ubii::general::Success*>(
      ::ubii::general::Success::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.error_ = const_cast< ::ubii::general::Error*>(
      ::ubii::general::Error::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.client_ = const_cast< ::ubii::clients::Client*>(
      ::ubii::clients::Client::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.device_ = const_cast< ::ubii::devices::Device*>(
      ::ubii::devices::Device::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.server_ = const_cast< ::ubii::servers::Server*>(
      ::ubii::servers::Server::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.session_ = const_cast< ::ubii::sessions::Session*>(
      ::ubii::sessions::Session::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.session_list_ = const_cast< ::ubii::sessions::SessionList*>(
      ::ubii::sessions::SessionList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.processing_module_ = const_cast< ::ubii::processing::ProcessingModule*>(
      ::ubii::processing::ProcessingModule::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.processing_module_list_ = const_cast< ::ubii::processing::ProcessingModuleList*>(
      ::ubii::processing::ProcessingModuleList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.string_list_ = const_cast< ::ubii::dataStructure::StringList*>(
      ::ubii::dataStructure::StringList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.topic_mux_ = const_cast< ::ubii::devices::TopicMux*>(
      ::ubii::devices::TopicMux::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.topic_mux_list_ = const_cast< ::ubii::devices::TopicMuxList*>(
      ::ubii::devices::TopicMuxList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.topic_demux_ = const_cast< ::ubii::devices::TopicDemux*>(
      ::ubii::devices::TopicDemux::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.topic_demux_list_ = const_cast< ::ubii::devices::TopicDemuxList*>(
      ::ubii::devices::TopicDemuxList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.client_list_ = const_cast< ::ubii::clients::ClientList*>(
      ::ubii::clients::ClientList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.device_list_ = const_cast< ::ubii::devices::DeviceList*>(
      ::ubii::devices::DeviceList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.service_ = const_cast< ::ubii::services::Service*>(
      ::ubii::services::Service::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.service_list_ = const_cast< ::ubii::services::ServiceList*>(
      ::ubii::services::ServiceList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.lockstep_processing_reply_ = const_cast< ::ubii::processing::LockstepProcessingReply*>(
      ::ubii::processing::LockstepProcessingReply::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.component_ = const_cast< ::ubii::devices::Component*>(
      ::ubii::devices::Component::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.component_list_ = const_cast< ::ubii::devices::ComponentList*>(
      ::ubii::devices::ComponentList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.notify_condition_ = const_cast< ::ubii::conditions::NotifyCondition*>(
      ::ubii::conditions::NotifyCondition::internal_default_instance());
}
class ServiceReply::_Internal {
 public:
  static const ::ubii::general::Success& success(const ServiceReply* msg);
  static const ::ubii::general::Error& error(const ServiceReply* msg);
  static const ::ubii::clients::Client& client(const ServiceReply* msg);
  static const ::ubii::devices::Device& device(const ServiceReply* msg);
  static const ::ubii::servers::Server& server(const ServiceReply* msg);
  static const ::ubii::sessions::Session& session(const ServiceReply* msg);
  static const ::ubii::sessions::SessionList& session_list(const ServiceReply* msg);
  static const ::ubii::processing::ProcessingModule& processing_module(const ServiceReply* msg);
  static const ::ubii::processing::ProcessingModuleList& processing_module_list(const ServiceReply* msg);
  static const ::ubii::dataStructure::StringList& string_list(const ServiceReply* msg);
  static const ::ubii::devices::TopicMux& topic_mux(const ServiceReply* msg);
  static const ::ubii::devices::TopicMuxList& topic_mux_list(const ServiceReply* msg);
  static const ::ubii::devices::TopicDemux& topic_demux(const ServiceReply* msg);
  static const ::ubii::devices::TopicDemuxList& topic_demux_list(const ServiceReply* msg);
  static const ::ubii::clients::ClientList& client_list(const ServiceReply* msg);
  static const ::ubii::devices::DeviceList& device_list(const ServiceReply* msg);
  static const ::ubii::services::Service& service(const ServiceReply* msg);
  static const ::ubii::services::ServiceList& service_list(const ServiceReply* msg);
  static const ::ubii::processing::LockstepProcessingReply& lockstep_processing_reply(const ServiceReply* msg);
  static const ::ubii::devices::Component& component(const ServiceReply* msg);
  static const ::ubii::devices::ComponentList& component_list(const ServiceReply* msg);
  static const ::ubii::conditions::NotifyCondition& notify_condition(const ServiceReply* msg);
};

const ::ubii::general::Success&
ServiceReply::_Internal::success(const ServiceReply* msg) {
  return *msg->type_.success_;
}
const ::ubii::general::Error&
ServiceReply::_Internal::error(const ServiceReply* msg) {
  return *msg->type_.error_;
}
const ::ubii::clients::Client&
ServiceReply::_Internal::client(const ServiceReply* msg) {
  return *msg->type_.client_;
}
const ::ubii::devices::Device&
ServiceReply::_Internal::device(const ServiceReply* msg) {
  return *msg->type_.device_;
}
const ::ubii::servers::Server&
ServiceReply::_Internal::server(const ServiceReply* msg) {
  return *msg->type_.server_;
}
const ::ubii::sessions::Session&
ServiceReply::_Internal::session(const ServiceReply* msg) {
  return *msg->type_.session_;
}
const ::ubii::sessions::SessionList&
ServiceReply::_Internal::session_list(const ServiceReply* msg) {
  return *msg->type_.session_list_;
}
const ::ubii::processing::ProcessingModule&
ServiceReply::_Internal::processing_module(const ServiceReply* msg) {
  return *msg->type_.processing_module_;
}
const ::ubii::processing::ProcessingModuleList&
ServiceReply::_Internal::processing_module_list(const ServiceReply* msg) {
  return *msg->type_.processing_module_list_;
}
const ::ubii::dataStructure::StringList&
ServiceReply::_Internal::string_list(const ServiceReply* msg) {
  return *msg->type_.string_list_;
}
const ::ubii::devices::TopicMux&
ServiceReply::_Internal::topic_mux(const ServiceReply* msg) {
  return *msg->type_.topic_mux_;
}
const ::ubii::devices::TopicMuxList&
ServiceReply::_Internal::topic_mux_list(const ServiceReply* msg) {
  return *msg->type_.topic_mux_list_;
}
const ::ubii::devices::TopicDemux&
ServiceReply::_Internal::topic_demux(const ServiceReply* msg) {
  return *msg->type_.topic_demux_;
}
const ::ubii::devices::TopicDemuxList&
ServiceReply::_Internal::topic_demux_list(const ServiceReply* msg) {
  return *msg->type_.topic_demux_list_;
}
const ::ubii::clients::ClientList&
ServiceReply::_Internal::client_list(const ServiceReply* msg) {
  return *msg->type_.client_list_;
}
const ::ubii::devices::DeviceList&
ServiceReply::_Internal::device_list(const ServiceReply* msg) {
  return *msg->type_.device_list_;
}
const ::ubii::services::Service&
ServiceReply::_Internal::service(const ServiceReply* msg) {
  return *msg->type_.service_;
}
const ::ubii::services::ServiceList&
ServiceReply::_Internal::service_list(const ServiceReply* msg) {
  return *msg->type_.service_list_;
}
const ::ubii::processing::LockstepProcessingReply&
ServiceReply::_Internal::lockstep_processing_reply(const ServiceReply* msg) {
  return *msg->type_.lockstep_processing_reply_;
}
const ::ubii::devices::Component&
ServiceReply::_Internal::component(const ServiceReply* msg) {
  return *msg->type_.component_;
}
const ::ubii::devices::ComponentList&
ServiceReply::_Internal::component_list(const ServiceReply* msg) {
  return *msg->type_.component_list_;
}
const ::ubii::conditions::NotifyCondition&
ServiceReply::_Internal::notify_condition(const ServiceReply* msg) {
  return *msg->type_.notify_condition_;
}
void ServiceReply::set_allocated_success(::ubii::general::Success* success) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (success) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      success = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    set_has_success();
    type_.success_ = success;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.success)
}
void ServiceReply::clear_success() {
  if (_internal_has_success()) {
    delete type_.success_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_error(::ubii::general::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.error)
}
void ServiceReply::clear_error() {
  if (_internal_has_error()) {
    delete type_.error_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_client(::ubii::clients::Client* client) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (client) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    set_has_client();
    type_.client_ = client;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.client)
}
void ServiceReply::clear_client() {
  if (_internal_has_client()) {
    delete type_.client_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_device(::ubii::devices::Device* device) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (device) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    set_has_device();
    type_.device_ = device;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.device)
}
void ServiceReply::clear_device() {
  if (_internal_has_device()) {
    delete type_.device_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_server(::ubii::servers::Server* server) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (server) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      server = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    set_has_server();
    type_.server_ = server;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.server)
}
void ServiceReply::clear_server() {
  if (_internal_has_server()) {
    delete type_.server_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_session(::ubii::sessions::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    type_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.session)
}
void ServiceReply::clear_session() {
  if (_internal_has_session()) {
    delete type_.session_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_session_list(::ubii::sessions::SessionList* session_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (session_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      session_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session_list, submessage_arena);
    }
    set_has_session_list();
    type_.session_list_ = session_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.session_list)
}
void ServiceReply::clear_session_list() {
  if (_internal_has_session_list()) {
    delete type_.session_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_processing_module(::ubii::processing::ProcessingModule* processing_module) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (processing_module) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processing_module = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_module, submessage_arena);
    }
    set_has_processing_module();
    type_.processing_module_ = processing_module;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.processing_module)
}
void ServiceReply::clear_processing_module() {
  if (_internal_has_processing_module()) {
    delete type_.processing_module_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_processing_module_list(::ubii::processing::ProcessingModuleList* processing_module_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (processing_module_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processing_module_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_module_list, submessage_arena);
    }
    set_has_processing_module_list();
    type_.processing_module_list_ = processing_module_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.processing_module_list)
}
void ServiceReply::clear_processing_module_list() {
  if (_internal_has_processing_module_list()) {
    delete type_.processing_module_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_string_list(::ubii::dataStructure::StringList* string_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (string_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      string_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_list, submessage_arena);
    }
    set_has_string_list();
    type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.string_list)
}
void ServiceReply::clear_string_list() {
  if (_internal_has_string_list()) {
    delete type_.string_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_topic_mux(::ubii::devices::TopicMux* topic_mux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_mux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic_mux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_mux, submessage_arena);
    }
    set_has_topic_mux();
    type_.topic_mux_ = topic_mux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_mux)
}
void ServiceReply::clear_topic_mux() {
  if (_internal_has_topic_mux()) {
    delete type_.topic_mux_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_topic_mux_list(::ubii::devices::TopicMuxList* topic_mux_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_mux_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic_mux_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_mux_list, submessage_arena);
    }
    set_has_topic_mux_list();
    type_.topic_mux_list_ = topic_mux_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_mux_list)
}
void ServiceReply::clear_topic_mux_list() {
  if (_internal_has_topic_mux_list()) {
    delete type_.topic_mux_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_topic_demux(::ubii::devices::TopicDemux* topic_demux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_demux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic_demux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_demux, submessage_arena);
    }
    set_has_topic_demux();
    type_.topic_demux_ = topic_demux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_demux)
}
void ServiceReply::clear_topic_demux() {
  if (_internal_has_topic_demux()) {
    delete type_.topic_demux_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_topic_demux_list(::ubii::devices::TopicDemuxList* topic_demux_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_demux_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic_demux_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_demux_list, submessage_arena);
    }
    set_has_topic_demux_list();
    type_.topic_demux_list_ = topic_demux_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_demux_list)
}
void ServiceReply::clear_topic_demux_list() {
  if (_internal_has_topic_demux_list()) {
    delete type_.topic_demux_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_client_list(::ubii::clients::ClientList* client_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (client_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_list, submessage_arena);
    }
    set_has_client_list();
    type_.client_list_ = client_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.client_list)
}
void ServiceReply::clear_client_list() {
  if (_internal_has_client_list()) {
    delete type_.client_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_device_list(::ubii::devices::DeviceList* device_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (device_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      device_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, device_list, submessage_arena);
    }
    set_has_device_list();
    type_.device_list_ = device_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.device_list)
}
void ServiceReply::clear_device_list() {
  if (_internal_has_device_list()) {
    delete type_.device_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_service(::ubii::services::Service* service) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (service) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    set_has_service();
    type_.service_ = service;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.service)
}
void ServiceReply::clear_service() {
  if (_internal_has_service()) {
    delete type_.service_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_service_list(::ubii::services::ServiceList* service_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (service_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      service_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, service_list, submessage_arena);
    }
    set_has_service_list();
    type_.service_list_ = service_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.service_list)
}
void ServiceReply::clear_service_list() {
  if (_internal_has_service_list()) {
    delete type_.service_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_lockstep_processing_reply(::ubii::processing::LockstepProcessingReply* lockstep_processing_reply) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (lockstep_processing_reply) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      lockstep_processing_reply = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lockstep_processing_reply, submessage_arena);
    }
    set_has_lockstep_processing_reply();
    type_.lockstep_processing_reply_ = lockstep_processing_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.lockstep_processing_reply)
}
void ServiceReply::clear_lockstep_processing_reply() {
  if (_internal_has_lockstep_processing_reply()) {
    delete type_.lockstep_processing_reply_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_component(::ubii::devices::Component* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    set_has_component();
    type_.component_ = component;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.component)
}
void ServiceReply::clear_component() {
  if (_internal_has_component()) {
    delete type_.component_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_component_list(::ubii::devices::ComponentList* component_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (component_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component_list, submessage_arena);
    }
    set_has_component_list();
    type_.component_list_ = component_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.component_list)
}
void ServiceReply::clear_component_list() {
  if (_internal_has_component_list()) {
    delete type_.component_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_notify_condition(::ubii::conditions::NotifyCondition* notify_condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (notify_condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      notify_condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, notify_condition, submessage_arena);
    }
    set_has_notify_condition();
    type_.notify_condition_ = notify_condition;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.notify_condition)
}
void ServiceReply::clear_notify_condition() {
  if (_internal_has_notify_condition()) {
    delete type_.notify_condition_;
    clear_has_type();
  }
}
ServiceReply::ServiceReply()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.services.ServiceReply)
}
ServiceReply::ServiceReply(const ServiceReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kSuccess: {
      _internal_mutable_success()->::ubii::general::Success::MergeFrom(from._internal_success());
      break;
    }
    case kError: {
      _internal_mutable_error()->::ubii::general::Error::MergeFrom(from._internal_error());
      break;
    }
    case kClient: {
      _internal_mutable_client()->::ubii::clients::Client::MergeFrom(from._internal_client());
      break;
    }
    case kDevice: {
      _internal_mutable_device()->::ubii::devices::Device::MergeFrom(from._internal_device());
      break;
    }
    case kServer: {
      _internal_mutable_server()->::ubii::servers::Server::MergeFrom(from._internal_server());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::ubii::sessions::Session::MergeFrom(from._internal_session());
      break;
    }
    case kSessionList: {
      _internal_mutable_session_list()->::ubii::sessions::SessionList::MergeFrom(from._internal_session_list());
      break;
    }
    case kProcessingModule: {
      _internal_mutable_processing_module()->::ubii::processing::ProcessingModule::MergeFrom(from._internal_processing_module());
      break;
    }
    case kProcessingModuleList: {
      _internal_mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from._internal_processing_module_list());
      break;
    }
    case kStringList: {
      _internal_mutable_string_list()->::ubii::dataStructure::StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kTopicMux: {
      _internal_mutable_topic_mux()->::ubii::devices::TopicMux::MergeFrom(from._internal_topic_mux());
      break;
    }
    case kTopicMuxList: {
      _internal_mutable_topic_mux_list()->::ubii::devices::TopicMuxList::MergeFrom(from._internal_topic_mux_list());
      break;
    }
    case kTopicDemux: {
      _internal_mutable_topic_demux()->::ubii::devices::TopicDemux::MergeFrom(from._internal_topic_demux());
      break;
    }
    case kTopicDemuxList: {
      _internal_mutable_topic_demux_list()->::ubii::devices::TopicDemuxList::MergeFrom(from._internal_topic_demux_list());
      break;
    }
    case kClientList: {
      _internal_mutable_client_list()->::ubii::clients::ClientList::MergeFrom(from._internal_client_list());
      break;
    }
    case kDeviceList: {
      _internal_mutable_device_list()->::ubii::devices::DeviceList::MergeFrom(from._internal_device_list());
      break;
    }
    case kService: {
      _internal_mutable_service()->::ubii::services::Service::MergeFrom(from._internal_service());
      break;
    }
    case kServiceList: {
      _internal_mutable_service_list()->::ubii::services::ServiceList::MergeFrom(from._internal_service_list());
      break;
    }
    case kLockstepProcessingReply: {
      _internal_mutable_lockstep_processing_reply()->::ubii::processing::LockstepProcessingReply::MergeFrom(from._internal_lockstep_processing_reply());
      break;
    }
    case kComponent: {
      _internal_mutable_component()->::ubii::devices::Component::MergeFrom(from._internal_component());
      break;
    }
    case kComponentList: {
      _internal_mutable_component_list()->::ubii::devices::ComponentList::MergeFrom(from._internal_component_list());
      break;
    }
    case kNotifyCondition: {
      _internal_mutable_notify_condition()->::ubii::conditions::NotifyCondition::MergeFrom(from._internal_notify_condition());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ubii.services.ServiceReply)
}

void ServiceReply::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ServiceReply_proto_2fservices_2fserviceReply_2eproto.base);
  clear_has_type();
}

ServiceReply::~ServiceReply() {
  // @@protoc_insertion_point(destructor:ubii.services.ServiceReply)
  SharedDtor();
}

void ServiceReply::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void ServiceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ServiceReply& ServiceReply::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ServiceReply_proto_2fservices_2fserviceReply_2eproto.base);
  return *internal_default_instance();
}


void ServiceReply::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.services.ServiceReply)
  switch (type_case()) {
    case kSuccess: {
      delete type_.success_;
      break;
    }
    case kError: {
      delete type_.error_;
      break;
    }
    case kClient: {
      delete type_.client_;
      break;
    }
    case kDevice: {
      delete type_.device_;
      break;
    }
    case kServer: {
      delete type_.server_;
      break;
    }
    case kSession: {
      delete type_.session_;
      break;
    }
    case kSessionList: {
      delete type_.session_list_;
      break;
    }
    case kProcessingModule: {
      delete type_.processing_module_;
      break;
    }
    case kProcessingModuleList: {
      delete type_.processing_module_list_;
      break;
    }
    case kStringList: {
      delete type_.string_list_;
      break;
    }
    case kTopicMux: {
      delete type_.topic_mux_;
      break;
    }
    case kTopicMuxList: {
      delete type_.topic_mux_list_;
      break;
    }
    case kTopicDemux: {
      delete type_.topic_demux_;
      break;
    }
    case kTopicDemuxList: {
      delete type_.topic_demux_list_;
      break;
    }
    case kClientList: {
      delete type_.client_list_;
      break;
    }
    case kDeviceList: {
      delete type_.device_list_;
      break;
    }
    case kService: {
      delete type_.service_;
      break;
    }
    case kServiceList: {
      delete type_.service_list_;
      break;
    }
    case kLockstepProcessingReply: {
      delete type_.lockstep_processing_reply_;
      break;
    }
    case kComponent: {
      delete type_.component_;
      break;
    }
    case kComponentList: {
      delete type_.component_list_;
      break;
    }
    case kNotifyCondition: {
      delete type_.notify_condition_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ServiceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.services.ServiceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

const char* ServiceReply::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ubii.general.Success success = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_success(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.general.Error error = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.clients.Client client = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_client(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.Device device = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_device(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.servers.Server server = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_server(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.sessions.Session session = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.sessions.SessionList session_list = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_session_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.processing.ProcessingModule processing_module = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_module(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.processing.ProcessingModuleList processing_module_list = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_module_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.StringList string_list = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.TopicMux topic_mux = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_mux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.TopicMuxList topic_mux_list = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_mux_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.TopicDemux topic_demux = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_demux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.TopicDemuxList topic_demux_list = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_demux_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.clients.ClientList client_list = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_client_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.DeviceList device_list = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_device_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.services.Service service = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_service(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.services.ServiceList service_list = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_service_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_lockstep_processing_reply(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.Component component = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.ComponentList component_list = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_component_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.conditions.NotifyCondition notify_condition = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_notify_condition(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ServiceReply::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.services.ServiceReply)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ubii.general.Success success = 1;
  if (_internal_has_success()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::success(this), target, stream);
  }

  // .ubii.general.Error error = 2;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::error(this), target, stream);
  }

  // .ubii.clients.Client client = 3;
  if (_internal_has_client()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::client(this), target, stream);
  }

  // .ubii.devices.Device device = 4;
  if (_internal_has_device()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::device(this), target, stream);
  }

  // .ubii.servers.Server server = 5;
  if (_internal_has_server()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::server(this), target, stream);
  }

  // .ubii.sessions.Session session = 6;
  if (_internal_has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::session(this), target, stream);
  }

  // .ubii.sessions.SessionList session_list = 7;
  if (_internal_has_session_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::session_list(this), target, stream);
  }

  // .ubii.processing.ProcessingModule processing_module = 8;
  if (_internal_has_processing_module()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::processing_module(this), target, stream);
  }

  // .ubii.processing.ProcessingModuleList processing_module_list = 9;
  if (_internal_has_processing_module_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::processing_module_list(this), target, stream);
  }

  // .ubii.dataStructure.StringList string_list = 10;
  if (_internal_has_string_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::string_list(this), target, stream);
  }

  // .ubii.devices.TopicMux topic_mux = 11;
  if (_internal_has_topic_mux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::topic_mux(this), target, stream);
  }

  // .ubii.devices.TopicMuxList topic_mux_list = 12;
  if (_internal_has_topic_mux_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::topic_mux_list(this), target, stream);
  }

  // .ubii.devices.TopicDemux topic_demux = 13;
  if (_internal_has_topic_demux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::topic_demux(this), target, stream);
  }

  // .ubii.devices.TopicDemuxList topic_demux_list = 14;
  if (_internal_has_topic_demux_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::topic_demux_list(this), target, stream);
  }

  // .ubii.clients.ClientList client_list = 15;
  if (_internal_has_client_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::client_list(this), target, stream);
  }

  // .ubii.devices.DeviceList device_list = 16;
  if (_internal_has_device_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::device_list(this), target, stream);
  }

  // .ubii.services.Service service = 17;
  if (_internal_has_service()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::service(this), target, stream);
  }

  // .ubii.services.ServiceList service_list = 18;
  if (_internal_has_service_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::service_list(this), target, stream);
  }

  // .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
  if (_internal_has_lockstep_processing_reply()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::lockstep_processing_reply(this), target, stream);
  }

  // .ubii.devices.Component component = 20;
  if (_internal_has_component()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::component(this), target, stream);
  }

  // .ubii.devices.ComponentList component_list = 21;
  if (_internal_has_component_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::component_list(this), target, stream);
  }

  // .ubii.conditions.NotifyCondition notify_condition = 22;
  if (_internal_has_notify_condition()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::notify_condition(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.services.ServiceReply)
  return target;
}

size_t ServiceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.services.ServiceReply)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .ubii.general.Success success = 1;
    case kSuccess: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.success_);
      break;
    }
    // .ubii.general.Error error = 2;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.error_);
      break;
    }
    // .ubii.clients.Client client = 3;
    case kClient: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.client_);
      break;
    }
    // .ubii.devices.Device device = 4;
    case kDevice: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.device_);
      break;
    }
    // .ubii.servers.Server server = 5;
    case kServer: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.server_);
      break;
    }
    // .ubii.sessions.Session session = 6;
    case kSession: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.session_);
      break;
    }
    // .ubii.sessions.SessionList session_list = 7;
    case kSessionList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.session_list_);
      break;
    }
    // .ubii.processing.ProcessingModule processing_module = 8;
    case kProcessingModule: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.processing_module_);
      break;
    }
    // .ubii.processing.ProcessingModuleList processing_module_list = 9;
    case kProcessingModuleList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.processing_module_list_);
      break;
    }
    // .ubii.dataStructure.StringList string_list = 10;
    case kStringList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.string_list_);
      break;
    }
    // .ubii.devices.TopicMux topic_mux = 11;
    case kTopicMux: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.topic_mux_);
      break;
    }
    // .ubii.devices.TopicMuxList topic_mux_list = 12;
    case kTopicMuxList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.topic_mux_list_);
      break;
    }
    // .ubii.devices.TopicDemux topic_demux = 13;
    case kTopicDemux: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.topic_demux_);
      break;
    }
    // .ubii.devices.TopicDemuxList topic_demux_list = 14;
    case kTopicDemuxList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.topic_demux_list_);
      break;
    }
    // .ubii.clients.ClientList client_list = 15;
    case kClientList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.client_list_);
      break;
    }
    // .ubii.devices.DeviceList device_list = 16;
    case kDeviceList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.device_list_);
      break;
    }
    // .ubii.services.Service service = 17;
    case kService: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.service_);
      break;
    }
    // .ubii.services.ServiceList service_list = 18;
    case kServiceList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.service_list_);
      break;
    }
    // .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
    case kLockstepProcessingReply: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.lockstep_processing_reply_);
      break;
    }
    // .ubii.devices.Component component = 20;
    case kComponent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.component_);
      break;
    }
    // .ubii.devices.ComponentList component_list = 21;
    case kComponentList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.component_list_);
      break;
    }
    // .ubii.conditions.NotifyCondition notify_condition = 22;
    case kNotifyCondition: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.notify_condition_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceReply::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.services.ServiceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceReply* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ServiceReply>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.services.ServiceReply)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.services.ServiceReply)
    MergeFrom(*source);
  }
}

void ServiceReply::MergeFrom(const ServiceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.services.ServiceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kSuccess: {
      _internal_mutable_success()->::ubii::general::Success::MergeFrom(from._internal_success());
      break;
    }
    case kError: {
      _internal_mutable_error()->::ubii::general::Error::MergeFrom(from._internal_error());
      break;
    }
    case kClient: {
      _internal_mutable_client()->::ubii::clients::Client::MergeFrom(from._internal_client());
      break;
    }
    case kDevice: {
      _internal_mutable_device()->::ubii::devices::Device::MergeFrom(from._internal_device());
      break;
    }
    case kServer: {
      _internal_mutable_server()->::ubii::servers::Server::MergeFrom(from._internal_server());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::ubii::sessions::Session::MergeFrom(from._internal_session());
      break;
    }
    case kSessionList: {
      _internal_mutable_session_list()->::ubii::sessions::SessionList::MergeFrom(from._internal_session_list());
      break;
    }
    case kProcessingModule: {
      _internal_mutable_processing_module()->::ubii::processing::ProcessingModule::MergeFrom(from._internal_processing_module());
      break;
    }
    case kProcessingModuleList: {
      _internal_mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from._internal_processing_module_list());
      break;
    }
    case kStringList: {
      _internal_mutable_string_list()->::ubii::dataStructure::StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kTopicMux: {
      _internal_mutable_topic_mux()->::ubii::devices::TopicMux::MergeFrom(from._internal_topic_mux());
      break;
    }
    case kTopicMuxList: {
      _internal_mutable_topic_mux_list()->::ubii::devices::TopicMuxList::MergeFrom(from._internal_topic_mux_list());
      break;
    }
    case kTopicDemux: {
      _internal_mutable_topic_demux()->::ubii::devices::TopicDemux::MergeFrom(from._internal_topic_demux());
      break;
    }
    case kTopicDemuxList: {
      _internal_mutable_topic_demux_list()->::ubii::devices::TopicDemuxList::MergeFrom(from._internal_topic_demux_list());
      break;
    }
    case kClientList: {
      _internal_mutable_client_list()->::ubii::clients::ClientList::MergeFrom(from._internal_client_list());
      break;
    }
    case kDeviceList: {
      _internal_mutable_device_list()->::ubii::devices::DeviceList::MergeFrom(from._internal_device_list());
      break;
    }
    case kService: {
      _internal_mutable_service()->::ubii::services::Service::MergeFrom(from._internal_service());
      break;
    }
    case kServiceList: {
      _internal_mutable_service_list()->::ubii::services::ServiceList::MergeFrom(from._internal_service_list());
      break;
    }
    case kLockstepProcessingReply: {
      _internal_mutable_lockstep_processing_reply()->::ubii::processing::LockstepProcessingReply::MergeFrom(from._internal_lockstep_processing_reply());
      break;
    }
    case kComponent: {
      _internal_mutable_component()->::ubii::devices::Component::MergeFrom(from._internal_component());
      break;
    }
    case kComponentList: {
      _internal_mutable_component_list()->::ubii::devices::ComponentList::MergeFrom(from._internal_component_list());
      break;
    }
    case kNotifyCondition: {
      _internal_mutable_notify_condition()->::ubii::conditions::NotifyCondition::MergeFrom(from._internal_notify_condition());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void ServiceReply::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.services.ServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReply::CopyFrom(const ServiceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.services.ServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReply::IsInitialized() const {
  return true;
}

void ServiceReply::InternalSwap(ServiceReply* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata ServiceReply::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace services
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ubii::services::ServiceReply* Arena::CreateMaybeMessage< ::ubii::services::ServiceReply >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::services::ServiceReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
