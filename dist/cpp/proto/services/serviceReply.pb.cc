// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/serviceReply.proto

#include "proto/services/serviceReply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_proto_2fclients_2fclient_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fclients_2fclient_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ClientList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fclients_2fclient_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Client;
}  // namespace protobuf_proto_2fclients_2fclient_2eproto
namespace protobuf_proto_2fdevices_2fdevice_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fdevices_2fdevice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_Device;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fdevices_2fdevice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_DeviceList;
}  // namespace protobuf_proto_2fdevices_2fdevice_2eproto
namespace protobuf_proto_2fdevices_2ftopicDemux_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fdevices_2ftopicDemux_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TopicDemux;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fdevices_2ftopicDemux_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TopicDemuxList;
}  // namespace protobuf_proto_2fdevices_2ftopicDemux_2eproto
namespace protobuf_proto_2fdevices_2ftopicMux_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fdevices_2ftopicMux_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_TopicMux;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fdevices_2ftopicMux_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_TopicMuxList;
}  // namespace protobuf_proto_2fdevices_2ftopicMux_2eproto
namespace protobuf_proto_2fgeneral_2ferror_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fgeneral_2ferror_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Error;
}  // namespace protobuf_proto_2fgeneral_2ferror_2eproto
namespace protobuf_proto_2fgeneral_2fsuccess_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fgeneral_2fsuccess_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Success;
}  // namespace protobuf_proto_2fgeneral_2fsuccess_2eproto
namespace protobuf_proto_2fprocessing_2flockstepProcessing_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fprocessing_2flockstepProcessing_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_LockstepProcessingReply;
}  // namespace protobuf_proto_2fprocessing_2flockstepProcessing_2eproto
namespace protobuf_proto_2fprocessing_2fprocessingModule_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fprocessing_2fprocessingModule_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ProcessingModuleList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fprocessing_2fprocessingModule_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_ProcessingModule;
}  // namespace protobuf_proto_2fprocessing_2fprocessingModule_2eproto
namespace protobuf_proto_2fservers_2fserver_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fservers_2fserver_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Server;
}  // namespace protobuf_proto_2fservers_2fserver_2eproto
namespace protobuf_proto_2fservices_2fservice_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fservices_2fservice_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_Service;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fservices_2fservice_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_ServiceList;
}  // namespace protobuf_proto_2fservices_2fservice_2eproto
namespace protobuf_proto_2fsessions_2fsession_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsessions_2fsession_2eproto ::google::protobuf::internal::SCCInfo<1> scc_info_SessionList;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsessions_2fsession_2eproto ::google::protobuf::internal::SCCInfo<2> scc_info_Session;
}  // namespace protobuf_proto_2fsessions_2fsession_2eproto
namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_StringList;
}  // namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto
namespace ubii {
namespace services {
class ServiceReplyDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<ServiceReply>
      _instance;
  const ::ubii::general::Success* success_;
  const ::ubii::general::Error* error_;
  const ::ubii::clients::Client* client_;
  const ::ubii::devices::Device* device_;
  const ::ubii::servers::Server* server_;
  const ::ubii::sessions::Session* session_;
  const ::ubii::sessions::SessionList* session_list_;
  const ::ubii::processing::ProcessingModule* processing_module_;
  const ::ubii::processing::ProcessingModuleList* processing_module_list_;
  const ::ubii::dataStructure::StringList* string_list_;
  const ::ubii::devices::TopicMux* topic_mux_;
  const ::ubii::devices::TopicMuxList* topic_mux_list_;
  const ::ubii::devices::TopicDemux* topic_demux_;
  const ::ubii::devices::TopicDemuxList* topic_demux_list_;
  const ::ubii::clients::ClientList* client_list_;
  const ::ubii::devices::DeviceList* device_list_;
  const ::ubii::services::Service* service_;
  const ::ubii::services::ServiceList* service_list_;
  const ::ubii::processing::LockstepProcessingReply* lockstep_processing_reply_;
} _ServiceReply_default_instance_;
}  // namespace services
}  // namespace ubii
namespace protobuf_proto_2fservices_2fserviceReply_2eproto {
static void InitDefaultsServiceReply() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::services::_ServiceReply_default_instance_;
    new (ptr) ::ubii::services::ServiceReply();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::services::ServiceReply::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<19> scc_info_ServiceReply =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 19, InitDefaultsServiceReply}, {
      &protobuf_proto_2fgeneral_2fsuccess_2eproto::scc_info_Success.base,
      &protobuf_proto_2fgeneral_2ferror_2eproto::scc_info_Error.base,
      &protobuf_proto_2fclients_2fclient_2eproto::scc_info_Client.base,
      &protobuf_proto_2fdevices_2fdevice_2eproto::scc_info_Device.base,
      &protobuf_proto_2fservers_2fserver_2eproto::scc_info_Server.base,
      &protobuf_proto_2fsessions_2fsession_2eproto::scc_info_Session.base,
      &protobuf_proto_2fsessions_2fsession_2eproto::scc_info_SessionList.base,
      &protobuf_proto_2fprocessing_2fprocessingModule_2eproto::scc_info_ProcessingModule.base,
      &protobuf_proto_2fprocessing_2fprocessingModule_2eproto::scc_info_ProcessingModuleList.base,
      &protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto::scc_info_StringList.base,
      &protobuf_proto_2fdevices_2ftopicMux_2eproto::scc_info_TopicMux.base,
      &protobuf_proto_2fdevices_2ftopicMux_2eproto::scc_info_TopicMuxList.base,
      &protobuf_proto_2fdevices_2ftopicDemux_2eproto::scc_info_TopicDemux.base,
      &protobuf_proto_2fdevices_2ftopicDemux_2eproto::scc_info_TopicDemuxList.base,
      &protobuf_proto_2fclients_2fclient_2eproto::scc_info_ClientList.base,
      &protobuf_proto_2fdevices_2fdevice_2eproto::scc_info_DeviceList.base,
      &protobuf_proto_2fservices_2fservice_2eproto::scc_info_Service.base,
      &protobuf_proto_2fservices_2fservice_2eproto::scc_info_ServiceList.base,
      &protobuf_proto_2fprocessing_2flockstepProcessing_2eproto::scc_info_LockstepProcessingReply.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_ServiceReply.base);
}

::google::protobuf::Metadata file_level_metadata[1];

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ubii::services::ServiceReply, _internal_metadata_),
  ~0u,  // no _extensions_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ubii::services::ServiceReply, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, success_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, error_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, client_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, device_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, server_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, session_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, session_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, processing_module_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, processing_module_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, string_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, topic_mux_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, topic_mux_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, topic_demux_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, topic_demux_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, client_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, device_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, service_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, service_list_),
  offsetof(::ubii::services::ServiceReplyDefaultTypeInternal, lockstep_processing_reply_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(::ubii::services::ServiceReply, type_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ubii::services::ServiceReply)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&::ubii::services::_ServiceReply_default_instance_),
};

void protobuf_AssignDescriptors() {
  AddDescriptors();
  AssignDescriptors(
      "proto/services/serviceReply.proto", schemas, file_default_instances, TableStruct::offsets,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_PROTOBUF_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_PROTOBUF_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n!proto/services/serviceReply.proto\022\rubi"
      "i.services\032\033proto/general/success.proto\032"
      "\031proto/general/error.proto\0329proto/topicD"
      "ata/topicDataRecord/dataStructure/lists."
      "proto\032\032proto/clients/client.proto\032\032proto"
      "/devices/device.proto\032\034proto/devices/top"
      "icMux.proto\032\036proto/devices/topicDemux.pr"
      "oto\032\032proto/servers/server.proto\032\034proto/s"
      "essions/session.proto\032\034proto/services/se"
      "rvice.proto\032\'proto/processing/processing"
      "Module.proto\032)proto/processing/lockstepP"
      "rocessing.proto\"\333\007\n\014ServiceReply\022(\n\007succ"
      "ess\030\001 \001(\0132\025.ubii.general.SuccessH\000\022$\n\005er"
      "ror\030\002 \001(\0132\023.ubii.general.ErrorH\000\022&\n\006clie"
      "nt\030\003 \001(\0132\024.ubii.clients.ClientH\000\022&\n\006devi"
      "ce\030\004 \001(\0132\024.ubii.devices.DeviceH\000\022&\n\006serv"
      "er\030\005 \001(\0132\024.ubii.servers.ServerH\000\022)\n\007sess"
      "ion\030\006 \001(\0132\026.ubii.sessions.SessionH\000\0222\n\014s"
      "ession_list\030\007 \001(\0132\032.ubii.sessions.Sessio"
      "nListH\000\022>\n\021processing_module\030\010 \001(\0132!.ubi"
      "i.processing.ProcessingModuleH\000\022G\n\026proce"
      "ssing_module_list\030\t \001(\0132%.ubii.processin"
      "g.ProcessingModuleListH\000\0225\n\013string_list\030"
      "\n \001(\0132\036.ubii.dataStructure.StringListH\000\022"
      "+\n\ttopic_mux\030\013 \001(\0132\026.ubii.devices.TopicM"
      "uxH\000\0224\n\016topic_mux_list\030\014 \001(\0132\032.ubii.devi"
      "ces.TopicMuxListH\000\022/\n\013topic_demux\030\r \001(\0132"
      "\030.ubii.devices.TopicDemuxH\000\0228\n\020topic_dem"
      "ux_list\030\016 \001(\0132\034.ubii.devices.TopicDemuxL"
      "istH\000\022/\n\013client_list\030\017 \001(\0132\030.ubii.client"
      "s.ClientListH\000\022/\n\013device_list\030\020 \001(\0132\030.ub"
      "ii.devices.DeviceListH\000\022)\n\007service\030\021 \001(\013"
      "2\026.ubii.services.ServiceH\000\0222\n\014service_li"
      "st\030\022 \001(\0132\032.ubii.services.ServiceListH\000\022M"
      "\n\031lockstep_processing_reply\030\023 \001(\0132(.ubii"
      ".processing.LockstepProcessingReplyH\000B\006\n"
      "\004typeb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/services/serviceReply.proto", &protobuf_RegisterTypes);
  ::protobuf_proto_2fgeneral_2fsuccess_2eproto::AddDescriptors();
  ::protobuf_proto_2fgeneral_2ferror_2eproto::AddDescriptors();
  ::protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto::AddDescriptors();
  ::protobuf_proto_2fclients_2fclient_2eproto::AddDescriptors();
  ::protobuf_proto_2fdevices_2fdevice_2eproto::AddDescriptors();
  ::protobuf_proto_2fdevices_2ftopicMux_2eproto::AddDescriptors();
  ::protobuf_proto_2fdevices_2ftopicDemux_2eproto::AddDescriptors();
  ::protobuf_proto_2fservers_2fserver_2eproto::AddDescriptors();
  ::protobuf_proto_2fsessions_2fsession_2eproto::AddDescriptors();
  ::protobuf_proto_2fservices_2fservice_2eproto::AddDescriptors();
  ::protobuf_proto_2fprocessing_2fprocessingModule_2eproto::AddDescriptors();
  ::protobuf_proto_2fprocessing_2flockstepProcessing_2eproto::AddDescriptors();
}

void AddDescriptors() {
  static ::google::protobuf::internal::once_flag once;
  ::google::protobuf::internal::call_once(once, AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
}  // namespace protobuf_proto_2fservices_2fserviceReply_2eproto
namespace ubii {
namespace services {

// ===================================================================

void ServiceReply::InitAsDefaultInstance() {
  ::ubii::services::_ServiceReply_default_instance_.success_ = const_cast< ::ubii::general::Success*>(
      ::ubii::general::Success::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.error_ = const_cast< ::ubii::general::Error*>(
      ::ubii::general::Error::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.client_ = const_cast< ::ubii::clients::Client*>(
      ::ubii::clients::Client::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.device_ = const_cast< ::ubii::devices::Device*>(
      ::ubii::devices::Device::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.server_ = const_cast< ::ubii::servers::Server*>(
      ::ubii::servers::Server::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.session_ = const_cast< ::ubii::sessions::Session*>(
      ::ubii::sessions::Session::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.session_list_ = const_cast< ::ubii::sessions::SessionList*>(
      ::ubii::sessions::SessionList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.processing_module_ = const_cast< ::ubii::processing::ProcessingModule*>(
      ::ubii::processing::ProcessingModule::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.processing_module_list_ = const_cast< ::ubii::processing::ProcessingModuleList*>(
      ::ubii::processing::ProcessingModuleList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.string_list_ = const_cast< ::ubii::dataStructure::StringList*>(
      ::ubii::dataStructure::StringList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.topic_mux_ = const_cast< ::ubii::devices::TopicMux*>(
      ::ubii::devices::TopicMux::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.topic_mux_list_ = const_cast< ::ubii::devices::TopicMuxList*>(
      ::ubii::devices::TopicMuxList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.topic_demux_ = const_cast< ::ubii::devices::TopicDemux*>(
      ::ubii::devices::TopicDemux::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.topic_demux_list_ = const_cast< ::ubii::devices::TopicDemuxList*>(
      ::ubii::devices::TopicDemuxList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.client_list_ = const_cast< ::ubii::clients::ClientList*>(
      ::ubii::clients::ClientList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.device_list_ = const_cast< ::ubii::devices::DeviceList*>(
      ::ubii::devices::DeviceList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.service_ = const_cast< ::ubii::services::Service*>(
      ::ubii::services::Service::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.service_list_ = const_cast< ::ubii::services::ServiceList*>(
      ::ubii::services::ServiceList::internal_default_instance());
  ::ubii::services::_ServiceReply_default_instance_.lockstep_processing_reply_ = const_cast< ::ubii::processing::LockstepProcessingReply*>(
      ::ubii::processing::LockstepProcessingReply::internal_default_instance());
}
void ServiceReply::set_allocated_success(::ubii::general::Success* success) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (success) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      success = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, success, submessage_arena);
    }
    set_has_success();
    type_.success_ = success;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.success)
}
void ServiceReply::clear_success() {
  if (has_success()) {
    delete type_.success_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_error(::ubii::general::Error* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.error)
}
void ServiceReply::clear_error() {
  if (has_error()) {
    delete type_.error_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_client(::ubii::clients::Client* client) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (client) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client, submessage_arena);
    }
    set_has_client();
    type_.client_ = client;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.client)
}
void ServiceReply::clear_client() {
  if (has_client()) {
    delete type_.client_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_device(::ubii::devices::Device* device) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (device) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device, submessage_arena);
    }
    set_has_device();
    type_.device_ = device;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.device)
}
void ServiceReply::clear_device() {
  if (has_device()) {
    delete type_.device_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_server(::ubii::servers::Server* server) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (server) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      server = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, server, submessage_arena);
    }
    set_has_server();
    type_.server_ = server;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.server)
}
void ServiceReply::clear_server() {
  if (has_server()) {
    delete type_.server_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_session(::ubii::sessions::Session* session) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (session) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    type_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.session)
}
void ServiceReply::clear_session() {
  if (has_session()) {
    delete type_.session_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_session_list(::ubii::sessions::SessionList* session_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (session_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      session_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, session_list, submessage_arena);
    }
    set_has_session_list();
    type_.session_list_ = session_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.session_list)
}
void ServiceReply::clear_session_list() {
  if (has_session_list()) {
    delete type_.session_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_processing_module(::ubii::processing::ProcessingModule* processing_module) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (processing_module) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      processing_module = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, processing_module, submessage_arena);
    }
    set_has_processing_module();
    type_.processing_module_ = processing_module;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.processing_module)
}
void ServiceReply::clear_processing_module() {
  if (has_processing_module()) {
    delete type_.processing_module_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_processing_module_list(::ubii::processing::ProcessingModuleList* processing_module_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (processing_module_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      processing_module_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, processing_module_list, submessage_arena);
    }
    set_has_processing_module_list();
    type_.processing_module_list_ = processing_module_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.processing_module_list)
}
void ServiceReply::clear_processing_module_list() {
  if (has_processing_module_list()) {
    delete type_.processing_module_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_string_list(::ubii::dataStructure::StringList* string_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (string_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      string_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, string_list, submessage_arena);
    }
    set_has_string_list();
    type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.string_list)
}
void ServiceReply::clear_string_list() {
  if (has_string_list()) {
    delete type_.string_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_topic_mux(::ubii::devices::TopicMux* topic_mux) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_mux) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      topic_mux = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic_mux, submessage_arena);
    }
    set_has_topic_mux();
    type_.topic_mux_ = topic_mux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_mux)
}
void ServiceReply::clear_topic_mux() {
  if (has_topic_mux()) {
    delete type_.topic_mux_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_topic_mux_list(::ubii::devices::TopicMuxList* topic_mux_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_mux_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      topic_mux_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic_mux_list, submessage_arena);
    }
    set_has_topic_mux_list();
    type_.topic_mux_list_ = topic_mux_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_mux_list)
}
void ServiceReply::clear_topic_mux_list() {
  if (has_topic_mux_list()) {
    delete type_.topic_mux_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_topic_demux(::ubii::devices::TopicDemux* topic_demux) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_demux) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      topic_demux = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic_demux, submessage_arena);
    }
    set_has_topic_demux();
    type_.topic_demux_ = topic_demux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_demux)
}
void ServiceReply::clear_topic_demux() {
  if (has_topic_demux()) {
    delete type_.topic_demux_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_topic_demux_list(::ubii::devices::TopicDemuxList* topic_demux_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_demux_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      topic_demux_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, topic_demux_list, submessage_arena);
    }
    set_has_topic_demux_list();
    type_.topic_demux_list_ = topic_demux_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_demux_list)
}
void ServiceReply::clear_topic_demux_list() {
  if (has_topic_demux_list()) {
    delete type_.topic_demux_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_client_list(::ubii::clients::ClientList* client_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (client_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      client_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, client_list, submessage_arena);
    }
    set_has_client_list();
    type_.client_list_ = client_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.client_list)
}
void ServiceReply::clear_client_list() {
  if (has_client_list()) {
    delete type_.client_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_device_list(::ubii::devices::DeviceList* device_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (device_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      device_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, device_list, submessage_arena);
    }
    set_has_device_list();
    type_.device_list_ = device_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.device_list)
}
void ServiceReply::clear_device_list() {
  if (has_device_list()) {
    delete type_.device_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_service(::ubii::services::Service* service) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (service) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      service = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service, submessage_arena);
    }
    set_has_service();
    type_.service_ = service;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.service)
}
void ServiceReply::clear_service() {
  if (has_service()) {
    delete type_.service_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_service_list(::ubii::services::ServiceList* service_list) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (service_list) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      service_list = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, service_list, submessage_arena);
    }
    set_has_service_list();
    type_.service_list_ = service_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.service_list)
}
void ServiceReply::clear_service_list() {
  if (has_service_list()) {
    delete type_.service_list_;
    clear_has_type();
  }
}
void ServiceReply::set_allocated_lockstep_processing_reply(::ubii::processing::LockstepProcessingReply* lockstep_processing_reply) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (lockstep_processing_reply) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      lockstep_processing_reply = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, lockstep_processing_reply, submessage_arena);
    }
    set_has_lockstep_processing_reply();
    type_.lockstep_processing_reply_ = lockstep_processing_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.lockstep_processing_reply)
}
void ServiceReply::clear_lockstep_processing_reply() {
  if (has_lockstep_processing_reply()) {
    delete type_.lockstep_processing_reply_;
    clear_has_type();
  }
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceReply::kSuccessFieldNumber;
const int ServiceReply::kErrorFieldNumber;
const int ServiceReply::kClientFieldNumber;
const int ServiceReply::kDeviceFieldNumber;
const int ServiceReply::kServerFieldNumber;
const int ServiceReply::kSessionFieldNumber;
const int ServiceReply::kSessionListFieldNumber;
const int ServiceReply::kProcessingModuleFieldNumber;
const int ServiceReply::kProcessingModuleListFieldNumber;
const int ServiceReply::kStringListFieldNumber;
const int ServiceReply::kTopicMuxFieldNumber;
const int ServiceReply::kTopicMuxListFieldNumber;
const int ServiceReply::kTopicDemuxFieldNumber;
const int ServiceReply::kTopicDemuxListFieldNumber;
const int ServiceReply::kClientListFieldNumber;
const int ServiceReply::kDeviceListFieldNumber;
const int ServiceReply::kServiceFieldNumber;
const int ServiceReply::kServiceListFieldNumber;
const int ServiceReply::kLockstepProcessingReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceReply::ServiceReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_proto_2fservices_2fserviceReply_2eproto::scc_info_ServiceReply.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.services.ServiceReply)
}
ServiceReply::ServiceReply(const ServiceReply& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kSuccess: {
      mutable_success()->::ubii::general::Success::MergeFrom(from.success());
      break;
    }
    case kError: {
      mutable_error()->::ubii::general::Error::MergeFrom(from.error());
      break;
    }
    case kClient: {
      mutable_client()->::ubii::clients::Client::MergeFrom(from.client());
      break;
    }
    case kDevice: {
      mutable_device()->::ubii::devices::Device::MergeFrom(from.device());
      break;
    }
    case kServer: {
      mutable_server()->::ubii::servers::Server::MergeFrom(from.server());
      break;
    }
    case kSession: {
      mutable_session()->::ubii::sessions::Session::MergeFrom(from.session());
      break;
    }
    case kSessionList: {
      mutable_session_list()->::ubii::sessions::SessionList::MergeFrom(from.session_list());
      break;
    }
    case kProcessingModule: {
      mutable_processing_module()->::ubii::processing::ProcessingModule::MergeFrom(from.processing_module());
      break;
    }
    case kProcessingModuleList: {
      mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from.processing_module_list());
      break;
    }
    case kStringList: {
      mutable_string_list()->::ubii::dataStructure::StringList::MergeFrom(from.string_list());
      break;
    }
    case kTopicMux: {
      mutable_topic_mux()->::ubii::devices::TopicMux::MergeFrom(from.topic_mux());
      break;
    }
    case kTopicMuxList: {
      mutable_topic_mux_list()->::ubii::devices::TopicMuxList::MergeFrom(from.topic_mux_list());
      break;
    }
    case kTopicDemux: {
      mutable_topic_demux()->::ubii::devices::TopicDemux::MergeFrom(from.topic_demux());
      break;
    }
    case kTopicDemuxList: {
      mutable_topic_demux_list()->::ubii::devices::TopicDemuxList::MergeFrom(from.topic_demux_list());
      break;
    }
    case kClientList: {
      mutable_client_list()->::ubii::clients::ClientList::MergeFrom(from.client_list());
      break;
    }
    case kDeviceList: {
      mutable_device_list()->::ubii::devices::DeviceList::MergeFrom(from.device_list());
      break;
    }
    case kService: {
      mutable_service()->::ubii::services::Service::MergeFrom(from.service());
      break;
    }
    case kServiceList: {
      mutable_service_list()->::ubii::services::ServiceList::MergeFrom(from.service_list());
      break;
    }
    case kLockstepProcessingReply: {
      mutable_lockstep_processing_reply()->::ubii::processing::LockstepProcessingReply::MergeFrom(from.lockstep_processing_reply());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ubii.services.ServiceReply)
}

void ServiceReply::SharedCtor() {
  clear_has_type();
}

ServiceReply::~ServiceReply() {
  // @@protoc_insertion_point(destructor:ubii.services.ServiceReply)
  SharedDtor();
}

void ServiceReply::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void ServiceReply::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ::google::protobuf::Descriptor* ServiceReply::descriptor() {
  ::protobuf_proto_2fservices_2fserviceReply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fservices_2fserviceReply_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ServiceReply& ServiceReply::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_proto_2fservices_2fserviceReply_2eproto::scc_info_ServiceReply.base);
  return *internal_default_instance();
}


void ServiceReply::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.services.ServiceReply)
  switch (type_case()) {
    case kSuccess: {
      delete type_.success_;
      break;
    }
    case kError: {
      delete type_.error_;
      break;
    }
    case kClient: {
      delete type_.client_;
      break;
    }
    case kDevice: {
      delete type_.device_;
      break;
    }
    case kServer: {
      delete type_.server_;
      break;
    }
    case kSession: {
      delete type_.session_;
      break;
    }
    case kSessionList: {
      delete type_.session_list_;
      break;
    }
    case kProcessingModule: {
      delete type_.processing_module_;
      break;
    }
    case kProcessingModuleList: {
      delete type_.processing_module_list_;
      break;
    }
    case kStringList: {
      delete type_.string_list_;
      break;
    }
    case kTopicMux: {
      delete type_.topic_mux_;
      break;
    }
    case kTopicMuxList: {
      delete type_.topic_mux_list_;
      break;
    }
    case kTopicDemux: {
      delete type_.topic_demux_;
      break;
    }
    case kTopicDemuxList: {
      delete type_.topic_demux_list_;
      break;
    }
    case kClientList: {
      delete type_.client_list_;
      break;
    }
    case kDeviceList: {
      delete type_.device_list_;
      break;
    }
    case kService: {
      delete type_.service_;
      break;
    }
    case kServiceList: {
      delete type_.service_list_;
      break;
    }
    case kLockstepProcessingReply: {
      delete type_.lockstep_processing_reply_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ServiceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.services.ServiceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

bool ServiceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.services.ServiceReply)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(16383u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ubii.general.Success success = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.general.Error error = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.clients.Client client = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.devices.Device device = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.servers.Server server = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.sessions.Session session = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.sessions.SessionList session_list = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_session_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.processing.ProcessingModule processing_module = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processing_module()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.processing.ProcessingModuleList processing_module_list = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u /* 74 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_processing_module_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.dataStructure.StringList string_list = 10;
      case 10: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(82u /* 82 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_string_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.devices.TopicMux topic_mux = 11;
      case 11: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(90u /* 90 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic_mux()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.devices.TopicMuxList topic_mux_list = 12;
      case 12: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(98u /* 98 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic_mux_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.devices.TopicDemux topic_demux = 13;
      case 13: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(106u /* 106 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic_demux()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.devices.TopicDemuxList topic_demux_list = 14;
      case 14: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(114u /* 114 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_topic_demux_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.clients.ClientList client_list = 15;
      case 15: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(122u /* 122 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_client_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.devices.DeviceList device_list = 16;
      case 16: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(130u /* 130 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_device_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.services.Service service = 17;
      case 17: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(138u /* 138 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.services.ServiceList service_list = 18;
      case 18: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(146u /* 146 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_service_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
      case 19: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(154u /* 154 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_lockstep_processing_reply()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.services.ServiceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.services.ServiceReply)
  return false;
#undef DO_
}

void ServiceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.services.ServiceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ubii.general.Success success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->_internal_success(), output);
  }

  // .ubii.general.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->_internal_error(), output);
  }

  // .ubii.clients.Client client = 3;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->_internal_client(), output);
  }

  // .ubii.devices.Device device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->_internal_device(), output);
  }

  // .ubii.servers.Server server = 5;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->_internal_server(), output);
  }

  // .ubii.sessions.Session session = 6;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->_internal_session(), output);
  }

  // .ubii.sessions.SessionList session_list = 7;
  if (has_session_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->_internal_session_list(), output);
  }

  // .ubii.processing.ProcessingModule processing_module = 8;
  if (has_processing_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->_internal_processing_module(), output);
  }

  // .ubii.processing.ProcessingModuleList processing_module_list = 9;
  if (has_processing_module_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->_internal_processing_module_list(), output);
  }

  // .ubii.dataStructure.StringList string_list = 10;
  if (has_string_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->_internal_string_list(), output);
  }

  // .ubii.devices.TopicMux topic_mux = 11;
  if (has_topic_mux()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->_internal_topic_mux(), output);
  }

  // .ubii.devices.TopicMuxList topic_mux_list = 12;
  if (has_topic_mux_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->_internal_topic_mux_list(), output);
  }

  // .ubii.devices.TopicDemux topic_demux = 13;
  if (has_topic_demux()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->_internal_topic_demux(), output);
  }

  // .ubii.devices.TopicDemuxList topic_demux_list = 14;
  if (has_topic_demux_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->_internal_topic_demux_list(), output);
  }

  // .ubii.clients.ClientList client_list = 15;
  if (has_client_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->_internal_client_list(), output);
  }

  // .ubii.devices.DeviceList device_list = 16;
  if (has_device_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->_internal_device_list(), output);
  }

  // .ubii.services.Service service = 17;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->_internal_service(), output);
  }

  // .ubii.services.ServiceList service_list = 18;
  if (has_service_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->_internal_service_list(), output);
  }

  // .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
  if (has_lockstep_processing_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->_internal_lockstep_processing_reply(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ubii.services.ServiceReply)
}

::google::protobuf::uint8* ServiceReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ubii.services.ServiceReply)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ubii.general.Success success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, this->_internal_success(), deterministic, target);
  }

  // .ubii.general.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        2, this->_internal_error(), deterministic, target);
  }

  // .ubii.clients.Client client = 3;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        3, this->_internal_client(), deterministic, target);
  }

  // .ubii.devices.Device device = 4;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        4, this->_internal_device(), deterministic, target);
  }

  // .ubii.servers.Server server = 5;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        5, this->_internal_server(), deterministic, target);
  }

  // .ubii.sessions.Session session = 6;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        6, this->_internal_session(), deterministic, target);
  }

  // .ubii.sessions.SessionList session_list = 7;
  if (has_session_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        7, this->_internal_session_list(), deterministic, target);
  }

  // .ubii.processing.ProcessingModule processing_module = 8;
  if (has_processing_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        8, this->_internal_processing_module(), deterministic, target);
  }

  // .ubii.processing.ProcessingModuleList processing_module_list = 9;
  if (has_processing_module_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        9, this->_internal_processing_module_list(), deterministic, target);
  }

  // .ubii.dataStructure.StringList string_list = 10;
  if (has_string_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        10, this->_internal_string_list(), deterministic, target);
  }

  // .ubii.devices.TopicMux topic_mux = 11;
  if (has_topic_mux()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        11, this->_internal_topic_mux(), deterministic, target);
  }

  // .ubii.devices.TopicMuxList topic_mux_list = 12;
  if (has_topic_mux_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        12, this->_internal_topic_mux_list(), deterministic, target);
  }

  // .ubii.devices.TopicDemux topic_demux = 13;
  if (has_topic_demux()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        13, this->_internal_topic_demux(), deterministic, target);
  }

  // .ubii.devices.TopicDemuxList topic_demux_list = 14;
  if (has_topic_demux_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        14, this->_internal_topic_demux_list(), deterministic, target);
  }

  // .ubii.clients.ClientList client_list = 15;
  if (has_client_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        15, this->_internal_client_list(), deterministic, target);
  }

  // .ubii.devices.DeviceList device_list = 16;
  if (has_device_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        16, this->_internal_device_list(), deterministic, target);
  }

  // .ubii.services.Service service = 17;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        17, this->_internal_service(), deterministic, target);
  }

  // .ubii.services.ServiceList service_list = 18;
  if (has_service_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        18, this->_internal_service_list(), deterministic, target);
  }

  // .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
  if (has_lockstep_processing_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageToArray(
        19, this->_internal_lockstep_processing_reply(), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.services.ServiceReply)
  return target;
}

size_t ServiceReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.services.ServiceReply)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  switch (type_case()) {
    // .ubii.general.Success success = 1;
    case kSuccess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.success_);
      break;
    }
    // .ubii.general.Error error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.error_);
      break;
    }
    // .ubii.clients.Client client = 3;
    case kClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.client_);
      break;
    }
    // .ubii.devices.Device device = 4;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.device_);
      break;
    }
    // .ubii.servers.Server server = 5;
    case kServer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.server_);
      break;
    }
    // .ubii.sessions.Session session = 6;
    case kSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.session_);
      break;
    }
    // .ubii.sessions.SessionList session_list = 7;
    case kSessionList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.session_list_);
      break;
    }
    // .ubii.processing.ProcessingModule processing_module = 8;
    case kProcessingModule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.processing_module_);
      break;
    }
    // .ubii.processing.ProcessingModuleList processing_module_list = 9;
    case kProcessingModuleList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.processing_module_list_);
      break;
    }
    // .ubii.dataStructure.StringList string_list = 10;
    case kStringList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.string_list_);
      break;
    }
    // .ubii.devices.TopicMux topic_mux = 11;
    case kTopicMux: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.topic_mux_);
      break;
    }
    // .ubii.devices.TopicMuxList topic_mux_list = 12;
    case kTopicMuxList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.topic_mux_list_);
      break;
    }
    // .ubii.devices.TopicDemux topic_demux = 13;
    case kTopicDemux: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.topic_demux_);
      break;
    }
    // .ubii.devices.TopicDemuxList topic_demux_list = 14;
    case kTopicDemuxList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.topic_demux_list_);
      break;
    }
    // .ubii.clients.ClientList client_list = 15;
    case kClientList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.client_list_);
      break;
    }
    // .ubii.devices.DeviceList device_list = 16;
    case kDeviceList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.device_list_);
      break;
    }
    // .ubii.services.Service service = 17;
    case kService: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.service_);
      break;
    }
    // .ubii.services.ServiceList service_list = 18;
    case kServiceList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.service_list_);
      break;
    }
    // .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
    case kLockstepProcessingReply: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *type_.lockstep_processing_reply_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ServiceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.services.ServiceReply)
  GOOGLE_DCHECK_NE(&from, this);
  const ServiceReply* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.services.ServiceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.services.ServiceReply)
    MergeFrom(*source);
  }
}

void ServiceReply::MergeFrom(const ServiceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.services.ServiceReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kSuccess: {
      mutable_success()->::ubii::general::Success::MergeFrom(from.success());
      break;
    }
    case kError: {
      mutable_error()->::ubii::general::Error::MergeFrom(from.error());
      break;
    }
    case kClient: {
      mutable_client()->::ubii::clients::Client::MergeFrom(from.client());
      break;
    }
    case kDevice: {
      mutable_device()->::ubii::devices::Device::MergeFrom(from.device());
      break;
    }
    case kServer: {
      mutable_server()->::ubii::servers::Server::MergeFrom(from.server());
      break;
    }
    case kSession: {
      mutable_session()->::ubii::sessions::Session::MergeFrom(from.session());
      break;
    }
    case kSessionList: {
      mutable_session_list()->::ubii::sessions::SessionList::MergeFrom(from.session_list());
      break;
    }
    case kProcessingModule: {
      mutable_processing_module()->::ubii::processing::ProcessingModule::MergeFrom(from.processing_module());
      break;
    }
    case kProcessingModuleList: {
      mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from.processing_module_list());
      break;
    }
    case kStringList: {
      mutable_string_list()->::ubii::dataStructure::StringList::MergeFrom(from.string_list());
      break;
    }
    case kTopicMux: {
      mutable_topic_mux()->::ubii::devices::TopicMux::MergeFrom(from.topic_mux());
      break;
    }
    case kTopicMuxList: {
      mutable_topic_mux_list()->::ubii::devices::TopicMuxList::MergeFrom(from.topic_mux_list());
      break;
    }
    case kTopicDemux: {
      mutable_topic_demux()->::ubii::devices::TopicDemux::MergeFrom(from.topic_demux());
      break;
    }
    case kTopicDemuxList: {
      mutable_topic_demux_list()->::ubii::devices::TopicDemuxList::MergeFrom(from.topic_demux_list());
      break;
    }
    case kClientList: {
      mutable_client_list()->::ubii::clients::ClientList::MergeFrom(from.client_list());
      break;
    }
    case kDeviceList: {
      mutable_device_list()->::ubii::devices::DeviceList::MergeFrom(from.device_list());
      break;
    }
    case kService: {
      mutable_service()->::ubii::services::Service::MergeFrom(from.service());
      break;
    }
    case kServiceList: {
      mutable_service_list()->::ubii::services::ServiceList::MergeFrom(from.service_list());
      break;
    }
    case kLockstepProcessingReply: {
      mutable_lockstep_processing_reply()->::ubii::processing::LockstepProcessingReply::MergeFrom(from.lockstep_processing_reply());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void ServiceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.services.ServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReply::CopyFrom(const ServiceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.services.ServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReply::IsInitialized() const {
  return true;
}

void ServiceReply::Swap(ServiceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceReply::InternalSwap(ServiceReply* other) {
  using std::swap;
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::google::protobuf::Metadata ServiceReply::GetMetadata() const {
  protobuf_proto_2fservices_2fserviceReply_2eproto::protobuf_AssignDescriptorsOnce();
  return ::protobuf_proto_2fservices_2fserviceReply_2eproto::file_level_metadata[kIndexInFileMessages];
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace services
}  // namespace ubii
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::ubii::services::ServiceReply* Arena::CreateMaybeMessage< ::ubii::services::ServiceReply >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::services::ServiceReply >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
