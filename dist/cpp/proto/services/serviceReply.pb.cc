// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/serviceReply.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/services/serviceReply.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace services {

namespace {

const ::google::protobuf::Descriptor* ServiceReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceReply_reflection_ = NULL;
struct ServiceReplyOneofInstance {
  const ::ubii::general::Success* success_;
  const ::ubii::general::Error* error_;
  const ::ubii::clients::Client* client_;
  const ::ubii::devices::Device* device_;
  const ::ubii::servers::Server* server_;
  const ::ubii::sessions::Session* session_;
  const ::ubii::sessions::SessionList* session_list_;
  const ::ubii::processing::ProcessingModule* processing_module_;
  const ::ubii::processing::ProcessingModuleList* processing_module_list_;
  const ::ubii::dataStructure::StringList* string_list_;
  const ::ubii::devices::TopicMux* topic_mux_;
  const ::ubii::devices::TopicMuxList* topic_mux_list_;
  const ::ubii::devices::TopicDemux* topic_demux_;
  const ::ubii::devices::TopicDemuxList* topic_demux_list_;
  const ::ubii::clients::ClientList* client_list_;
  const ::ubii::devices::DeviceList* device_list_;
  const ::ubii::services::Service* service_;
  const ::ubii::services::ServiceList* service_list_;
  const ::ubii::processing::LockstepProcessingReply* lockstep_processing_reply_;
}* ServiceReply_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fservices_2fserviceReply_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fservices_2fserviceReply_2eproto() {
  protobuf_AddDesc_proto_2fservices_2fserviceReply_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/services/serviceReply.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceReply_descriptor_ = file->message_type(0);
  static const int ServiceReply_offsets_[20] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, success_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, error_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, client_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, server_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, session_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, processing_module_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, processing_module_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, string_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, topic_mux_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, topic_mux_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, topic_demux_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, topic_demux_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, client_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, device_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, service_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, service_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceReply_default_oneof_instance_, lockstep_processing_reply_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, type_),
  };
  ServiceReply_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceReply_descriptor_,
      ServiceReply::default_instance_,
      ServiceReply_offsets_,
      -1,
      -1,
      -1,
      ServiceReply_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, _oneof_case_[0]),
      sizeof(ServiceReply),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceReply, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fservices_2fserviceReply_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceReply_descriptor_, &ServiceReply::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fservices_2fserviceReply_2eproto() {
  delete ServiceReply::default_instance_;
  delete ServiceReply_default_oneof_instance_;
  delete ServiceReply_reflection_;
}

void protobuf_AddDesc_proto_2fservices_2fserviceReply_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fservices_2fserviceReply_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ubii::general::protobuf_AddDesc_proto_2fgeneral_2fsuccess_2eproto();
  ::ubii::general::protobuf_AddDesc_proto_2fgeneral_2ferror_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto();
  ::ubii::clients::protobuf_AddDesc_proto_2fclients_2fclient_2eproto();
  ::ubii::devices::protobuf_AddDesc_proto_2fdevices_2fdevice_2eproto();
  ::ubii::devices::protobuf_AddDesc_proto_2fdevices_2ftopicMux_2eproto();
  ::ubii::devices::protobuf_AddDesc_proto_2fdevices_2ftopicDemux_2eproto();
  ::ubii::servers::protobuf_AddDesc_proto_2fservers_2fserver_2eproto();
  ::ubii::sessions::protobuf_AddDesc_proto_2fsessions_2fsession_2eproto();
  ::ubii::services::protobuf_AddDesc_proto_2fservices_2fservice_2eproto();
  ::ubii::processing::protobuf_AddDesc_proto_2fprocessing_2fprocessingModule_2eproto();
  ::ubii::processing::protobuf_AddDesc_proto_2fprocessing_2flockstepProcessing_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n!proto/services/serviceReply.proto\022\rubi"
    "i.services\032\033proto/general/success.proto\032"
    "\031proto/general/error.proto\0329proto/topicD"
    "ata/topicDataRecord/dataStructure/lists."
    "proto\032\032proto/clients/client.proto\032\032proto"
    "/devices/device.proto\032\034proto/devices/top"
    "icMux.proto\032\036proto/devices/topicDemux.pr"
    "oto\032\032proto/servers/server.proto\032\034proto/s"
    "essions/session.proto\032\034proto/services/se"
    "rvice.proto\032\'proto/processing/processing"
    "Module.proto\032)proto/processing/lockstepP"
    "rocessing.proto\"\333\007\n\014ServiceReply\022(\n\007succ"
    "ess\030\001 \001(\0132\025.ubii.general.SuccessH\000\022$\n\005er"
    "ror\030\002 \001(\0132\023.ubii.general.ErrorH\000\022&\n\006clie"
    "nt\030\003 \001(\0132\024.ubii.clients.ClientH\000\022&\n\006devi"
    "ce\030\004 \001(\0132\024.ubii.devices.DeviceH\000\022&\n\006serv"
    "er\030\005 \001(\0132\024.ubii.servers.ServerH\000\022)\n\007sess"
    "ion\030\006 \001(\0132\026.ubii.sessions.SessionH\000\0222\n\014s"
    "ession_list\030\007 \001(\0132\032.ubii.sessions.Sessio"
    "nListH\000\022>\n\021processing_module\030\010 \001(\0132!.ubi"
    "i.processing.ProcessingModuleH\000\022G\n\026proce"
    "ssing_module_list\030\t \001(\0132%.ubii.processin"
    "g.ProcessingModuleListH\000\0225\n\013string_list\030"
    "\n \001(\0132\036.ubii.dataStructure.StringListH\000\022"
    "+\n\ttopic_mux\030\013 \001(\0132\026.ubii.devices.TopicM"
    "uxH\000\0224\n\016topic_mux_list\030\014 \001(\0132\032.ubii.devi"
    "ces.TopicMuxListH\000\022/\n\013topic_demux\030\r \001(\0132"
    "\030.ubii.devices.TopicDemuxH\000\0228\n\020topic_dem"
    "ux_list\030\016 \001(\0132\034.ubii.devices.TopicDemuxL"
    "istH\000\022/\n\013client_list\030\017 \001(\0132\030.ubii.client"
    "s.ClientListH\000\022/\n\013device_list\030\020 \001(\0132\030.ub"
    "ii.devices.DeviceListH\000\022)\n\007service\030\021 \001(\013"
    "2\026.ubii.services.ServiceH\000\0222\n\014service_li"
    "st\030\022 \001(\0132\032.ubii.services.ServiceListH\000\022M"
    "\n\031lockstep_processing_reply\030\023 \001(\0132(.ubii"
    ".processing.LockstepProcessingReplyH\000B\006\n"
    "\004typeb\006proto3", 1453);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/services/serviceReply.proto", &protobuf_RegisterTypes);
  ServiceReply::default_instance_ = new ServiceReply();
  ServiceReply_default_oneof_instance_ = new ServiceReplyOneofInstance();
  ServiceReply::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fservices_2fserviceReply_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fservices_2fserviceReply_2eproto {
  StaticDescriptorInitializer_proto_2fservices_2fserviceReply_2eproto() {
    protobuf_AddDesc_proto_2fservices_2fserviceReply_2eproto();
  }
} static_descriptor_initializer_proto_2fservices_2fserviceReply_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceReply::kSuccessFieldNumber;
const int ServiceReply::kErrorFieldNumber;
const int ServiceReply::kClientFieldNumber;
const int ServiceReply::kDeviceFieldNumber;
const int ServiceReply::kServerFieldNumber;
const int ServiceReply::kSessionFieldNumber;
const int ServiceReply::kSessionListFieldNumber;
const int ServiceReply::kProcessingModuleFieldNumber;
const int ServiceReply::kProcessingModuleListFieldNumber;
const int ServiceReply::kStringListFieldNumber;
const int ServiceReply::kTopicMuxFieldNumber;
const int ServiceReply::kTopicMuxListFieldNumber;
const int ServiceReply::kTopicDemuxFieldNumber;
const int ServiceReply::kTopicDemuxListFieldNumber;
const int ServiceReply::kClientListFieldNumber;
const int ServiceReply::kDeviceListFieldNumber;
const int ServiceReply::kServiceFieldNumber;
const int ServiceReply::kServiceListFieldNumber;
const int ServiceReply::kLockstepProcessingReplyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceReply::ServiceReply()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.services.ServiceReply)
}

void ServiceReply::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ServiceReply_default_oneof_instance_->success_ = const_cast< ::ubii::general::Success*>(&::ubii::general::Success::default_instance());
  ServiceReply_default_oneof_instance_->error_ = const_cast< ::ubii::general::Error*>(&::ubii::general::Error::default_instance());
  ServiceReply_default_oneof_instance_->client_ = const_cast< ::ubii::clients::Client*>(&::ubii::clients::Client::default_instance());
  ServiceReply_default_oneof_instance_->device_ = const_cast< ::ubii::devices::Device*>(&::ubii::devices::Device::default_instance());
  ServiceReply_default_oneof_instance_->server_ = const_cast< ::ubii::servers::Server*>(&::ubii::servers::Server::default_instance());
  ServiceReply_default_oneof_instance_->session_ = const_cast< ::ubii::sessions::Session*>(&::ubii::sessions::Session::default_instance());
  ServiceReply_default_oneof_instance_->session_list_ = const_cast< ::ubii::sessions::SessionList*>(&::ubii::sessions::SessionList::default_instance());
  ServiceReply_default_oneof_instance_->processing_module_ = const_cast< ::ubii::processing::ProcessingModule*>(&::ubii::processing::ProcessingModule::default_instance());
  ServiceReply_default_oneof_instance_->processing_module_list_ = const_cast< ::ubii::processing::ProcessingModuleList*>(&::ubii::processing::ProcessingModuleList::default_instance());
  ServiceReply_default_oneof_instance_->string_list_ = const_cast< ::ubii::dataStructure::StringList*>(&::ubii::dataStructure::StringList::default_instance());
  ServiceReply_default_oneof_instance_->topic_mux_ = const_cast< ::ubii::devices::TopicMux*>(&::ubii::devices::TopicMux::default_instance());
  ServiceReply_default_oneof_instance_->topic_mux_list_ = const_cast< ::ubii::devices::TopicMuxList*>(&::ubii::devices::TopicMuxList::default_instance());
  ServiceReply_default_oneof_instance_->topic_demux_ = const_cast< ::ubii::devices::TopicDemux*>(&::ubii::devices::TopicDemux::default_instance());
  ServiceReply_default_oneof_instance_->topic_demux_list_ = const_cast< ::ubii::devices::TopicDemuxList*>(&::ubii::devices::TopicDemuxList::default_instance());
  ServiceReply_default_oneof_instance_->client_list_ = const_cast< ::ubii::clients::ClientList*>(&::ubii::clients::ClientList::default_instance());
  ServiceReply_default_oneof_instance_->device_list_ = const_cast< ::ubii::devices::DeviceList*>(&::ubii::devices::DeviceList::default_instance());
  ServiceReply_default_oneof_instance_->service_ = const_cast< ::ubii::services::Service*>(&::ubii::services::Service::default_instance());
  ServiceReply_default_oneof_instance_->service_list_ = const_cast< ::ubii::services::ServiceList*>(&::ubii::services::ServiceList::default_instance());
  ServiceReply_default_oneof_instance_->lockstep_processing_reply_ = const_cast< ::ubii::processing::LockstepProcessingReply*>(&::ubii::processing::LockstepProcessingReply::default_instance());
}

ServiceReply::ServiceReply(const ServiceReply& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.services.ServiceReply)
}

void ServiceReply::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_type();
}

ServiceReply::~ServiceReply() {
  // @@protoc_insertion_point(destructor:ubii.services.ServiceReply)
  SharedDtor();
}

void ServiceReply::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
  if (this != default_instance_) {
  }
}

void ServiceReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceReply_descriptor_;
}

const ServiceReply& ServiceReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservices_2fserviceReply_2eproto();
  return *default_instance_;
}

ServiceReply* ServiceReply::default_instance_ = NULL;

ServiceReply* ServiceReply::New(::google::protobuf::Arena* arena) const {
  ServiceReply* n = new ServiceReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceReply::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.services.ServiceReply)
  switch(type_case()) {
    case kSuccess: {
      delete type_.success_;
      break;
    }
    case kError: {
      delete type_.error_;
      break;
    }
    case kClient: {
      delete type_.client_;
      break;
    }
    case kDevice: {
      delete type_.device_;
      break;
    }
    case kServer: {
      delete type_.server_;
      break;
    }
    case kSession: {
      delete type_.session_;
      break;
    }
    case kSessionList: {
      delete type_.session_list_;
      break;
    }
    case kProcessingModule: {
      delete type_.processing_module_;
      break;
    }
    case kProcessingModuleList: {
      delete type_.processing_module_list_;
      break;
    }
    case kStringList: {
      delete type_.string_list_;
      break;
    }
    case kTopicMux: {
      delete type_.topic_mux_;
      break;
    }
    case kTopicMuxList: {
      delete type_.topic_mux_list_;
      break;
    }
    case kTopicDemux: {
      delete type_.topic_demux_;
      break;
    }
    case kTopicDemuxList: {
      delete type_.topic_demux_list_;
      break;
    }
    case kClientList: {
      delete type_.client_list_;
      break;
    }
    case kDeviceList: {
      delete type_.device_list_;
      break;
    }
    case kService: {
      delete type_.service_;
      break;
    }
    case kServiceList: {
      delete type_.service_list_;
      break;
    }
    case kLockstepProcessingReply: {
      delete type_.lockstep_processing_reply_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ServiceReply::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.services.ServiceReply)
  clear_type();
}

bool ServiceReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.services.ServiceReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ubii.general.Success success = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_success()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_error;
        break;
      }

      // optional .ubii.general.Error error = 2;
      case 2: {
        if (tag == 18) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_client;
        break;
      }

      // optional .ubii.clients.Client client = 3;
      case 3: {
        if (tag == 26) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_device;
        break;
      }

      // optional .ubii.devices.Device device = 4;
      case 4: {
        if (tag == 34) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_server;
        break;
      }

      // optional .ubii.servers.Server server = 5;
      case 5: {
        if (tag == 42) {
         parse_server:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_server()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_session;
        break;
      }

      // optional .ubii.sessions.Session session = 6;
      case 6: {
        if (tag == 50) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_session_list;
        break;
      }

      // optional .ubii.sessions.SessionList session_list = 7;
      case 7: {
        if (tag == 58) {
         parse_session_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_processing_module;
        break;
      }

      // optional .ubii.processing.ProcessingModule processing_module = 8;
      case 8: {
        if (tag == 66) {
         parse_processing_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_processing_module_list;
        break;
      }

      // optional .ubii.processing.ProcessingModuleList processing_module_list = 9;
      case 9: {
        if (tag == 74) {
         parse_processing_module_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing_module_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_string_list;
        break;
      }

      // optional .ubii.dataStructure.StringList string_list = 10;
      case 10: {
        if (tag == 82) {
         parse_string_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_topic_mux;
        break;
      }

      // optional .ubii.devices.TopicMux topic_mux = 11;
      case 11: {
        if (tag == 90) {
         parse_topic_mux:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_mux()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_topic_mux_list;
        break;
      }

      // optional .ubii.devices.TopicMuxList topic_mux_list = 12;
      case 12: {
        if (tag == 98) {
         parse_topic_mux_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_mux_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_topic_demux;
        break;
      }

      // optional .ubii.devices.TopicDemux topic_demux = 13;
      case 13: {
        if (tag == 106) {
         parse_topic_demux:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_demux()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_topic_demux_list;
        break;
      }

      // optional .ubii.devices.TopicDemuxList topic_demux_list = 14;
      case 14: {
        if (tag == 114) {
         parse_topic_demux_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_demux_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_client_list;
        break;
      }

      // optional .ubii.clients.ClientList client_list = 15;
      case 15: {
        if (tag == 122) {
         parse_client_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_device_list;
        break;
      }

      // optional .ubii.devices.DeviceList device_list = 16;
      case 16: {
        if (tag == 130) {
         parse_device_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_service;
        break;
      }

      // optional .ubii.services.Service service = 17;
      case 17: {
        if (tag == 138) {
         parse_service:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_service_list;
        break;
      }

      // optional .ubii.services.ServiceList service_list = 18;
      case 18: {
        if (tag == 146) {
         parse_service_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_service_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_lockstep_processing_reply;
        break;
      }

      // optional .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
      case 19: {
        if (tag == 154) {
         parse_lockstep_processing_reply:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lockstep_processing_reply()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.services.ServiceReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.services.ServiceReply)
  return false;
#undef DO_
}

void ServiceReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.services.ServiceReply)
  // optional .ubii.general.Success success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *type_.success_, output);
  }

  // optional .ubii.general.Error error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.error_, output);
  }

  // optional .ubii.clients.Client client = 3;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.client_, output);
  }

  // optional .ubii.devices.Device device = 4;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.device_, output);
  }

  // optional .ubii.servers.Server server = 5;
  if (has_server()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *type_.server_, output);
  }

  // optional .ubii.sessions.Session session = 6;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *type_.session_, output);
  }

  // optional .ubii.sessions.SessionList session_list = 7;
  if (has_session_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *type_.session_list_, output);
  }

  // optional .ubii.processing.ProcessingModule processing_module = 8;
  if (has_processing_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *type_.processing_module_, output);
  }

  // optional .ubii.processing.ProcessingModuleList processing_module_list = 9;
  if (has_processing_module_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *type_.processing_module_list_, output);
  }

  // optional .ubii.dataStructure.StringList string_list = 10;
  if (has_string_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *type_.string_list_, output);
  }

  // optional .ubii.devices.TopicMux topic_mux = 11;
  if (has_topic_mux()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *type_.topic_mux_, output);
  }

  // optional .ubii.devices.TopicMuxList topic_mux_list = 12;
  if (has_topic_mux_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *type_.topic_mux_list_, output);
  }

  // optional .ubii.devices.TopicDemux topic_demux = 13;
  if (has_topic_demux()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *type_.topic_demux_, output);
  }

  // optional .ubii.devices.TopicDemuxList topic_demux_list = 14;
  if (has_topic_demux_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *type_.topic_demux_list_, output);
  }

  // optional .ubii.clients.ClientList client_list = 15;
  if (has_client_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *type_.client_list_, output);
  }

  // optional .ubii.devices.DeviceList device_list = 16;
  if (has_device_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *type_.device_list_, output);
  }

  // optional .ubii.services.Service service = 17;
  if (has_service()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *type_.service_, output);
  }

  // optional .ubii.services.ServiceList service_list = 18;
  if (has_service_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *type_.service_list_, output);
  }

  // optional .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
  if (has_lockstep_processing_reply()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *type_.lockstep_processing_reply_, output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.services.ServiceReply)
}

::google::protobuf::uint8* ServiceReply::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.services.ServiceReply)
  // optional .ubii.general.Success success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *type_.success_, false, target);
  }

  // optional .ubii.general.Error error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.error_, false, target);
  }

  // optional .ubii.clients.Client client = 3;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *type_.client_, false, target);
  }

  // optional .ubii.devices.Device device = 4;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *type_.device_, false, target);
  }

  // optional .ubii.servers.Server server = 5;
  if (has_server()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *type_.server_, false, target);
  }

  // optional .ubii.sessions.Session session = 6;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *type_.session_, false, target);
  }

  // optional .ubii.sessions.SessionList session_list = 7;
  if (has_session_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *type_.session_list_, false, target);
  }

  // optional .ubii.processing.ProcessingModule processing_module = 8;
  if (has_processing_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *type_.processing_module_, false, target);
  }

  // optional .ubii.processing.ProcessingModuleList processing_module_list = 9;
  if (has_processing_module_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *type_.processing_module_list_, false, target);
  }

  // optional .ubii.dataStructure.StringList string_list = 10;
  if (has_string_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *type_.string_list_, false, target);
  }

  // optional .ubii.devices.TopicMux topic_mux = 11;
  if (has_topic_mux()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *type_.topic_mux_, false, target);
  }

  // optional .ubii.devices.TopicMuxList topic_mux_list = 12;
  if (has_topic_mux_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *type_.topic_mux_list_, false, target);
  }

  // optional .ubii.devices.TopicDemux topic_demux = 13;
  if (has_topic_demux()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *type_.topic_demux_, false, target);
  }

  // optional .ubii.devices.TopicDemuxList topic_demux_list = 14;
  if (has_topic_demux_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *type_.topic_demux_list_, false, target);
  }

  // optional .ubii.clients.ClientList client_list = 15;
  if (has_client_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *type_.client_list_, false, target);
  }

  // optional .ubii.devices.DeviceList device_list = 16;
  if (has_device_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *type_.device_list_, false, target);
  }

  // optional .ubii.services.Service service = 17;
  if (has_service()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *type_.service_, false, target);
  }

  // optional .ubii.services.ServiceList service_list = 18;
  if (has_service_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *type_.service_list_, false, target);
  }

  // optional .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
  if (has_lockstep_processing_reply()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *type_.lockstep_processing_reply_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.services.ServiceReply)
  return target;
}

int ServiceReply::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.services.ServiceReply)
  int total_size = 0;

  switch (type_case()) {
    // optional .ubii.general.Success success = 1;
    case kSuccess: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.success_);
      break;
    }
    // optional .ubii.general.Error error = 2;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.error_);
      break;
    }
    // optional .ubii.clients.Client client = 3;
    case kClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.client_);
      break;
    }
    // optional .ubii.devices.Device device = 4;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.device_);
      break;
    }
    // optional .ubii.servers.Server server = 5;
    case kServer: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.server_);
      break;
    }
    // optional .ubii.sessions.Session session = 6;
    case kSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.session_);
      break;
    }
    // optional .ubii.sessions.SessionList session_list = 7;
    case kSessionList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.session_list_);
      break;
    }
    // optional .ubii.processing.ProcessingModule processing_module = 8;
    case kProcessingModule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.processing_module_);
      break;
    }
    // optional .ubii.processing.ProcessingModuleList processing_module_list = 9;
    case kProcessingModuleList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.processing_module_list_);
      break;
    }
    // optional .ubii.dataStructure.StringList string_list = 10;
    case kStringList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.string_list_);
      break;
    }
    // optional .ubii.devices.TopicMux topic_mux = 11;
    case kTopicMux: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_mux_);
      break;
    }
    // optional .ubii.devices.TopicMuxList topic_mux_list = 12;
    case kTopicMuxList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_mux_list_);
      break;
    }
    // optional .ubii.devices.TopicDemux topic_demux = 13;
    case kTopicDemux: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_demux_);
      break;
    }
    // optional .ubii.devices.TopicDemuxList topic_demux_list = 14;
    case kTopicDemuxList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_demux_list_);
      break;
    }
    // optional .ubii.clients.ClientList client_list = 15;
    case kClientList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.client_list_);
      break;
    }
    // optional .ubii.devices.DeviceList device_list = 16;
    case kDeviceList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.device_list_);
      break;
    }
    // optional .ubii.services.Service service = 17;
    case kService: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.service_);
      break;
    }
    // optional .ubii.services.ServiceList service_list = 18;
    case kServiceList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.service_list_);
      break;
    }
    // optional .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
    case kLockstepProcessingReply: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.lockstep_processing_reply_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceReply::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.services.ServiceReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServiceReply* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceReply>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.services.ServiceReply)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.services.ServiceReply)
    MergeFrom(*source);
  }
}

void ServiceReply::MergeFrom(const ServiceReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.services.ServiceReply)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.type_case()) {
    case kSuccess: {
      mutable_success()->::ubii::general::Success::MergeFrom(from.success());
      break;
    }
    case kError: {
      mutable_error()->::ubii::general::Error::MergeFrom(from.error());
      break;
    }
    case kClient: {
      mutable_client()->::ubii::clients::Client::MergeFrom(from.client());
      break;
    }
    case kDevice: {
      mutable_device()->::ubii::devices::Device::MergeFrom(from.device());
      break;
    }
    case kServer: {
      mutable_server()->::ubii::servers::Server::MergeFrom(from.server());
      break;
    }
    case kSession: {
      mutable_session()->::ubii::sessions::Session::MergeFrom(from.session());
      break;
    }
    case kSessionList: {
      mutable_session_list()->::ubii::sessions::SessionList::MergeFrom(from.session_list());
      break;
    }
    case kProcessingModule: {
      mutable_processing_module()->::ubii::processing::ProcessingModule::MergeFrom(from.processing_module());
      break;
    }
    case kProcessingModuleList: {
      mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from.processing_module_list());
      break;
    }
    case kStringList: {
      mutable_string_list()->::ubii::dataStructure::StringList::MergeFrom(from.string_list());
      break;
    }
    case kTopicMux: {
      mutable_topic_mux()->::ubii::devices::TopicMux::MergeFrom(from.topic_mux());
      break;
    }
    case kTopicMuxList: {
      mutable_topic_mux_list()->::ubii::devices::TopicMuxList::MergeFrom(from.topic_mux_list());
      break;
    }
    case kTopicDemux: {
      mutable_topic_demux()->::ubii::devices::TopicDemux::MergeFrom(from.topic_demux());
      break;
    }
    case kTopicDemuxList: {
      mutable_topic_demux_list()->::ubii::devices::TopicDemuxList::MergeFrom(from.topic_demux_list());
      break;
    }
    case kClientList: {
      mutable_client_list()->::ubii::clients::ClientList::MergeFrom(from.client_list());
      break;
    }
    case kDeviceList: {
      mutable_device_list()->::ubii::devices::DeviceList::MergeFrom(from.device_list());
      break;
    }
    case kService: {
      mutable_service()->::ubii::services::Service::MergeFrom(from.service());
      break;
    }
    case kServiceList: {
      mutable_service_list()->::ubii::services::ServiceList::MergeFrom(from.service_list());
      break;
    }
    case kLockstepProcessingReply: {
      mutable_lockstep_processing_reply()->::ubii::processing::LockstepProcessingReply::MergeFrom(from.lockstep_processing_reply());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void ServiceReply::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.services.ServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceReply::CopyFrom(const ServiceReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.services.ServiceReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceReply::IsInitialized() const {

  return true;
}

void ServiceReply::Swap(ServiceReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceReply::InternalSwap(ServiceReply* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceReply_descriptor_;
  metadata.reflection = ServiceReply_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceReply

// optional .ubii.general.Success success = 1;
bool ServiceReply::has_success() const {
  return type_case() == kSuccess;
}
void ServiceReply::set_has_success() {
  _oneof_case_[0] = kSuccess;
}
void ServiceReply::clear_success() {
  if (has_success()) {
    delete type_.success_;
    clear_has_type();
  }
}
 const ::ubii::general::Success& ServiceReply::success() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.success)
  return has_success()
      ? *type_.success_
      : ::ubii::general::Success::default_instance();
}
::ubii::general::Success* ServiceReply::mutable_success() {
  if (!has_success()) {
    clear_type();
    set_has_success();
    type_.success_ = new ::ubii::general::Success;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.success)
  return type_.success_;
}
::ubii::general::Success* ServiceReply::release_success() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.success)
  if (has_success()) {
    clear_has_type();
    ::ubii::general::Success* temp = type_.success_;
    type_.success_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_success(::ubii::general::Success* success) {
  clear_type();
  if (success) {
    set_has_success();
    type_.success_ = success;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.success)
}

// optional .ubii.general.Error error = 2;
bool ServiceReply::has_error() const {
  return type_case() == kError;
}
void ServiceReply::set_has_error() {
  _oneof_case_[0] = kError;
}
void ServiceReply::clear_error() {
  if (has_error()) {
    delete type_.error_;
    clear_has_type();
  }
}
 const ::ubii::general::Error& ServiceReply::error() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.error)
  return has_error()
      ? *type_.error_
      : ::ubii::general::Error::default_instance();
}
::ubii::general::Error* ServiceReply::mutable_error() {
  if (!has_error()) {
    clear_type();
    set_has_error();
    type_.error_ = new ::ubii::general::Error;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.error)
  return type_.error_;
}
::ubii::general::Error* ServiceReply::release_error() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.error)
  if (has_error()) {
    clear_has_type();
    ::ubii::general::Error* temp = type_.error_;
    type_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_error(::ubii::general::Error* error) {
  clear_type();
  if (error) {
    set_has_error();
    type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.error)
}

// optional .ubii.clients.Client client = 3;
bool ServiceReply::has_client() const {
  return type_case() == kClient;
}
void ServiceReply::set_has_client() {
  _oneof_case_[0] = kClient;
}
void ServiceReply::clear_client() {
  if (has_client()) {
    delete type_.client_;
    clear_has_type();
  }
}
 const ::ubii::clients::Client& ServiceReply::client() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.client)
  return has_client()
      ? *type_.client_
      : ::ubii::clients::Client::default_instance();
}
::ubii::clients::Client* ServiceReply::mutable_client() {
  if (!has_client()) {
    clear_type();
    set_has_client();
    type_.client_ = new ::ubii::clients::Client;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.client)
  return type_.client_;
}
::ubii::clients::Client* ServiceReply::release_client() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.client)
  if (has_client()) {
    clear_has_type();
    ::ubii::clients::Client* temp = type_.client_;
    type_.client_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_client(::ubii::clients::Client* client) {
  clear_type();
  if (client) {
    set_has_client();
    type_.client_ = client;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.client)
}

// optional .ubii.devices.Device device = 4;
bool ServiceReply::has_device() const {
  return type_case() == kDevice;
}
void ServiceReply::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void ServiceReply::clear_device() {
  if (has_device()) {
    delete type_.device_;
    clear_has_type();
  }
}
 const ::ubii::devices::Device& ServiceReply::device() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.device)
  return has_device()
      ? *type_.device_
      : ::ubii::devices::Device::default_instance();
}
::ubii::devices::Device* ServiceReply::mutable_device() {
  if (!has_device()) {
    clear_type();
    set_has_device();
    type_.device_ = new ::ubii::devices::Device;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.device)
  return type_.device_;
}
::ubii::devices::Device* ServiceReply::release_device() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.device)
  if (has_device()) {
    clear_has_type();
    ::ubii::devices::Device* temp = type_.device_;
    type_.device_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_device(::ubii::devices::Device* device) {
  clear_type();
  if (device) {
    set_has_device();
    type_.device_ = device;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.device)
}

// optional .ubii.servers.Server server = 5;
bool ServiceReply::has_server() const {
  return type_case() == kServer;
}
void ServiceReply::set_has_server() {
  _oneof_case_[0] = kServer;
}
void ServiceReply::clear_server() {
  if (has_server()) {
    delete type_.server_;
    clear_has_type();
  }
}
 const ::ubii::servers::Server& ServiceReply::server() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.server)
  return has_server()
      ? *type_.server_
      : ::ubii::servers::Server::default_instance();
}
::ubii::servers::Server* ServiceReply::mutable_server() {
  if (!has_server()) {
    clear_type();
    set_has_server();
    type_.server_ = new ::ubii::servers::Server;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.server)
  return type_.server_;
}
::ubii::servers::Server* ServiceReply::release_server() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.server)
  if (has_server()) {
    clear_has_type();
    ::ubii::servers::Server* temp = type_.server_;
    type_.server_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_server(::ubii::servers::Server* server) {
  clear_type();
  if (server) {
    set_has_server();
    type_.server_ = server;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.server)
}

// optional .ubii.sessions.Session session = 6;
bool ServiceReply::has_session() const {
  return type_case() == kSession;
}
void ServiceReply::set_has_session() {
  _oneof_case_[0] = kSession;
}
void ServiceReply::clear_session() {
  if (has_session()) {
    delete type_.session_;
    clear_has_type();
  }
}
 const ::ubii::sessions::Session& ServiceReply::session() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.session)
  return has_session()
      ? *type_.session_
      : ::ubii::sessions::Session::default_instance();
}
::ubii::sessions::Session* ServiceReply::mutable_session() {
  if (!has_session()) {
    clear_type();
    set_has_session();
    type_.session_ = new ::ubii::sessions::Session;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.session)
  return type_.session_;
}
::ubii::sessions::Session* ServiceReply::release_session() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.session)
  if (has_session()) {
    clear_has_type();
    ::ubii::sessions::Session* temp = type_.session_;
    type_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_session(::ubii::sessions::Session* session) {
  clear_type();
  if (session) {
    set_has_session();
    type_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.session)
}

// optional .ubii.sessions.SessionList session_list = 7;
bool ServiceReply::has_session_list() const {
  return type_case() == kSessionList;
}
void ServiceReply::set_has_session_list() {
  _oneof_case_[0] = kSessionList;
}
void ServiceReply::clear_session_list() {
  if (has_session_list()) {
    delete type_.session_list_;
    clear_has_type();
  }
}
 const ::ubii::sessions::SessionList& ServiceReply::session_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.session_list)
  return has_session_list()
      ? *type_.session_list_
      : ::ubii::sessions::SessionList::default_instance();
}
::ubii::sessions::SessionList* ServiceReply::mutable_session_list() {
  if (!has_session_list()) {
    clear_type();
    set_has_session_list();
    type_.session_list_ = new ::ubii::sessions::SessionList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.session_list)
  return type_.session_list_;
}
::ubii::sessions::SessionList* ServiceReply::release_session_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.session_list)
  if (has_session_list()) {
    clear_has_type();
    ::ubii::sessions::SessionList* temp = type_.session_list_;
    type_.session_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_session_list(::ubii::sessions::SessionList* session_list) {
  clear_type();
  if (session_list) {
    set_has_session_list();
    type_.session_list_ = session_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.session_list)
}

// optional .ubii.processing.ProcessingModule processing_module = 8;
bool ServiceReply::has_processing_module() const {
  return type_case() == kProcessingModule;
}
void ServiceReply::set_has_processing_module() {
  _oneof_case_[0] = kProcessingModule;
}
void ServiceReply::clear_processing_module() {
  if (has_processing_module()) {
    delete type_.processing_module_;
    clear_has_type();
  }
}
 const ::ubii::processing::ProcessingModule& ServiceReply::processing_module() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.processing_module)
  return has_processing_module()
      ? *type_.processing_module_
      : ::ubii::processing::ProcessingModule::default_instance();
}
::ubii::processing::ProcessingModule* ServiceReply::mutable_processing_module() {
  if (!has_processing_module()) {
    clear_type();
    set_has_processing_module();
    type_.processing_module_ = new ::ubii::processing::ProcessingModule;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.processing_module)
  return type_.processing_module_;
}
::ubii::processing::ProcessingModule* ServiceReply::release_processing_module() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.processing_module)
  if (has_processing_module()) {
    clear_has_type();
    ::ubii::processing::ProcessingModule* temp = type_.processing_module_;
    type_.processing_module_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_processing_module(::ubii::processing::ProcessingModule* processing_module) {
  clear_type();
  if (processing_module) {
    set_has_processing_module();
    type_.processing_module_ = processing_module;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.processing_module)
}

// optional .ubii.processing.ProcessingModuleList processing_module_list = 9;
bool ServiceReply::has_processing_module_list() const {
  return type_case() == kProcessingModuleList;
}
void ServiceReply::set_has_processing_module_list() {
  _oneof_case_[0] = kProcessingModuleList;
}
void ServiceReply::clear_processing_module_list() {
  if (has_processing_module_list()) {
    delete type_.processing_module_list_;
    clear_has_type();
  }
}
 const ::ubii::processing::ProcessingModuleList& ServiceReply::processing_module_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.processing_module_list)
  return has_processing_module_list()
      ? *type_.processing_module_list_
      : ::ubii::processing::ProcessingModuleList::default_instance();
}
::ubii::processing::ProcessingModuleList* ServiceReply::mutable_processing_module_list() {
  if (!has_processing_module_list()) {
    clear_type();
    set_has_processing_module_list();
    type_.processing_module_list_ = new ::ubii::processing::ProcessingModuleList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.processing_module_list)
  return type_.processing_module_list_;
}
::ubii::processing::ProcessingModuleList* ServiceReply::release_processing_module_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.processing_module_list)
  if (has_processing_module_list()) {
    clear_has_type();
    ::ubii::processing::ProcessingModuleList* temp = type_.processing_module_list_;
    type_.processing_module_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_processing_module_list(::ubii::processing::ProcessingModuleList* processing_module_list) {
  clear_type();
  if (processing_module_list) {
    set_has_processing_module_list();
    type_.processing_module_list_ = processing_module_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.processing_module_list)
}

// optional .ubii.dataStructure.StringList string_list = 10;
bool ServiceReply::has_string_list() const {
  return type_case() == kStringList;
}
void ServiceReply::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
void ServiceReply::clear_string_list() {
  if (has_string_list()) {
    delete type_.string_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::StringList& ServiceReply::string_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.string_list)
  return has_string_list()
      ? *type_.string_list_
      : ::ubii::dataStructure::StringList::default_instance();
}
::ubii::dataStructure::StringList* ServiceReply::mutable_string_list() {
  if (!has_string_list()) {
    clear_type();
    set_has_string_list();
    type_.string_list_ = new ::ubii::dataStructure::StringList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.string_list)
  return type_.string_list_;
}
::ubii::dataStructure::StringList* ServiceReply::release_string_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.string_list)
  if (has_string_list()) {
    clear_has_type();
    ::ubii::dataStructure::StringList* temp = type_.string_list_;
    type_.string_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_string_list(::ubii::dataStructure::StringList* string_list) {
  clear_type();
  if (string_list) {
    set_has_string_list();
    type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.string_list)
}

// optional .ubii.devices.TopicMux topic_mux = 11;
bool ServiceReply::has_topic_mux() const {
  return type_case() == kTopicMux;
}
void ServiceReply::set_has_topic_mux() {
  _oneof_case_[0] = kTopicMux;
}
void ServiceReply::clear_topic_mux() {
  if (has_topic_mux()) {
    delete type_.topic_mux_;
    clear_has_type();
  }
}
 const ::ubii::devices::TopicMux& ServiceReply::topic_mux() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.topic_mux)
  return has_topic_mux()
      ? *type_.topic_mux_
      : ::ubii::devices::TopicMux::default_instance();
}
::ubii::devices::TopicMux* ServiceReply::mutable_topic_mux() {
  if (!has_topic_mux()) {
    clear_type();
    set_has_topic_mux();
    type_.topic_mux_ = new ::ubii::devices::TopicMux;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.topic_mux)
  return type_.topic_mux_;
}
::ubii::devices::TopicMux* ServiceReply::release_topic_mux() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.topic_mux)
  if (has_topic_mux()) {
    clear_has_type();
    ::ubii::devices::TopicMux* temp = type_.topic_mux_;
    type_.topic_mux_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_topic_mux(::ubii::devices::TopicMux* topic_mux) {
  clear_type();
  if (topic_mux) {
    set_has_topic_mux();
    type_.topic_mux_ = topic_mux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_mux)
}

// optional .ubii.devices.TopicMuxList topic_mux_list = 12;
bool ServiceReply::has_topic_mux_list() const {
  return type_case() == kTopicMuxList;
}
void ServiceReply::set_has_topic_mux_list() {
  _oneof_case_[0] = kTopicMuxList;
}
void ServiceReply::clear_topic_mux_list() {
  if (has_topic_mux_list()) {
    delete type_.topic_mux_list_;
    clear_has_type();
  }
}
 const ::ubii::devices::TopicMuxList& ServiceReply::topic_mux_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.topic_mux_list)
  return has_topic_mux_list()
      ? *type_.topic_mux_list_
      : ::ubii::devices::TopicMuxList::default_instance();
}
::ubii::devices::TopicMuxList* ServiceReply::mutable_topic_mux_list() {
  if (!has_topic_mux_list()) {
    clear_type();
    set_has_topic_mux_list();
    type_.topic_mux_list_ = new ::ubii::devices::TopicMuxList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.topic_mux_list)
  return type_.topic_mux_list_;
}
::ubii::devices::TopicMuxList* ServiceReply::release_topic_mux_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.topic_mux_list)
  if (has_topic_mux_list()) {
    clear_has_type();
    ::ubii::devices::TopicMuxList* temp = type_.topic_mux_list_;
    type_.topic_mux_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_topic_mux_list(::ubii::devices::TopicMuxList* topic_mux_list) {
  clear_type();
  if (topic_mux_list) {
    set_has_topic_mux_list();
    type_.topic_mux_list_ = topic_mux_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_mux_list)
}

// optional .ubii.devices.TopicDemux topic_demux = 13;
bool ServiceReply::has_topic_demux() const {
  return type_case() == kTopicDemux;
}
void ServiceReply::set_has_topic_demux() {
  _oneof_case_[0] = kTopicDemux;
}
void ServiceReply::clear_topic_demux() {
  if (has_topic_demux()) {
    delete type_.topic_demux_;
    clear_has_type();
  }
}
 const ::ubii::devices::TopicDemux& ServiceReply::topic_demux() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.topic_demux)
  return has_topic_demux()
      ? *type_.topic_demux_
      : ::ubii::devices::TopicDemux::default_instance();
}
::ubii::devices::TopicDemux* ServiceReply::mutable_topic_demux() {
  if (!has_topic_demux()) {
    clear_type();
    set_has_topic_demux();
    type_.topic_demux_ = new ::ubii::devices::TopicDemux;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.topic_demux)
  return type_.topic_demux_;
}
::ubii::devices::TopicDemux* ServiceReply::release_topic_demux() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.topic_demux)
  if (has_topic_demux()) {
    clear_has_type();
    ::ubii::devices::TopicDemux* temp = type_.topic_demux_;
    type_.topic_demux_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_topic_demux(::ubii::devices::TopicDemux* topic_demux) {
  clear_type();
  if (topic_demux) {
    set_has_topic_demux();
    type_.topic_demux_ = topic_demux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_demux)
}

// optional .ubii.devices.TopicDemuxList topic_demux_list = 14;
bool ServiceReply::has_topic_demux_list() const {
  return type_case() == kTopicDemuxList;
}
void ServiceReply::set_has_topic_demux_list() {
  _oneof_case_[0] = kTopicDemuxList;
}
void ServiceReply::clear_topic_demux_list() {
  if (has_topic_demux_list()) {
    delete type_.topic_demux_list_;
    clear_has_type();
  }
}
 const ::ubii::devices::TopicDemuxList& ServiceReply::topic_demux_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.topic_demux_list)
  return has_topic_demux_list()
      ? *type_.topic_demux_list_
      : ::ubii::devices::TopicDemuxList::default_instance();
}
::ubii::devices::TopicDemuxList* ServiceReply::mutable_topic_demux_list() {
  if (!has_topic_demux_list()) {
    clear_type();
    set_has_topic_demux_list();
    type_.topic_demux_list_ = new ::ubii::devices::TopicDemuxList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.topic_demux_list)
  return type_.topic_demux_list_;
}
::ubii::devices::TopicDemuxList* ServiceReply::release_topic_demux_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.topic_demux_list)
  if (has_topic_demux_list()) {
    clear_has_type();
    ::ubii::devices::TopicDemuxList* temp = type_.topic_demux_list_;
    type_.topic_demux_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_topic_demux_list(::ubii::devices::TopicDemuxList* topic_demux_list) {
  clear_type();
  if (topic_demux_list) {
    set_has_topic_demux_list();
    type_.topic_demux_list_ = topic_demux_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.topic_demux_list)
}

// optional .ubii.clients.ClientList client_list = 15;
bool ServiceReply::has_client_list() const {
  return type_case() == kClientList;
}
void ServiceReply::set_has_client_list() {
  _oneof_case_[0] = kClientList;
}
void ServiceReply::clear_client_list() {
  if (has_client_list()) {
    delete type_.client_list_;
    clear_has_type();
  }
}
 const ::ubii::clients::ClientList& ServiceReply::client_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.client_list)
  return has_client_list()
      ? *type_.client_list_
      : ::ubii::clients::ClientList::default_instance();
}
::ubii::clients::ClientList* ServiceReply::mutable_client_list() {
  if (!has_client_list()) {
    clear_type();
    set_has_client_list();
    type_.client_list_ = new ::ubii::clients::ClientList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.client_list)
  return type_.client_list_;
}
::ubii::clients::ClientList* ServiceReply::release_client_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.client_list)
  if (has_client_list()) {
    clear_has_type();
    ::ubii::clients::ClientList* temp = type_.client_list_;
    type_.client_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_client_list(::ubii::clients::ClientList* client_list) {
  clear_type();
  if (client_list) {
    set_has_client_list();
    type_.client_list_ = client_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.client_list)
}

// optional .ubii.devices.DeviceList device_list = 16;
bool ServiceReply::has_device_list() const {
  return type_case() == kDeviceList;
}
void ServiceReply::set_has_device_list() {
  _oneof_case_[0] = kDeviceList;
}
void ServiceReply::clear_device_list() {
  if (has_device_list()) {
    delete type_.device_list_;
    clear_has_type();
  }
}
 const ::ubii::devices::DeviceList& ServiceReply::device_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.device_list)
  return has_device_list()
      ? *type_.device_list_
      : ::ubii::devices::DeviceList::default_instance();
}
::ubii::devices::DeviceList* ServiceReply::mutable_device_list() {
  if (!has_device_list()) {
    clear_type();
    set_has_device_list();
    type_.device_list_ = new ::ubii::devices::DeviceList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.device_list)
  return type_.device_list_;
}
::ubii::devices::DeviceList* ServiceReply::release_device_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.device_list)
  if (has_device_list()) {
    clear_has_type();
    ::ubii::devices::DeviceList* temp = type_.device_list_;
    type_.device_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_device_list(::ubii::devices::DeviceList* device_list) {
  clear_type();
  if (device_list) {
    set_has_device_list();
    type_.device_list_ = device_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.device_list)
}

// optional .ubii.services.Service service = 17;
bool ServiceReply::has_service() const {
  return type_case() == kService;
}
void ServiceReply::set_has_service() {
  _oneof_case_[0] = kService;
}
void ServiceReply::clear_service() {
  if (has_service()) {
    delete type_.service_;
    clear_has_type();
  }
}
 const ::ubii::services::Service& ServiceReply::service() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.service)
  return has_service()
      ? *type_.service_
      : ::ubii::services::Service::default_instance();
}
::ubii::services::Service* ServiceReply::mutable_service() {
  if (!has_service()) {
    clear_type();
    set_has_service();
    type_.service_ = new ::ubii::services::Service;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.service)
  return type_.service_;
}
::ubii::services::Service* ServiceReply::release_service() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.service)
  if (has_service()) {
    clear_has_type();
    ::ubii::services::Service* temp = type_.service_;
    type_.service_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_service(::ubii::services::Service* service) {
  clear_type();
  if (service) {
    set_has_service();
    type_.service_ = service;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.service)
}

// optional .ubii.services.ServiceList service_list = 18;
bool ServiceReply::has_service_list() const {
  return type_case() == kServiceList;
}
void ServiceReply::set_has_service_list() {
  _oneof_case_[0] = kServiceList;
}
void ServiceReply::clear_service_list() {
  if (has_service_list()) {
    delete type_.service_list_;
    clear_has_type();
  }
}
 const ::ubii::services::ServiceList& ServiceReply::service_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.service_list)
  return has_service_list()
      ? *type_.service_list_
      : ::ubii::services::ServiceList::default_instance();
}
::ubii::services::ServiceList* ServiceReply::mutable_service_list() {
  if (!has_service_list()) {
    clear_type();
    set_has_service_list();
    type_.service_list_ = new ::ubii::services::ServiceList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.service_list)
  return type_.service_list_;
}
::ubii::services::ServiceList* ServiceReply::release_service_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.service_list)
  if (has_service_list()) {
    clear_has_type();
    ::ubii::services::ServiceList* temp = type_.service_list_;
    type_.service_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_service_list(::ubii::services::ServiceList* service_list) {
  clear_type();
  if (service_list) {
    set_has_service_list();
    type_.service_list_ = service_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.service_list)
}

// optional .ubii.processing.LockstepProcessingReply lockstep_processing_reply = 19;
bool ServiceReply::has_lockstep_processing_reply() const {
  return type_case() == kLockstepProcessingReply;
}
void ServiceReply::set_has_lockstep_processing_reply() {
  _oneof_case_[0] = kLockstepProcessingReply;
}
void ServiceReply::clear_lockstep_processing_reply() {
  if (has_lockstep_processing_reply()) {
    delete type_.lockstep_processing_reply_;
    clear_has_type();
  }
}
 const ::ubii::processing::LockstepProcessingReply& ServiceReply::lockstep_processing_reply() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceReply.lockstep_processing_reply)
  return has_lockstep_processing_reply()
      ? *type_.lockstep_processing_reply_
      : ::ubii::processing::LockstepProcessingReply::default_instance();
}
::ubii::processing::LockstepProcessingReply* ServiceReply::mutable_lockstep_processing_reply() {
  if (!has_lockstep_processing_reply()) {
    clear_type();
    set_has_lockstep_processing_reply();
    type_.lockstep_processing_reply_ = new ::ubii::processing::LockstepProcessingReply;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceReply.lockstep_processing_reply)
  return type_.lockstep_processing_reply_;
}
::ubii::processing::LockstepProcessingReply* ServiceReply::release_lockstep_processing_reply() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceReply.lockstep_processing_reply)
  if (has_lockstep_processing_reply()) {
    clear_has_type();
    ::ubii::processing::LockstepProcessingReply* temp = type_.lockstep_processing_reply_;
    type_.lockstep_processing_reply_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceReply::set_allocated_lockstep_processing_reply(::ubii::processing::LockstepProcessingReply* lockstep_processing_reply) {
  clear_type();
  if (lockstep_processing_reply) {
    set_has_lockstep_processing_reply();
    type_.lockstep_processing_reply_ = lockstep_processing_reply;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceReply.lockstep_processing_reply)
}

bool ServiceReply::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void ServiceReply::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
ServiceReply::TypeCase ServiceReply::type_case() const {
  return ServiceReply::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
