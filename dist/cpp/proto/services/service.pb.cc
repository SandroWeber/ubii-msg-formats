// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/service.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/services/service.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace services {

namespace {

const ::google::protobuf::Descriptor* Service_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Service_reflection_ = NULL;
const ::google::protobuf::Descriptor* ServiceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fservices_2fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fservices_2fservice_2eproto() {
  protobuf_AddDesc_proto_2fservices_2fservice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/services/service.proto");
  GOOGLE_CHECK(file != NULL);
  Service_descriptor_ = file->message_type(0);
  static const int Service_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, request_message_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, response_message_format_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, description_),
  };
  Service_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Service_descriptor_,
      Service::default_instance_,
      Service_offsets_,
      -1,
      -1,
      -1,
      sizeof(Service),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Service, _is_default_instance_));
  ServiceList_descriptor_ = file->message_type(1);
  static const int ServiceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceList, elements_),
  };
  ServiceList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceList_descriptor_,
      ServiceList::default_instance_,
      ServiceList_offsets_,
      -1,
      -1,
      -1,
      sizeof(ServiceList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fservices_2fservice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Service_descriptor_, &Service::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceList_descriptor_, &ServiceList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fservices_2fservice_2eproto() {
  delete Service::default_instance_;
  delete Service_reflection_;
  delete ServiceList::default_instance_;
  delete ServiceList_reflection_;
}

void protobuf_AddDesc_proto_2fservices_2fservice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fservices_2fservice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034proto/services/service.proto\022\rubii.ser"
    "vices\"|\n\007Service\022\r\n\005topic\030\001 \001(\t\022\036\n\026reque"
    "st_message_format\030\002 \001(\t\022\037\n\027response_mess"
    "age_format\030\003 \001(\t\022\014\n\004tags\030\004 \003(\t\022\023\n\013descri"
    "ption\030\005 \001(\t\"7\n\013ServiceList\022(\n\010elements\030\001"
    " \003(\0132\026.ubii.services.Serviceb\006proto3", 236);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/services/service.proto", &protobuf_RegisterTypes);
  Service::default_instance_ = new Service();
  ServiceList::default_instance_ = new ServiceList();
  Service::default_instance_->InitAsDefaultInstance();
  ServiceList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fservices_2fservice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fservices_2fservice_2eproto {
  StaticDescriptorInitializer_proto_2fservices_2fservice_2eproto() {
    protobuf_AddDesc_proto_2fservices_2fservice_2eproto();
  }
} static_descriptor_initializer_proto_2fservices_2fservice_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Service::kTopicFieldNumber;
const int Service::kRequestMessageFormatFieldNumber;
const int Service::kResponseMessageFormatFieldNumber;
const int Service::kTagsFieldNumber;
const int Service::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Service::Service()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.services.Service)
}

void Service::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Service::Service(const Service& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.services.Service)
}

void Service::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_message_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_message_format_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Service::~Service() {
  // @@protoc_insertion_point(destructor:ubii.services.Service)
  SharedDtor();
}

void Service::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_message_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_message_format_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Service::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Service::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Service_descriptor_;
}

const Service& Service::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservices_2fservice_2eproto();
  return *default_instance_;
}

Service* Service::default_instance_ = NULL;

Service* Service::New(::google::protobuf::Arena* arena) const {
  Service* n = new Service;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Service::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.services.Service)
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  request_message_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  response_message_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tags_.Clear();
}

bool Service::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.services.Service)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.Service.topic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_request_message_format;
        break;
      }

      // optional string request_message_format = 2;
      case 2: {
        if (tag == 18) {
         parse_request_message_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_request_message_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->request_message_format().data(), this->request_message_format().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.Service.request_message_format"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_response_message_format;
        break;
      }

      // optional string response_message_format = 3;
      case 3: {
        if (tag == 26) {
         parse_response_message_format:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_response_message_format()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->response_message_format().data(), this->response_message_format().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.Service.response_message_format"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        break;
      }

      // repeated string tags = 4;
      case 4: {
        if (tag == 34) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.Service.tags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tags;
        if (input->ExpectTag(42)) goto parse_description;
        break;
      }

      // optional string description = 5;
      case 5: {
        if (tag == 42) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.Service.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.services.Service)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.services.Service)
  return false;
#undef DO_
}

void Service::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.services.Service)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // optional string request_message_format = 2;
  if (this->request_message_format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_message_format().data(), this->request_message_format().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.request_message_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->request_message_format(), output);
  }

  // optional string response_message_format = 3;
  if (this->response_message_format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_message_format().data(), this->response_message_format().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.response_message_format");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->response_message_format(), output);
  }

  // repeated string tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->tags(i), output);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.services.Service)
}

::google::protobuf::uint8* Service::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.services.Service)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // optional string request_message_format = 2;
  if (this->request_message_format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->request_message_format().data(), this->request_message_format().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.request_message_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->request_message_format(), target);
  }

  // optional string response_message_format = 3;
  if (this->response_message_format().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->response_message_format().data(), this->response_message_format().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.response_message_format");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->response_message_format(), target);
  }

  // repeated string tags = 4;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->tags(i), target);
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.Service.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.services.Service)
  return target;
}

int Service::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.services.Service)
  int total_size = 0;

  // optional string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // optional string request_message_format = 2;
  if (this->request_message_format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->request_message_format());
  }

  // optional string response_message_format = 3;
  if (this->response_message_format().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->response_message_format());
  }

  // optional string description = 5;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // repeated string tags = 4;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Service::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.services.Service)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Service* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Service>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.services.Service)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.services.Service)
    MergeFrom(*source);
  }
}

void Service::MergeFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.services.Service)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  tags_.MergeFrom(from.tags_);
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.request_message_format().size() > 0) {

    request_message_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.request_message_format_);
  }
  if (from.response_message_format().size() > 0) {

    response_message_format_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.response_message_format_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void Service::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.services.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Service::CopyFrom(const Service& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.services.Service)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Service::IsInitialized() const {

  return true;
}

void Service::Swap(Service* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Service::InternalSwap(Service* other) {
  topic_.Swap(&other->topic_);
  request_message_format_.Swap(&other->request_message_format_);
  response_message_format_.Swap(&other->response_message_format_);
  tags_.UnsafeArenaSwap(&other->tags_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Service::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Service_descriptor_;
  metadata.reflection = Service_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Service

// optional string topic = 1;
void Service::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Service::topic() const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.Service.topic)
}
 void Service::set_topic(const char* value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.topic)
}
 void Service::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.topic)
}
 ::std::string* Service::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Service::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.services.Service.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.Service.topic)
}

// optional string request_message_format = 2;
void Service::clear_request_message_format() {
  request_message_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Service::request_message_format() const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.request_message_format)
  return request_message_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_request_message_format(const ::std::string& value) {
  
  request_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.Service.request_message_format)
}
 void Service::set_request_message_format(const char* value) {
  
  request_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.request_message_format)
}
 void Service::set_request_message_format(const char* value, size_t size) {
  
  request_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.request_message_format)
}
 ::std::string* Service::mutable_request_message_format() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.request_message_format)
  return request_message_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Service::release_request_message_format() {
  // @@protoc_insertion_point(field_release:ubii.services.Service.request_message_format)
  
  return request_message_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_allocated_request_message_format(::std::string* request_message_format) {
  if (request_message_format != NULL) {
    
  } else {
    
  }
  request_message_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_message_format);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.Service.request_message_format)
}

// optional string response_message_format = 3;
void Service::clear_response_message_format() {
  response_message_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Service::response_message_format() const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.response_message_format)
  return response_message_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_response_message_format(const ::std::string& value) {
  
  response_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.Service.response_message_format)
}
 void Service::set_response_message_format(const char* value) {
  
  response_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.response_message_format)
}
 void Service::set_response_message_format(const char* value, size_t size) {
  
  response_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.response_message_format)
}
 ::std::string* Service::mutable_response_message_format() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.response_message_format)
  return response_message_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Service::release_response_message_format() {
  // @@protoc_insertion_point(field_release:ubii.services.Service.response_message_format)
  
  return response_message_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_allocated_response_message_format(::std::string* response_message_format) {
  if (response_message_format != NULL) {
    
  } else {
    
  }
  response_message_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_message_format);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.Service.response_message_format)
}

// repeated string tags = 4;
int Service::tags_size() const {
  return tags_.size();
}
void Service::clear_tags() {
  tags_.Clear();
}
 const ::std::string& Service::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.tags)
  return tags_.Get(index);
}
 ::std::string* Service::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.tags)
  return tags_.Mutable(index);
}
 void Service::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.Service.tags)
  tags_.Mutable(index)->assign(value);
}
 void Service::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.tags)
}
 void Service::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.tags)
}
 ::std::string* Service::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.Service.tags)
  return tags_.Add();
}
 void Service::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.Service.tags)
}
 void Service::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.Service.tags)
}
 void Service::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.Service.tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Service::tags() const {
  // @@protoc_insertion_point(field_list:ubii.services.Service.tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Service::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.Service.tags)
  return &tags_;
}

// optional string description = 5;
void Service::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Service::description() const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.Service.description)
}
 void Service::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.description)
}
 void Service::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.description)
}
 ::std::string* Service::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Service::release_description() {
  // @@protoc_insertion_point(field_release:ubii.services.Service.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Service::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.Service.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceList::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceList::ServiceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.services.ServiceList)
}

void ServiceList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

ServiceList::ServiceList(const ServiceList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.services.ServiceList)
}

void ServiceList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

ServiceList::~ServiceList() {
  // @@protoc_insertion_point(destructor:ubii.services.ServiceList)
  SharedDtor();
}

void ServiceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ServiceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceList_descriptor_;
}

const ServiceList& ServiceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservices_2fservice_2eproto();
  return *default_instance_;
}

ServiceList* ServiceList::default_instance_ = NULL;

ServiceList* ServiceList::New(::google::protobuf::Arena* arena) const {
  ServiceList* n = new ServiceList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.services.ServiceList)
  elements_.Clear();
}

bool ServiceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.services.ServiceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ubii.services.Service elements = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_elements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.services.ServiceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.services.ServiceList)
  return false;
#undef DO_
}

void ServiceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.services.ServiceList)
  // repeated .ubii.services.Service elements = 1;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.services.ServiceList)
}

::google::protobuf::uint8* ServiceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.services.ServiceList)
  // repeated .ubii.services.Service elements = 1;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->elements(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.services.ServiceList)
  return target;
}

int ServiceList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.services.ServiceList)
  int total_size = 0;

  // repeated .ubii.services.Service elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.services.ServiceList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServiceList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.services.ServiceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.services.ServiceList)
    MergeFrom(*source);
  }
}

void ServiceList::MergeFrom(const ServiceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.services.ServiceList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  elements_.MergeFrom(from.elements_);
}

void ServiceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.services.ServiceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceList::CopyFrom(const ServiceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.services.ServiceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceList::IsInitialized() const {

  return true;
}

void ServiceList::Swap(ServiceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceList::InternalSwap(ServiceList* other) {
  elements_.UnsafeArenaSwap(&other->elements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceList_descriptor_;
  metadata.reflection = ServiceList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceList

// repeated .ubii.services.Service elements = 1;
int ServiceList::elements_size() const {
  return elements_.size();
}
void ServiceList::clear_elements() {
  elements_.Clear();
}
const ::ubii::services::Service& ServiceList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceList.elements)
  return elements_.Get(index);
}
::ubii::services::Service* ServiceList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceList.elements)
  return elements_.Mutable(index);
}
::ubii::services::Service* ServiceList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.services.ServiceList.elements)
  return elements_.Add();
}
::google::protobuf::RepeatedPtrField< ::ubii::services::Service >*
ServiceList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.ServiceList.elements)
  return &elements_;
}
const ::google::protobuf::RepeatedPtrField< ::ubii::services::Service >&
ServiceList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.services.ServiceList.elements)
  return elements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
