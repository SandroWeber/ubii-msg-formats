// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/serviceRequest.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/services/serviceRequest.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace services {

namespace {

const ::google::protobuf::Descriptor* ServiceRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ServiceRequest_reflection_ = NULL;
struct ServiceRequestOneofInstance {
  const ::ubii::clients::Client* client_;
  const ::ubii::devices::Device* device_;
  const ::ubii::services::request::TopicSubscription* topic_subscription_;
  const ::ubii::sessions::Session* session_;
  const ::ubii::sessions::SessionList* session_list_;
  const ::ubii::processing::ProcessingModule* processing_module_;
  const ::ubii::processing::ProcessingModuleList* processing_module_list_;
  const ::ubii::devices::TopicMux* topic_mux_;
  const ::ubii::devices::TopicMuxList* topic_mux_list_;
  const ::ubii::devices::TopicDemux* topic_demux_;
  const ::ubii::devices::TopicDemuxList* topic_demux_list_;
  const ::ubii::clients::ClientList* client_list_;
  const ::ubii::devices::DeviceList* device_list_;
  const ::ubii::processing::LockstepProcessingRequest* lockstep_processing_request_;
}* ServiceRequest_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fservices_2fserviceRequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fservices_2fserviceRequest_2eproto() {
  protobuf_AddDesc_proto_2fservices_2fserviceRequest_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/services/serviceRequest.proto");
  GOOGLE_CHECK(file != NULL);
  ServiceRequest_descriptor_ = file->message_type(0);
  static const int ServiceRequest_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, topic_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, client_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, device_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, topic_subscription_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, session_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, processing_module_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, processing_module_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, topic_mux_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, topic_mux_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, topic_demux_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, topic_demux_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, client_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, device_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(ServiceRequest_default_oneof_instance_, lockstep_processing_request_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, type_),
  };
  ServiceRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ServiceRequest_descriptor_,
      ServiceRequest::default_instance_,
      ServiceRequest_offsets_,
      -1,
      -1,
      -1,
      ServiceRequest_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, _oneof_case_[0]),
      sizeof(ServiceRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ServiceRequest, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fservices_2fserviceRequest_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ServiceRequest_descriptor_, &ServiceRequest::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fservices_2fserviceRequest_2eproto() {
  delete ServiceRequest::default_instance_;
  delete ServiceRequest_default_oneof_instance_;
  delete ServiceRequest_reflection_;
}

void protobuf_AddDesc_proto_2fservices_2fserviceRequest_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fservices_2fserviceRequest_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ubii::clients::protobuf_AddDesc_proto_2fclients_2fclient_2eproto();
  ::ubii::devices::protobuf_AddDesc_proto_2fdevices_2fdevice_2eproto();
  ::ubii::devices::protobuf_AddDesc_proto_2fdevices_2ftopicMux_2eproto();
  ::ubii::devices::protobuf_AddDesc_proto_2fdevices_2ftopicDemux_2eproto();
  ::ubii::sessions::protobuf_AddDesc_proto_2fsessions_2fsession_2eproto();
  ::ubii::services::request::protobuf_AddDesc_proto_2fservices_2frequest_2ftopicSubscription_2eproto();
  ::ubii::processing::protobuf_AddDesc_proto_2fprocessing_2fprocessingModule_2eproto();
  ::ubii::processing::protobuf_AddDesc_proto_2fprocessing_2flockstepProcessing_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n#proto/services/serviceRequest.proto\022\ru"
    "bii.services\032\032proto/clients/client.proto"
    "\032\032proto/devices/device.proto\032\034proto/devi"
    "ces/topicMux.proto\032\036proto/devices/topicD"
    "emux.proto\032\034proto/sessions/session.proto"
    "\032.proto/services/request/topicSubscripti"
    "on.proto\032\'proto/processing/processingMod"
    "ule.proto\032)proto/processing/lockstepProc"
    "essing.proto\"\252\006\n\016ServiceRequest\022\r\n\005topic"
    "\030\001 \001(\t\022&\n\006client\030\002 \001(\0132\024.ubii.clients.Cl"
    "ientH\000\022&\n\006device\030\003 \001(\0132\024.ubii.devices.De"
    "viceH\000\022F\n\022topic_subscription\030\004 \001(\0132(.ubi"
    "i.services.request.TopicSubscriptionH\000\022)"
    "\n\007session\030\005 \001(\0132\026.ubii.sessions.SessionH"
    "\000\0222\n\014session_list\030\006 \001(\0132\032.ubii.sessions."
    "SessionListH\000\022>\n\021processing_module\030\007 \001(\013"
    "2!.ubii.processing.ProcessingModuleH\000\022G\n"
    "\026processing_module_list\030\010 \001(\0132%.ubii.pro"
    "cessing.ProcessingModuleListH\000\022+\n\ttopic_"
    "mux\030\t \001(\0132\026.ubii.devices.TopicMuxH\000\0224\n\016t"
    "opic_mux_list\030\n \001(\0132\032.ubii.devices.Topic"
    "MuxListH\000\022/\n\013topic_demux\030\013 \001(\0132\030.ubii.de"
    "vices.TopicDemuxH\000\0228\n\020topic_demux_list\030\014"
    " \001(\0132\034.ubii.devices.TopicDemuxListH\000\022/\n\013"
    "client_list\030\r \001(\0132\030.ubii.clients.ClientL"
    "istH\000\022/\n\013device_list\030\016 \001(\0132\030.ubii.device"
    "s.DeviceListH\000\022Q\n\033lockstep_processing_re"
    "quest\030\017 \001(\0132*.ubii.processing.LockstepPr"
    "ocessingRequestH\000B\006\n\004typeb\006proto3", 1153);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/services/serviceRequest.proto", &protobuf_RegisterTypes);
  ServiceRequest::default_instance_ = new ServiceRequest();
  ServiceRequest_default_oneof_instance_ = new ServiceRequestOneofInstance();
  ServiceRequest::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fservices_2fserviceRequest_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fservices_2fserviceRequest_2eproto {
  StaticDescriptorInitializer_proto_2fservices_2fserviceRequest_2eproto() {
    protobuf_AddDesc_proto_2fservices_2fserviceRequest_2eproto();
  }
} static_descriptor_initializer_proto_2fservices_2fserviceRequest_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceRequest::kTopicFieldNumber;
const int ServiceRequest::kClientFieldNumber;
const int ServiceRequest::kDeviceFieldNumber;
const int ServiceRequest::kTopicSubscriptionFieldNumber;
const int ServiceRequest::kSessionFieldNumber;
const int ServiceRequest::kSessionListFieldNumber;
const int ServiceRequest::kProcessingModuleFieldNumber;
const int ServiceRequest::kProcessingModuleListFieldNumber;
const int ServiceRequest::kTopicMuxFieldNumber;
const int ServiceRequest::kTopicMuxListFieldNumber;
const int ServiceRequest::kTopicDemuxFieldNumber;
const int ServiceRequest::kTopicDemuxListFieldNumber;
const int ServiceRequest::kClientListFieldNumber;
const int ServiceRequest::kDeviceListFieldNumber;
const int ServiceRequest::kLockstepProcessingRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceRequest::ServiceRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.services.ServiceRequest)
}

void ServiceRequest::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  ServiceRequest_default_oneof_instance_->client_ = const_cast< ::ubii::clients::Client*>(&::ubii::clients::Client::default_instance());
  ServiceRequest_default_oneof_instance_->device_ = const_cast< ::ubii::devices::Device*>(&::ubii::devices::Device::default_instance());
  ServiceRequest_default_oneof_instance_->topic_subscription_ = const_cast< ::ubii::services::request::TopicSubscription*>(&::ubii::services::request::TopicSubscription::default_instance());
  ServiceRequest_default_oneof_instance_->session_ = const_cast< ::ubii::sessions::Session*>(&::ubii::sessions::Session::default_instance());
  ServiceRequest_default_oneof_instance_->session_list_ = const_cast< ::ubii::sessions::SessionList*>(&::ubii::sessions::SessionList::default_instance());
  ServiceRequest_default_oneof_instance_->processing_module_ = const_cast< ::ubii::processing::ProcessingModule*>(&::ubii::processing::ProcessingModule::default_instance());
  ServiceRequest_default_oneof_instance_->processing_module_list_ = const_cast< ::ubii::processing::ProcessingModuleList*>(&::ubii::processing::ProcessingModuleList::default_instance());
  ServiceRequest_default_oneof_instance_->topic_mux_ = const_cast< ::ubii::devices::TopicMux*>(&::ubii::devices::TopicMux::default_instance());
  ServiceRequest_default_oneof_instance_->topic_mux_list_ = const_cast< ::ubii::devices::TopicMuxList*>(&::ubii::devices::TopicMuxList::default_instance());
  ServiceRequest_default_oneof_instance_->topic_demux_ = const_cast< ::ubii::devices::TopicDemux*>(&::ubii::devices::TopicDemux::default_instance());
  ServiceRequest_default_oneof_instance_->topic_demux_list_ = const_cast< ::ubii::devices::TopicDemuxList*>(&::ubii::devices::TopicDemuxList::default_instance());
  ServiceRequest_default_oneof_instance_->client_list_ = const_cast< ::ubii::clients::ClientList*>(&::ubii::clients::ClientList::default_instance());
  ServiceRequest_default_oneof_instance_->device_list_ = const_cast< ::ubii::devices::DeviceList*>(&::ubii::devices::DeviceList::default_instance());
  ServiceRequest_default_oneof_instance_->lockstep_processing_request_ = const_cast< ::ubii::processing::LockstepProcessingRequest*>(&::ubii::processing::LockstepProcessingRequest::default_instance());
}

ServiceRequest::ServiceRequest(const ServiceRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.services.ServiceRequest)
}

void ServiceRequest::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_type();
}

ServiceRequest::~ServiceRequest() {
  // @@protoc_insertion_point(destructor:ubii.services.ServiceRequest)
  SharedDtor();
}

void ServiceRequest::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
  if (this != default_instance_) {
  }
}

void ServiceRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ServiceRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ServiceRequest_descriptor_;
}

const ServiceRequest& ServiceRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservices_2fserviceRequest_2eproto();
  return *default_instance_;
}

ServiceRequest* ServiceRequest::default_instance_ = NULL;

ServiceRequest* ServiceRequest::New(::google::protobuf::Arena* arena) const {
  ServiceRequest* n = new ServiceRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceRequest::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.services.ServiceRequest)
  switch(type_case()) {
    case kClient: {
      delete type_.client_;
      break;
    }
    case kDevice: {
      delete type_.device_;
      break;
    }
    case kTopicSubscription: {
      delete type_.topic_subscription_;
      break;
    }
    case kSession: {
      delete type_.session_;
      break;
    }
    case kSessionList: {
      delete type_.session_list_;
      break;
    }
    case kProcessingModule: {
      delete type_.processing_module_;
      break;
    }
    case kProcessingModuleList: {
      delete type_.processing_module_list_;
      break;
    }
    case kTopicMux: {
      delete type_.topic_mux_;
      break;
    }
    case kTopicMuxList: {
      delete type_.topic_mux_list_;
      break;
    }
    case kTopicDemux: {
      delete type_.topic_demux_;
      break;
    }
    case kTopicDemuxList: {
      delete type_.topic_demux_list_;
      break;
    }
    case kClientList: {
      delete type_.client_list_;
      break;
    }
    case kDeviceList: {
      delete type_.device_list_;
      break;
    }
    case kLockstepProcessingRequest: {
      delete type_.lockstep_processing_request_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void ServiceRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.services.ServiceRequest)
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_type();
}

bool ServiceRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.services.ServiceRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.services.ServiceRequest.topic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_client;
        break;
      }

      // optional .ubii.clients.Client client = 2;
      case 2: {
        if (tag == 18) {
         parse_client:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_device;
        break;
      }

      // optional .ubii.devices.Device device = 3;
      case 3: {
        if (tag == 26) {
         parse_device:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_topic_subscription;
        break;
      }

      // optional .ubii.services.request.TopicSubscription topic_subscription = 4;
      case 4: {
        if (tag == 34) {
         parse_topic_subscription:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_subscription()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_session;
        break;
      }

      // optional .ubii.sessions.Session session = 5;
      case 5: {
        if (tag == 42) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_session_list;
        break;
      }

      // optional .ubii.sessions.SessionList session_list = 6;
      case 6: {
        if (tag == 50) {
         parse_session_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_processing_module;
        break;
      }

      // optional .ubii.processing.ProcessingModule processing_module = 7;
      case 7: {
        if (tag == 58) {
         parse_processing_module:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing_module()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_processing_module_list;
        break;
      }

      // optional .ubii.processing.ProcessingModuleList processing_module_list = 8;
      case 8: {
        if (tag == 66) {
         parse_processing_module_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing_module_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_topic_mux;
        break;
      }

      // optional .ubii.devices.TopicMux topic_mux = 9;
      case 9: {
        if (tag == 74) {
         parse_topic_mux:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_mux()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_topic_mux_list;
        break;
      }

      // optional .ubii.devices.TopicMuxList topic_mux_list = 10;
      case 10: {
        if (tag == 82) {
         parse_topic_mux_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_mux_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_topic_demux;
        break;
      }

      // optional .ubii.devices.TopicDemux topic_demux = 11;
      case 11: {
        if (tag == 90) {
         parse_topic_demux:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_demux()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_topic_demux_list;
        break;
      }

      // optional .ubii.devices.TopicDemuxList topic_demux_list = 12;
      case 12: {
        if (tag == 98) {
         parse_topic_demux_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_demux_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_client_list;
        break;
      }

      // optional .ubii.clients.ClientList client_list = 13;
      case 13: {
        if (tag == 106) {
         parse_client_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_client_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_device_list;
        break;
      }

      // optional .ubii.devices.DeviceList device_list = 14;
      case 14: {
        if (tag == 114) {
         parse_device_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_lockstep_processing_request;
        break;
      }

      // optional .ubii.processing.LockstepProcessingRequest lockstep_processing_request = 15;
      case 15: {
        if (tag == 122) {
         parse_lockstep_processing_request:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lockstep_processing_request()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.services.ServiceRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.services.ServiceRequest)
  return false;
#undef DO_
}

void ServiceRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.services.ServiceRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.ServiceRequest.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // optional .ubii.clients.Client client = 2;
  if (has_client()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.client_, output);
  }

  // optional .ubii.devices.Device device = 3;
  if (has_device()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.device_, output);
  }

  // optional .ubii.services.request.TopicSubscription topic_subscription = 4;
  if (has_topic_subscription()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.topic_subscription_, output);
  }

  // optional .ubii.sessions.Session session = 5;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *type_.session_, output);
  }

  // optional .ubii.sessions.SessionList session_list = 6;
  if (has_session_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *type_.session_list_, output);
  }

  // optional .ubii.processing.ProcessingModule processing_module = 7;
  if (has_processing_module()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *type_.processing_module_, output);
  }

  // optional .ubii.processing.ProcessingModuleList processing_module_list = 8;
  if (has_processing_module_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *type_.processing_module_list_, output);
  }

  // optional .ubii.devices.TopicMux topic_mux = 9;
  if (has_topic_mux()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *type_.topic_mux_, output);
  }

  // optional .ubii.devices.TopicMuxList topic_mux_list = 10;
  if (has_topic_mux_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *type_.topic_mux_list_, output);
  }

  // optional .ubii.devices.TopicDemux topic_demux = 11;
  if (has_topic_demux()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *type_.topic_demux_, output);
  }

  // optional .ubii.devices.TopicDemuxList topic_demux_list = 12;
  if (has_topic_demux_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *type_.topic_demux_list_, output);
  }

  // optional .ubii.clients.ClientList client_list = 13;
  if (has_client_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *type_.client_list_, output);
  }

  // optional .ubii.devices.DeviceList device_list = 14;
  if (has_device_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *type_.device_list_, output);
  }

  // optional .ubii.processing.LockstepProcessingRequest lockstep_processing_request = 15;
  if (has_lockstep_processing_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *type_.lockstep_processing_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.services.ServiceRequest)
}

::google::protobuf::uint8* ServiceRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.services.ServiceRequest)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.services.ServiceRequest.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // optional .ubii.clients.Client client = 2;
  if (has_client()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.client_, false, target);
  }

  // optional .ubii.devices.Device device = 3;
  if (has_device()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *type_.device_, false, target);
  }

  // optional .ubii.services.request.TopicSubscription topic_subscription = 4;
  if (has_topic_subscription()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *type_.topic_subscription_, false, target);
  }

  // optional .ubii.sessions.Session session = 5;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *type_.session_, false, target);
  }

  // optional .ubii.sessions.SessionList session_list = 6;
  if (has_session_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *type_.session_list_, false, target);
  }

  // optional .ubii.processing.ProcessingModule processing_module = 7;
  if (has_processing_module()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *type_.processing_module_, false, target);
  }

  // optional .ubii.processing.ProcessingModuleList processing_module_list = 8;
  if (has_processing_module_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *type_.processing_module_list_, false, target);
  }

  // optional .ubii.devices.TopicMux topic_mux = 9;
  if (has_topic_mux()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *type_.topic_mux_, false, target);
  }

  // optional .ubii.devices.TopicMuxList topic_mux_list = 10;
  if (has_topic_mux_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *type_.topic_mux_list_, false, target);
  }

  // optional .ubii.devices.TopicDemux topic_demux = 11;
  if (has_topic_demux()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *type_.topic_demux_, false, target);
  }

  // optional .ubii.devices.TopicDemuxList topic_demux_list = 12;
  if (has_topic_demux_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *type_.topic_demux_list_, false, target);
  }

  // optional .ubii.clients.ClientList client_list = 13;
  if (has_client_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *type_.client_list_, false, target);
  }

  // optional .ubii.devices.DeviceList device_list = 14;
  if (has_device_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *type_.device_list_, false, target);
  }

  // optional .ubii.processing.LockstepProcessingRequest lockstep_processing_request = 15;
  if (has_lockstep_processing_request()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *type_.lockstep_processing_request_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.services.ServiceRequest)
  return target;
}

int ServiceRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.services.ServiceRequest)
  int total_size = 0;

  // optional string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  switch (type_case()) {
    // optional .ubii.clients.Client client = 2;
    case kClient: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.client_);
      break;
    }
    // optional .ubii.devices.Device device = 3;
    case kDevice: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.device_);
      break;
    }
    // optional .ubii.services.request.TopicSubscription topic_subscription = 4;
    case kTopicSubscription: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_subscription_);
      break;
    }
    // optional .ubii.sessions.Session session = 5;
    case kSession: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.session_);
      break;
    }
    // optional .ubii.sessions.SessionList session_list = 6;
    case kSessionList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.session_list_);
      break;
    }
    // optional .ubii.processing.ProcessingModule processing_module = 7;
    case kProcessingModule: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.processing_module_);
      break;
    }
    // optional .ubii.processing.ProcessingModuleList processing_module_list = 8;
    case kProcessingModuleList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.processing_module_list_);
      break;
    }
    // optional .ubii.devices.TopicMux topic_mux = 9;
    case kTopicMux: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_mux_);
      break;
    }
    // optional .ubii.devices.TopicMuxList topic_mux_list = 10;
    case kTopicMuxList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_mux_list_);
      break;
    }
    // optional .ubii.devices.TopicDemux topic_demux = 11;
    case kTopicDemux: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_demux_);
      break;
    }
    // optional .ubii.devices.TopicDemuxList topic_demux_list = 12;
    case kTopicDemuxList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_demux_list_);
      break;
    }
    // optional .ubii.clients.ClientList client_list = 13;
    case kClientList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.client_list_);
      break;
    }
    // optional .ubii.devices.DeviceList device_list = 14;
    case kDeviceList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.device_list_);
      break;
    }
    // optional .ubii.processing.LockstepProcessingRequest lockstep_processing_request = 15;
    case kLockstepProcessingRequest: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.lockstep_processing_request_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.services.ServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ServiceRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ServiceRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.services.ServiceRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.services.ServiceRequest)
    MergeFrom(*source);
  }
}

void ServiceRequest::MergeFrom(const ServiceRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.services.ServiceRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.type_case()) {
    case kClient: {
      mutable_client()->::ubii::clients::Client::MergeFrom(from.client());
      break;
    }
    case kDevice: {
      mutable_device()->::ubii::devices::Device::MergeFrom(from.device());
      break;
    }
    case kTopicSubscription: {
      mutable_topic_subscription()->::ubii::services::request::TopicSubscription::MergeFrom(from.topic_subscription());
      break;
    }
    case kSession: {
      mutable_session()->::ubii::sessions::Session::MergeFrom(from.session());
      break;
    }
    case kSessionList: {
      mutable_session_list()->::ubii::sessions::SessionList::MergeFrom(from.session_list());
      break;
    }
    case kProcessingModule: {
      mutable_processing_module()->::ubii::processing::ProcessingModule::MergeFrom(from.processing_module());
      break;
    }
    case kProcessingModuleList: {
      mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from.processing_module_list());
      break;
    }
    case kTopicMux: {
      mutable_topic_mux()->::ubii::devices::TopicMux::MergeFrom(from.topic_mux());
      break;
    }
    case kTopicMuxList: {
      mutable_topic_mux_list()->::ubii::devices::TopicMuxList::MergeFrom(from.topic_mux_list());
      break;
    }
    case kTopicDemux: {
      mutable_topic_demux()->::ubii::devices::TopicDemux::MergeFrom(from.topic_demux());
      break;
    }
    case kTopicDemuxList: {
      mutable_topic_demux_list()->::ubii::devices::TopicDemuxList::MergeFrom(from.topic_demux_list());
      break;
    }
    case kClientList: {
      mutable_client_list()->::ubii::clients::ClientList::MergeFrom(from.client_list());
      break;
    }
    case kDeviceList: {
      mutable_device_list()->::ubii::devices::DeviceList::MergeFrom(from.device_list());
      break;
    }
    case kLockstepProcessingRequest: {
      mutable_lockstep_processing_request()->::ubii::processing::LockstepProcessingRequest::MergeFrom(from.lockstep_processing_request());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
}

void ServiceRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.services.ServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ServiceRequest::CopyFrom(const ServiceRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.services.ServiceRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceRequest::IsInitialized() const {

  return true;
}

void ServiceRequest::Swap(ServiceRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceRequest::InternalSwap(ServiceRequest* other) {
  topic_.Swap(&other->topic_);
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ServiceRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ServiceRequest_descriptor_;
  metadata.reflection = ServiceRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceRequest

// optional string topic = 1;
void ServiceRequest::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& ServiceRequest::topic() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceRequest::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.ServiceRequest.topic)
}
 void ServiceRequest::set_topic(const char* value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.ServiceRequest.topic)
}
 void ServiceRequest::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.ServiceRequest.topic)
}
 ::std::string* ServiceRequest::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* ServiceRequest::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void ServiceRequest::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.topic)
}

// optional .ubii.clients.Client client = 2;
bool ServiceRequest::has_client() const {
  return type_case() == kClient;
}
void ServiceRequest::set_has_client() {
  _oneof_case_[0] = kClient;
}
void ServiceRequest::clear_client() {
  if (has_client()) {
    delete type_.client_;
    clear_has_type();
  }
}
 const ::ubii::clients::Client& ServiceRequest::client() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.client)
  return has_client()
      ? *type_.client_
      : ::ubii::clients::Client::default_instance();
}
::ubii::clients::Client* ServiceRequest::mutable_client() {
  if (!has_client()) {
    clear_type();
    set_has_client();
    type_.client_ = new ::ubii::clients::Client;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.client)
  return type_.client_;
}
::ubii::clients::Client* ServiceRequest::release_client() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.client)
  if (has_client()) {
    clear_has_type();
    ::ubii::clients::Client* temp = type_.client_;
    type_.client_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_client(::ubii::clients::Client* client) {
  clear_type();
  if (client) {
    set_has_client();
    type_.client_ = client;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.client)
}

// optional .ubii.devices.Device device = 3;
bool ServiceRequest::has_device() const {
  return type_case() == kDevice;
}
void ServiceRequest::set_has_device() {
  _oneof_case_[0] = kDevice;
}
void ServiceRequest::clear_device() {
  if (has_device()) {
    delete type_.device_;
    clear_has_type();
  }
}
 const ::ubii::devices::Device& ServiceRequest::device() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.device)
  return has_device()
      ? *type_.device_
      : ::ubii::devices::Device::default_instance();
}
::ubii::devices::Device* ServiceRequest::mutable_device() {
  if (!has_device()) {
    clear_type();
    set_has_device();
    type_.device_ = new ::ubii::devices::Device;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.device)
  return type_.device_;
}
::ubii::devices::Device* ServiceRequest::release_device() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.device)
  if (has_device()) {
    clear_has_type();
    ::ubii::devices::Device* temp = type_.device_;
    type_.device_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_device(::ubii::devices::Device* device) {
  clear_type();
  if (device) {
    set_has_device();
    type_.device_ = device;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.device)
}

// optional .ubii.services.request.TopicSubscription topic_subscription = 4;
bool ServiceRequest::has_topic_subscription() const {
  return type_case() == kTopicSubscription;
}
void ServiceRequest::set_has_topic_subscription() {
  _oneof_case_[0] = kTopicSubscription;
}
void ServiceRequest::clear_topic_subscription() {
  if (has_topic_subscription()) {
    delete type_.topic_subscription_;
    clear_has_type();
  }
}
 const ::ubii::services::request::TopicSubscription& ServiceRequest::topic_subscription() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.topic_subscription)
  return has_topic_subscription()
      ? *type_.topic_subscription_
      : ::ubii::services::request::TopicSubscription::default_instance();
}
::ubii::services::request::TopicSubscription* ServiceRequest::mutable_topic_subscription() {
  if (!has_topic_subscription()) {
    clear_type();
    set_has_topic_subscription();
    type_.topic_subscription_ = new ::ubii::services::request::TopicSubscription;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.topic_subscription)
  return type_.topic_subscription_;
}
::ubii::services::request::TopicSubscription* ServiceRequest::release_topic_subscription() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.topic_subscription)
  if (has_topic_subscription()) {
    clear_has_type();
    ::ubii::services::request::TopicSubscription* temp = type_.topic_subscription_;
    type_.topic_subscription_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_topic_subscription(::ubii::services::request::TopicSubscription* topic_subscription) {
  clear_type();
  if (topic_subscription) {
    set_has_topic_subscription();
    type_.topic_subscription_ = topic_subscription;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.topic_subscription)
}

// optional .ubii.sessions.Session session = 5;
bool ServiceRequest::has_session() const {
  return type_case() == kSession;
}
void ServiceRequest::set_has_session() {
  _oneof_case_[0] = kSession;
}
void ServiceRequest::clear_session() {
  if (has_session()) {
    delete type_.session_;
    clear_has_type();
  }
}
 const ::ubii::sessions::Session& ServiceRequest::session() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.session)
  return has_session()
      ? *type_.session_
      : ::ubii::sessions::Session::default_instance();
}
::ubii::sessions::Session* ServiceRequest::mutable_session() {
  if (!has_session()) {
    clear_type();
    set_has_session();
    type_.session_ = new ::ubii::sessions::Session;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.session)
  return type_.session_;
}
::ubii::sessions::Session* ServiceRequest::release_session() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.session)
  if (has_session()) {
    clear_has_type();
    ::ubii::sessions::Session* temp = type_.session_;
    type_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_session(::ubii::sessions::Session* session) {
  clear_type();
  if (session) {
    set_has_session();
    type_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.session)
}

// optional .ubii.sessions.SessionList session_list = 6;
bool ServiceRequest::has_session_list() const {
  return type_case() == kSessionList;
}
void ServiceRequest::set_has_session_list() {
  _oneof_case_[0] = kSessionList;
}
void ServiceRequest::clear_session_list() {
  if (has_session_list()) {
    delete type_.session_list_;
    clear_has_type();
  }
}
 const ::ubii::sessions::SessionList& ServiceRequest::session_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.session_list)
  return has_session_list()
      ? *type_.session_list_
      : ::ubii::sessions::SessionList::default_instance();
}
::ubii::sessions::SessionList* ServiceRequest::mutable_session_list() {
  if (!has_session_list()) {
    clear_type();
    set_has_session_list();
    type_.session_list_ = new ::ubii::sessions::SessionList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.session_list)
  return type_.session_list_;
}
::ubii::sessions::SessionList* ServiceRequest::release_session_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.session_list)
  if (has_session_list()) {
    clear_has_type();
    ::ubii::sessions::SessionList* temp = type_.session_list_;
    type_.session_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_session_list(::ubii::sessions::SessionList* session_list) {
  clear_type();
  if (session_list) {
    set_has_session_list();
    type_.session_list_ = session_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.session_list)
}

// optional .ubii.processing.ProcessingModule processing_module = 7;
bool ServiceRequest::has_processing_module() const {
  return type_case() == kProcessingModule;
}
void ServiceRequest::set_has_processing_module() {
  _oneof_case_[0] = kProcessingModule;
}
void ServiceRequest::clear_processing_module() {
  if (has_processing_module()) {
    delete type_.processing_module_;
    clear_has_type();
  }
}
 const ::ubii::processing::ProcessingModule& ServiceRequest::processing_module() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.processing_module)
  return has_processing_module()
      ? *type_.processing_module_
      : ::ubii::processing::ProcessingModule::default_instance();
}
::ubii::processing::ProcessingModule* ServiceRequest::mutable_processing_module() {
  if (!has_processing_module()) {
    clear_type();
    set_has_processing_module();
    type_.processing_module_ = new ::ubii::processing::ProcessingModule;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.processing_module)
  return type_.processing_module_;
}
::ubii::processing::ProcessingModule* ServiceRequest::release_processing_module() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.processing_module)
  if (has_processing_module()) {
    clear_has_type();
    ::ubii::processing::ProcessingModule* temp = type_.processing_module_;
    type_.processing_module_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_processing_module(::ubii::processing::ProcessingModule* processing_module) {
  clear_type();
  if (processing_module) {
    set_has_processing_module();
    type_.processing_module_ = processing_module;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.processing_module)
}

// optional .ubii.processing.ProcessingModuleList processing_module_list = 8;
bool ServiceRequest::has_processing_module_list() const {
  return type_case() == kProcessingModuleList;
}
void ServiceRequest::set_has_processing_module_list() {
  _oneof_case_[0] = kProcessingModuleList;
}
void ServiceRequest::clear_processing_module_list() {
  if (has_processing_module_list()) {
    delete type_.processing_module_list_;
    clear_has_type();
  }
}
 const ::ubii::processing::ProcessingModuleList& ServiceRequest::processing_module_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.processing_module_list)
  return has_processing_module_list()
      ? *type_.processing_module_list_
      : ::ubii::processing::ProcessingModuleList::default_instance();
}
::ubii::processing::ProcessingModuleList* ServiceRequest::mutable_processing_module_list() {
  if (!has_processing_module_list()) {
    clear_type();
    set_has_processing_module_list();
    type_.processing_module_list_ = new ::ubii::processing::ProcessingModuleList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.processing_module_list)
  return type_.processing_module_list_;
}
::ubii::processing::ProcessingModuleList* ServiceRequest::release_processing_module_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.processing_module_list)
  if (has_processing_module_list()) {
    clear_has_type();
    ::ubii::processing::ProcessingModuleList* temp = type_.processing_module_list_;
    type_.processing_module_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_processing_module_list(::ubii::processing::ProcessingModuleList* processing_module_list) {
  clear_type();
  if (processing_module_list) {
    set_has_processing_module_list();
    type_.processing_module_list_ = processing_module_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.processing_module_list)
}

// optional .ubii.devices.TopicMux topic_mux = 9;
bool ServiceRequest::has_topic_mux() const {
  return type_case() == kTopicMux;
}
void ServiceRequest::set_has_topic_mux() {
  _oneof_case_[0] = kTopicMux;
}
void ServiceRequest::clear_topic_mux() {
  if (has_topic_mux()) {
    delete type_.topic_mux_;
    clear_has_type();
  }
}
 const ::ubii::devices::TopicMux& ServiceRequest::topic_mux() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.topic_mux)
  return has_topic_mux()
      ? *type_.topic_mux_
      : ::ubii::devices::TopicMux::default_instance();
}
::ubii::devices::TopicMux* ServiceRequest::mutable_topic_mux() {
  if (!has_topic_mux()) {
    clear_type();
    set_has_topic_mux();
    type_.topic_mux_ = new ::ubii::devices::TopicMux;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.topic_mux)
  return type_.topic_mux_;
}
::ubii::devices::TopicMux* ServiceRequest::release_topic_mux() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.topic_mux)
  if (has_topic_mux()) {
    clear_has_type();
    ::ubii::devices::TopicMux* temp = type_.topic_mux_;
    type_.topic_mux_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_topic_mux(::ubii::devices::TopicMux* topic_mux) {
  clear_type();
  if (topic_mux) {
    set_has_topic_mux();
    type_.topic_mux_ = topic_mux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.topic_mux)
}

// optional .ubii.devices.TopicMuxList topic_mux_list = 10;
bool ServiceRequest::has_topic_mux_list() const {
  return type_case() == kTopicMuxList;
}
void ServiceRequest::set_has_topic_mux_list() {
  _oneof_case_[0] = kTopicMuxList;
}
void ServiceRequest::clear_topic_mux_list() {
  if (has_topic_mux_list()) {
    delete type_.topic_mux_list_;
    clear_has_type();
  }
}
 const ::ubii::devices::TopicMuxList& ServiceRequest::topic_mux_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.topic_mux_list)
  return has_topic_mux_list()
      ? *type_.topic_mux_list_
      : ::ubii::devices::TopicMuxList::default_instance();
}
::ubii::devices::TopicMuxList* ServiceRequest::mutable_topic_mux_list() {
  if (!has_topic_mux_list()) {
    clear_type();
    set_has_topic_mux_list();
    type_.topic_mux_list_ = new ::ubii::devices::TopicMuxList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.topic_mux_list)
  return type_.topic_mux_list_;
}
::ubii::devices::TopicMuxList* ServiceRequest::release_topic_mux_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.topic_mux_list)
  if (has_topic_mux_list()) {
    clear_has_type();
    ::ubii::devices::TopicMuxList* temp = type_.topic_mux_list_;
    type_.topic_mux_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_topic_mux_list(::ubii::devices::TopicMuxList* topic_mux_list) {
  clear_type();
  if (topic_mux_list) {
    set_has_topic_mux_list();
    type_.topic_mux_list_ = topic_mux_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.topic_mux_list)
}

// optional .ubii.devices.TopicDemux topic_demux = 11;
bool ServiceRequest::has_topic_demux() const {
  return type_case() == kTopicDemux;
}
void ServiceRequest::set_has_topic_demux() {
  _oneof_case_[0] = kTopicDemux;
}
void ServiceRequest::clear_topic_demux() {
  if (has_topic_demux()) {
    delete type_.topic_demux_;
    clear_has_type();
  }
}
 const ::ubii::devices::TopicDemux& ServiceRequest::topic_demux() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.topic_demux)
  return has_topic_demux()
      ? *type_.topic_demux_
      : ::ubii::devices::TopicDemux::default_instance();
}
::ubii::devices::TopicDemux* ServiceRequest::mutable_topic_demux() {
  if (!has_topic_demux()) {
    clear_type();
    set_has_topic_demux();
    type_.topic_demux_ = new ::ubii::devices::TopicDemux;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.topic_demux)
  return type_.topic_demux_;
}
::ubii::devices::TopicDemux* ServiceRequest::release_topic_demux() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.topic_demux)
  if (has_topic_demux()) {
    clear_has_type();
    ::ubii::devices::TopicDemux* temp = type_.topic_demux_;
    type_.topic_demux_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_topic_demux(::ubii::devices::TopicDemux* topic_demux) {
  clear_type();
  if (topic_demux) {
    set_has_topic_demux();
    type_.topic_demux_ = topic_demux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.topic_demux)
}

// optional .ubii.devices.TopicDemuxList topic_demux_list = 12;
bool ServiceRequest::has_topic_demux_list() const {
  return type_case() == kTopicDemuxList;
}
void ServiceRequest::set_has_topic_demux_list() {
  _oneof_case_[0] = kTopicDemuxList;
}
void ServiceRequest::clear_topic_demux_list() {
  if (has_topic_demux_list()) {
    delete type_.topic_demux_list_;
    clear_has_type();
  }
}
 const ::ubii::devices::TopicDemuxList& ServiceRequest::topic_demux_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.topic_demux_list)
  return has_topic_demux_list()
      ? *type_.topic_demux_list_
      : ::ubii::devices::TopicDemuxList::default_instance();
}
::ubii::devices::TopicDemuxList* ServiceRequest::mutable_topic_demux_list() {
  if (!has_topic_demux_list()) {
    clear_type();
    set_has_topic_demux_list();
    type_.topic_demux_list_ = new ::ubii::devices::TopicDemuxList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.topic_demux_list)
  return type_.topic_demux_list_;
}
::ubii::devices::TopicDemuxList* ServiceRequest::release_topic_demux_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.topic_demux_list)
  if (has_topic_demux_list()) {
    clear_has_type();
    ::ubii::devices::TopicDemuxList* temp = type_.topic_demux_list_;
    type_.topic_demux_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_topic_demux_list(::ubii::devices::TopicDemuxList* topic_demux_list) {
  clear_type();
  if (topic_demux_list) {
    set_has_topic_demux_list();
    type_.topic_demux_list_ = topic_demux_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.topic_demux_list)
}

// optional .ubii.clients.ClientList client_list = 13;
bool ServiceRequest::has_client_list() const {
  return type_case() == kClientList;
}
void ServiceRequest::set_has_client_list() {
  _oneof_case_[0] = kClientList;
}
void ServiceRequest::clear_client_list() {
  if (has_client_list()) {
    delete type_.client_list_;
    clear_has_type();
  }
}
 const ::ubii::clients::ClientList& ServiceRequest::client_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.client_list)
  return has_client_list()
      ? *type_.client_list_
      : ::ubii::clients::ClientList::default_instance();
}
::ubii::clients::ClientList* ServiceRequest::mutable_client_list() {
  if (!has_client_list()) {
    clear_type();
    set_has_client_list();
    type_.client_list_ = new ::ubii::clients::ClientList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.client_list)
  return type_.client_list_;
}
::ubii::clients::ClientList* ServiceRequest::release_client_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.client_list)
  if (has_client_list()) {
    clear_has_type();
    ::ubii::clients::ClientList* temp = type_.client_list_;
    type_.client_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_client_list(::ubii::clients::ClientList* client_list) {
  clear_type();
  if (client_list) {
    set_has_client_list();
    type_.client_list_ = client_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.client_list)
}

// optional .ubii.devices.DeviceList device_list = 14;
bool ServiceRequest::has_device_list() const {
  return type_case() == kDeviceList;
}
void ServiceRequest::set_has_device_list() {
  _oneof_case_[0] = kDeviceList;
}
void ServiceRequest::clear_device_list() {
  if (has_device_list()) {
    delete type_.device_list_;
    clear_has_type();
  }
}
 const ::ubii::devices::DeviceList& ServiceRequest::device_list() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.device_list)
  return has_device_list()
      ? *type_.device_list_
      : ::ubii::devices::DeviceList::default_instance();
}
::ubii::devices::DeviceList* ServiceRequest::mutable_device_list() {
  if (!has_device_list()) {
    clear_type();
    set_has_device_list();
    type_.device_list_ = new ::ubii::devices::DeviceList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.device_list)
  return type_.device_list_;
}
::ubii::devices::DeviceList* ServiceRequest::release_device_list() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.device_list)
  if (has_device_list()) {
    clear_has_type();
    ::ubii::devices::DeviceList* temp = type_.device_list_;
    type_.device_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_device_list(::ubii::devices::DeviceList* device_list) {
  clear_type();
  if (device_list) {
    set_has_device_list();
    type_.device_list_ = device_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.device_list)
}

// optional .ubii.processing.LockstepProcessingRequest lockstep_processing_request = 15;
bool ServiceRequest::has_lockstep_processing_request() const {
  return type_case() == kLockstepProcessingRequest;
}
void ServiceRequest::set_has_lockstep_processing_request() {
  _oneof_case_[0] = kLockstepProcessingRequest;
}
void ServiceRequest::clear_lockstep_processing_request() {
  if (has_lockstep_processing_request()) {
    delete type_.lockstep_processing_request_;
    clear_has_type();
  }
}
 const ::ubii::processing::LockstepProcessingRequest& ServiceRequest::lockstep_processing_request() const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceRequest.lockstep_processing_request)
  return has_lockstep_processing_request()
      ? *type_.lockstep_processing_request_
      : ::ubii::processing::LockstepProcessingRequest::default_instance();
}
::ubii::processing::LockstepProcessingRequest* ServiceRequest::mutable_lockstep_processing_request() {
  if (!has_lockstep_processing_request()) {
    clear_type();
    set_has_lockstep_processing_request();
    type_.lockstep_processing_request_ = new ::ubii::processing::LockstepProcessingRequest;
  }
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceRequest.lockstep_processing_request)
  return type_.lockstep_processing_request_;
}
::ubii::processing::LockstepProcessingRequest* ServiceRequest::release_lockstep_processing_request() {
  // @@protoc_insertion_point(field_release:ubii.services.ServiceRequest.lockstep_processing_request)
  if (has_lockstep_processing_request()) {
    clear_has_type();
    ::ubii::processing::LockstepProcessingRequest* temp = type_.lockstep_processing_request_;
    type_.lockstep_processing_request_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void ServiceRequest::set_allocated_lockstep_processing_request(::ubii::processing::LockstepProcessingRequest* lockstep_processing_request) {
  clear_type();
  if (lockstep_processing_request) {
    set_has_lockstep_processing_request();
    type_.lockstep_processing_request_ = lockstep_processing_request;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.services.ServiceRequest.lockstep_processing_request)
}

bool ServiceRequest::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void ServiceRequest::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
ServiceRequest::TypeCase ServiceRequest::type_case() const {
  return ServiceRequest::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
