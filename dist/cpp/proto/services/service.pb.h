// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/services/service.proto

#ifndef PROTOBUF_proto_2fservices_2fservice_2eproto__INCLUDED
#define PROTOBUF_proto_2fservices_2fservice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace services {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fservices_2fservice_2eproto();
void protobuf_AssignDesc_proto_2fservices_2fservice_2eproto();
void protobuf_ShutdownFile_proto_2fservices_2fservice_2eproto();

class Service;
class ServiceList;

// ===================================================================

class Service : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.services.Service) */ {
 public:
  Service();
  virtual ~Service();

  Service(const Service& from);

  inline Service& operator=(const Service& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Service& default_instance();

  void Swap(Service* other);

  // implements Message ----------------------------------------------

  inline Service* New() const { return New(NULL); }

  Service* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Service& from);
  void MergeFrom(const Service& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Service* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // optional string request_message_format = 2;
  void clear_request_message_format();
  static const int kRequestMessageFormatFieldNumber = 2;
  const ::std::string& request_message_format() const;
  void set_request_message_format(const ::std::string& value);
  void set_request_message_format(const char* value);
  void set_request_message_format(const char* value, size_t size);
  ::std::string* mutable_request_message_format();
  ::std::string* release_request_message_format();
  void set_allocated_request_message_format(::std::string* request_message_format);

  // optional string response_message_format = 3;
  void clear_response_message_format();
  static const int kResponseMessageFormatFieldNumber = 3;
  const ::std::string& response_message_format() const;
  void set_response_message_format(const ::std::string& value);
  void set_response_message_format(const char* value);
  void set_response_message_format(const char* value, size_t size);
  ::std::string* mutable_response_message_format();
  ::std::string* release_response_message_format();
  void set_allocated_response_message_format(::std::string* response_message_format);

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:ubii.services.Service)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::google::protobuf::internal::ArenaStringPtr request_message_format_;
  ::google::protobuf::internal::ArenaStringPtr response_message_format_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fservices_2fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fservices_2fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fservices_2fservice_2eproto();

  void InitAsDefaultInstance();
  static Service* default_instance_;
};
// -------------------------------------------------------------------

class ServiceList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.services.ServiceList) */ {
 public:
  ServiceList();
  virtual ~ServiceList();

  ServiceList(const ServiceList& from);

  inline ServiceList& operator=(const ServiceList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ServiceList& default_instance();

  void Swap(ServiceList* other);

  // implements Message ----------------------------------------------

  inline ServiceList* New() const { return New(NULL); }

  ServiceList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ServiceList& from);
  void MergeFrom(const ServiceList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ServiceList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.services.Service elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  const ::ubii::services::Service& elements(int index) const;
  ::ubii::services::Service* mutable_elements(int index);
  ::ubii::services::Service* add_elements();
  ::google::protobuf::RepeatedPtrField< ::ubii::services::Service >*
      mutable_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::services::Service >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.services.ServiceList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ubii::services::Service > elements_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fservices_2fservice_2eproto();
  friend void protobuf_AssignDesc_proto_2fservices_2fservice_2eproto();
  friend void protobuf_ShutdownFile_proto_2fservices_2fservice_2eproto();

  void InitAsDefaultInstance();
  static ServiceList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Service

// optional string topic = 1;
inline void Service::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service::topic() const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.Service.topic)
}
inline void Service::set_topic(const char* value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.topic)
}
inline void Service::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.topic)
}
inline ::std::string* Service::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.services.Service.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.Service.topic)
}

// optional string request_message_format = 2;
inline void Service::clear_request_message_format() {
  request_message_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service::request_message_format() const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.request_message_format)
  return request_message_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_request_message_format(const ::std::string& value) {
  
  request_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.Service.request_message_format)
}
inline void Service::set_request_message_format(const char* value) {
  
  request_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.request_message_format)
}
inline void Service::set_request_message_format(const char* value, size_t size) {
  
  request_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.request_message_format)
}
inline ::std::string* Service::mutable_request_message_format() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.request_message_format)
  return request_message_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_request_message_format() {
  // @@protoc_insertion_point(field_release:ubii.services.Service.request_message_format)
  
  return request_message_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_request_message_format(::std::string* request_message_format) {
  if (request_message_format != NULL) {
    
  } else {
    
  }
  request_message_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), request_message_format);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.Service.request_message_format)
}

// optional string response_message_format = 3;
inline void Service::clear_response_message_format() {
  response_message_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service::response_message_format() const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.response_message_format)
  return response_message_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_response_message_format(const ::std::string& value) {
  
  response_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.Service.response_message_format)
}
inline void Service::set_response_message_format(const char* value) {
  
  response_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.response_message_format)
}
inline void Service::set_response_message_format(const char* value, size_t size) {
  
  response_message_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.response_message_format)
}
inline ::std::string* Service::mutable_response_message_format() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.response_message_format)
  return response_message_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_response_message_format() {
  // @@protoc_insertion_point(field_release:ubii.services.Service.response_message_format)
  
  return response_message_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_response_message_format(::std::string* response_message_format) {
  if (response_message_format != NULL) {
    
  } else {
    
  }
  response_message_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), response_message_format);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.Service.response_message_format)
}

// repeated string tags = 4;
inline int Service::tags_size() const {
  return tags_.size();
}
inline void Service::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Service::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.tags)
  return tags_.Get(index);
}
inline ::std::string* Service::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.tags)
  return tags_.Mutable(index);
}
inline void Service::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.services.Service.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Service::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.tags)
}
inline void Service::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.tags)
}
inline ::std::string* Service::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.services.Service.tags)
  return tags_.Add();
}
inline void Service::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.services.Service.tags)
}
inline void Service::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.services.Service.tags)
}
inline void Service::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.services.Service.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Service::tags() const {
  // @@protoc_insertion_point(field_list:ubii.services.Service.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Service::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.Service.tags)
  return &tags_;
}

// optional string description = 5;
inline void Service::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Service::description() const {
  // @@protoc_insertion_point(field_get:ubii.services.Service.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.services.Service.description)
}
inline void Service::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.services.Service.description)
}
inline void Service::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.services.Service.description)
}
inline ::std::string* Service::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ubii.services.Service.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Service::release_description() {
  // @@protoc_insertion_point(field_release:ubii.services.Service.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Service::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.services.Service.description)
}

// -------------------------------------------------------------------

// ServiceList

// repeated .ubii.services.Service elements = 1;
inline int ServiceList::elements_size() const {
  return elements_.size();
}
inline void ServiceList::clear_elements() {
  elements_.Clear();
}
inline const ::ubii::services::Service& ServiceList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.services.ServiceList.elements)
  return elements_.Get(index);
}
inline ::ubii::services::Service* ServiceList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.services.ServiceList.elements)
  return elements_.Mutable(index);
}
inline ::ubii::services::Service* ServiceList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.services.ServiceList.elements)
  return elements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::services::Service >*
ServiceList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.services.ServiceList.elements)
  return &elements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::services::Service >&
ServiceList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.services.ServiceList.elements)
  return elements_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace services
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fservices_2fservice_2eproto__INCLUDED
