// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/clients/client.proto

#ifndef PROTOBUF_proto_2fclients_2fclient_2eproto__INCLUDED
#define PROTOBUF_proto_2fclients_2fclient_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/devices/device.pb.h"
// @@protoc_insertion_point(includes)

namespace ubii {
namespace clients {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fclients_2fclient_2eproto();
void protobuf_AssignDesc_proto_2fclients_2fclient_2eproto();
void protobuf_ShutdownFile_proto_2fclients_2fclient_2eproto();

class Client;
class ClientList;

// ===================================================================

class Client : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.clients.Client) */ {
 public:
  Client();
  virtual ~Client();

  Client(const Client& from);

  inline Client& operator=(const Client& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Client& default_instance();

  void Swap(Client* other);

  // implements Message ----------------------------------------------

  inline Client* New() const { return New(NULL); }

  Client* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Client& from);
  void MergeFrom(const Client& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Client* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // repeated .ubii.devices.Device devices = 3;
  int devices_size() const;
  void clear_devices();
  static const int kDevicesFieldNumber = 3;
  const ::ubii::devices::Device& devices(int index) const;
  ::ubii::devices::Device* mutable_devices(int index);
  ::ubii::devices::Device* add_devices();
  ::google::protobuf::RepeatedPtrField< ::ubii::devices::Device >*
      mutable_devices();
  const ::google::protobuf::RepeatedPtrField< ::ubii::devices::Device >&
      devices() const;

  // repeated string tags = 4;
  int tags_size() const;
  void clear_tags();
  static const int kTagsFieldNumber = 4;
  const ::std::string& tags(int index) const;
  ::std::string* mutable_tags(int index);
  void set_tags(int index, const ::std::string& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  ::std::string* add_tags();
  void add_tags(const ::std::string& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& tags() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_tags();

  // optional string description = 5;
  void clear_description();
  static const int kDescriptionFieldNumber = 5;
  const ::std::string& description() const;
  void set_description(const ::std::string& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  ::std::string* mutable_description();
  ::std::string* release_description();
  void set_allocated_description(::std::string* description);

  // @@protoc_insertion_point(class_scope:ubii.clients.Client)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::RepeatedPtrField< ::ubii::devices::Device > devices_;
  ::google::protobuf::RepeatedPtrField< ::std::string> tags_;
  ::google::protobuf::internal::ArenaStringPtr description_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fclients_2fclient_2eproto();
  friend void protobuf_AssignDesc_proto_2fclients_2fclient_2eproto();
  friend void protobuf_ShutdownFile_proto_2fclients_2fclient_2eproto();

  void InitAsDefaultInstance();
  static Client* default_instance_;
};
// -------------------------------------------------------------------

class ClientList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.clients.ClientList) */ {
 public:
  ClientList();
  virtual ~ClientList();

  ClientList(const ClientList& from);

  inline ClientList& operator=(const ClientList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientList& default_instance();

  void Swap(ClientList* other);

  // implements Message ----------------------------------------------

  inline ClientList* New() const { return New(NULL); }

  ClientList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientList& from);
  void MergeFrom(const ClientList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.clients.Client elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  const ::ubii::clients::Client& elements(int index) const;
  ::ubii::clients::Client* mutable_elements(int index);
  ::ubii::clients::Client* add_elements();
  ::google::protobuf::RepeatedPtrField< ::ubii::clients::Client >*
      mutable_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::clients::Client >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.clients.ClientList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ubii::clients::Client > elements_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fclients_2fclient_2eproto();
  friend void protobuf_AssignDesc_proto_2fclients_2fclient_2eproto();
  friend void protobuf_ShutdownFile_proto_2fclients_2fclient_2eproto();

  void InitAsDefaultInstance();
  static ClientList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Client

// optional string id = 1;
inline void Client::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Client::id() const {
  // @@protoc_insertion_point(field_get:ubii.clients.Client.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.clients.Client.id)
}
inline void Client::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.clients.Client.id)
}
inline void Client::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.clients.Client.id)
}
inline ::std::string* Client::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.clients.Client.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Client::release_id() {
  // @@protoc_insertion_point(field_release:ubii.clients.Client.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.clients.Client.id)
}

// optional string name = 2;
inline void Client::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Client::name() const {
  // @@protoc_insertion_point(field_get:ubii.clients.Client.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.clients.Client.name)
}
inline void Client::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.clients.Client.name)
}
inline void Client::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.clients.Client.name)
}
inline ::std::string* Client::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ubii.clients.Client.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Client::release_name() {
  // @@protoc_insertion_point(field_release:ubii.clients.Client.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.clients.Client.name)
}

// repeated .ubii.devices.Device devices = 3;
inline int Client::devices_size() const {
  return devices_.size();
}
inline void Client::clear_devices() {
  devices_.Clear();
}
inline const ::ubii::devices::Device& Client::devices(int index) const {
  // @@protoc_insertion_point(field_get:ubii.clients.Client.devices)
  return devices_.Get(index);
}
inline ::ubii::devices::Device* Client::mutable_devices(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.clients.Client.devices)
  return devices_.Mutable(index);
}
inline ::ubii::devices::Device* Client::add_devices() {
  // @@protoc_insertion_point(field_add:ubii.clients.Client.devices)
  return devices_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::devices::Device >*
Client::mutable_devices() {
  // @@protoc_insertion_point(field_mutable_list:ubii.clients.Client.devices)
  return &devices_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::devices::Device >&
Client::devices() const {
  // @@protoc_insertion_point(field_list:ubii.clients.Client.devices)
  return devices_;
}

// repeated string tags = 4;
inline int Client::tags_size() const {
  return tags_.size();
}
inline void Client::clear_tags() {
  tags_.Clear();
}
inline const ::std::string& Client::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.clients.Client.tags)
  return tags_.Get(index);
}
inline ::std::string* Client::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.clients.Client.tags)
  return tags_.Mutable(index);
}
inline void Client::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.clients.Client.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Client::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.clients.Client.tags)
}
inline void Client::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.clients.Client.tags)
}
inline ::std::string* Client::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.clients.Client.tags)
  return tags_.Add();
}
inline void Client::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.clients.Client.tags)
}
inline void Client::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.clients.Client.tags)
}
inline void Client::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.clients.Client.tags)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
Client::tags() const {
  // @@protoc_insertion_point(field_list:ubii.clients.Client.tags)
  return tags_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
Client::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.clients.Client.tags)
  return &tags_;
}

// optional string description = 5;
inline void Client::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Client::description() const {
  // @@protoc_insertion_point(field_get:ubii.clients.Client.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.clients.Client.description)
}
inline void Client::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.clients.Client.description)
}
inline void Client::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.clients.Client.description)
}
inline ::std::string* Client::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ubii.clients.Client.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Client::release_description() {
  // @@protoc_insertion_point(field_release:ubii.clients.Client.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Client::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.clients.Client.description)
}

// -------------------------------------------------------------------

// ClientList

// repeated .ubii.clients.Client elements = 1;
inline int ClientList::elements_size() const {
  return elements_.size();
}
inline void ClientList::clear_elements() {
  elements_.Clear();
}
inline const ::ubii::clients::Client& ClientList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.clients.ClientList.elements)
  return elements_.Get(index);
}
inline ::ubii::clients::Client* ClientList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.clients.ClientList.elements)
  return elements_.Mutable(index);
}
inline ::ubii::clients::Client* ClientList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.clients.ClientList.elements)
  return elements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::clients::Client >*
ClientList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.clients.ClientList.elements)
  return &elements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::clients::Client >&
ClientList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.clients.ClientList.elements)
  return elements_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace clients
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fclients_2fclient_2eproto__INCLUDED
