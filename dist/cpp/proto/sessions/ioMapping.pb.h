// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/sessions/ioMapping.proto

#ifndef PROTOBUF_INCLUDED_proto_2fsessions_2fioMapping_2eproto
#define PROTOBUF_INCLUDED_proto_2fsessions_2fioMapping_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/interactions/ioFormat.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsessions_2fioMapping_2eproto 

namespace protobuf_proto_2fsessions_2fioMapping_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fsessions_2fioMapping_2eproto
namespace ubii {
namespace sessions {
class IOMapping;
class IOMappingDefaultTypeInternal;
extern IOMappingDefaultTypeInternal _IOMapping_default_instance_;
}  // namespace sessions
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::sessions::IOMapping* Arena::CreateMaybeMessage<::ubii::sessions::IOMapping>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace sessions {

// ===================================================================

class IOMapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.IOMapping) */ {
 public:
  IOMapping();
  virtual ~IOMapping();

  IOMapping(const IOMapping& from);

  inline IOMapping& operator=(const IOMapping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IOMapping(IOMapping&& from) noexcept
    : IOMapping() {
    *this = ::std::move(from);
  }

  inline IOMapping& operator=(IOMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IOMapping& default_instance();

  enum IoTypeCase {
    kInteractionInput = 2,
    kInteractionOutput = 3,
    IO_TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOMapping* internal_default_instance() {
    return reinterpret_cast<const IOMapping*>(
               &_IOMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(IOMapping* other);
  friend void swap(IOMapping& a, IOMapping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IOMapping* New() const final {
    return CreateMaybeMessage<IOMapping>(NULL);
  }

  IOMapping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IOMapping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IOMapping& from);
  void MergeFrom(const IOMapping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOMapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string interaction_id = 1;
  void clear_interaction_id();
  static const int kInteractionIdFieldNumber = 1;
  const ::std::string& interaction_id() const;
  void set_interaction_id(const ::std::string& value);
  #if LANG_CXX11
  void set_interaction_id(::std::string&& value);
  #endif
  void set_interaction_id(const char* value);
  void set_interaction_id(const char* value, size_t size);
  ::std::string* mutable_interaction_id();
  ::std::string* release_interaction_id();
  void set_allocated_interaction_id(::std::string* interaction_id);

  // string topic = 4;
  void clear_topic();
  static const int kTopicFieldNumber = 4;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .ubii.interactions.IOFormat interaction_input = 2;
  bool has_interaction_input() const;
  void clear_interaction_input();
  static const int kInteractionInputFieldNumber = 2;
  private:
  const ::ubii::interactions::IOFormat& _internal_interaction_input() const;
  public:
  const ::ubii::interactions::IOFormat& interaction_input() const;
  ::ubii::interactions::IOFormat* release_interaction_input();
  ::ubii::interactions::IOFormat* mutable_interaction_input();
  void set_allocated_interaction_input(::ubii::interactions::IOFormat* interaction_input);

  // .ubii.interactions.IOFormat interaction_output = 3;
  bool has_interaction_output() const;
  void clear_interaction_output();
  static const int kInteractionOutputFieldNumber = 3;
  private:
  const ::ubii::interactions::IOFormat& _internal_interaction_output() const;
  public:
  const ::ubii::interactions::IOFormat& interaction_output() const;
  ::ubii::interactions::IOFormat* release_interaction_output();
  ::ubii::interactions::IOFormat* mutable_interaction_output();
  void set_allocated_interaction_output(::ubii::interactions::IOFormat* interaction_output);

  void clear_io_type();
  IoTypeCase io_type_case() const;
  // @@protoc_insertion_point(class_scope:ubii.sessions.IOMapping)
 private:
  void set_has_interaction_input();
  void set_has_interaction_output();

  inline bool has_io_type() const;
  inline void clear_has_io_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr interaction_id_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  union IoTypeUnion {
    IoTypeUnion() {}
    ::ubii::interactions::IOFormat* interaction_input_;
    ::ubii::interactions::IOFormat* interaction_output_;
  } io_type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fsessions_2fioMapping_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// IOMapping

// string interaction_id = 1;
inline void IOMapping::clear_interaction_id() {
  interaction_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IOMapping::interaction_id() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMapping.interaction_id)
  return interaction_id_.GetNoArena();
}
inline void IOMapping::set_interaction_id(const ::std::string& value) {
  
  interaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.sessions.IOMapping.interaction_id)
}
#if LANG_CXX11
inline void IOMapping::set_interaction_id(::std::string&& value) {
  
  interaction_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.IOMapping.interaction_id)
}
#endif
inline void IOMapping::set_interaction_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  interaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.IOMapping.interaction_id)
}
inline void IOMapping::set_interaction_id(const char* value, size_t size) {
  
  interaction_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.IOMapping.interaction_id)
}
inline ::std::string* IOMapping::mutable_interaction_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMapping.interaction_id)
  return interaction_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IOMapping::release_interaction_id() {
  // @@protoc_insertion_point(field_release:ubii.sessions.IOMapping.interaction_id)
  
  return interaction_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IOMapping::set_allocated_interaction_id(::std::string* interaction_id) {
  if (interaction_id != NULL) {
    
  } else {
    
  }
  interaction_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), interaction_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.IOMapping.interaction_id)
}

// .ubii.interactions.IOFormat interaction_input = 2;
inline bool IOMapping::has_interaction_input() const {
  return io_type_case() == kInteractionInput;
}
inline void IOMapping::set_has_interaction_input() {
  _oneof_case_[0] = kInteractionInput;
}
inline const ::ubii::interactions::IOFormat& IOMapping::_internal_interaction_input() const {
  return *io_type_.interaction_input_;
}
inline ::ubii::interactions::IOFormat* IOMapping::release_interaction_input() {
  // @@protoc_insertion_point(field_release:ubii.sessions.IOMapping.interaction_input)
  if (has_interaction_input()) {
    clear_has_io_type();
      ::ubii::interactions::IOFormat* temp = io_type_.interaction_input_;
    io_type_.interaction_input_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::interactions::IOFormat& IOMapping::interaction_input() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMapping.interaction_input)
  return has_interaction_input()
      ? *io_type_.interaction_input_
      : *reinterpret_cast< ::ubii::interactions::IOFormat*>(&::ubii::interactions::_IOFormat_default_instance_);
}
inline ::ubii::interactions::IOFormat* IOMapping::mutable_interaction_input() {
  if (!has_interaction_input()) {
    clear_io_type();
    set_has_interaction_input();
    io_type_.interaction_input_ = CreateMaybeMessage< ::ubii::interactions::IOFormat >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMapping.interaction_input)
  return io_type_.interaction_input_;
}

// .ubii.interactions.IOFormat interaction_output = 3;
inline bool IOMapping::has_interaction_output() const {
  return io_type_case() == kInteractionOutput;
}
inline void IOMapping::set_has_interaction_output() {
  _oneof_case_[0] = kInteractionOutput;
}
inline const ::ubii::interactions::IOFormat& IOMapping::_internal_interaction_output() const {
  return *io_type_.interaction_output_;
}
inline ::ubii::interactions::IOFormat* IOMapping::release_interaction_output() {
  // @@protoc_insertion_point(field_release:ubii.sessions.IOMapping.interaction_output)
  if (has_interaction_output()) {
    clear_has_io_type();
      ::ubii::interactions::IOFormat* temp = io_type_.interaction_output_;
    io_type_.interaction_output_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::interactions::IOFormat& IOMapping::interaction_output() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMapping.interaction_output)
  return has_interaction_output()
      ? *io_type_.interaction_output_
      : *reinterpret_cast< ::ubii::interactions::IOFormat*>(&::ubii::interactions::_IOFormat_default_instance_);
}
inline ::ubii::interactions::IOFormat* IOMapping::mutable_interaction_output() {
  if (!has_interaction_output()) {
    clear_io_type();
    set_has_interaction_output();
    io_type_.interaction_output_ = CreateMaybeMessage< ::ubii::interactions::IOFormat >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMapping.interaction_output)
  return io_type_.interaction_output_;
}

// string topic = 4;
inline void IOMapping::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IOMapping::topic() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMapping.topic)
  return topic_.GetNoArena();
}
inline void IOMapping::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.sessions.IOMapping.topic)
}
#if LANG_CXX11
inline void IOMapping::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.IOMapping.topic)
}
#endif
inline void IOMapping::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.IOMapping.topic)
}
inline void IOMapping::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.IOMapping.topic)
}
inline ::std::string* IOMapping::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMapping.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IOMapping::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.sessions.IOMapping.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IOMapping::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.IOMapping.topic)
}

inline bool IOMapping::has_io_type() const {
  return io_type_case() != IO_TYPE_NOT_SET;
}
inline void IOMapping::clear_has_io_type() {
  _oneof_case_[0] = IO_TYPE_NOT_SET;
}
inline IOMapping::IoTypeCase IOMapping::io_type_case() const {
  return IOMapping::IoTypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace sessions
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fsessions_2fioMapping_2eproto
