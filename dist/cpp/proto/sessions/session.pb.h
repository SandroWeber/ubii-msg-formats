// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/sessions/session.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fsessions_2fsession_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fsessions_2fsession_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/interactions/interaction.pb.h"
#include "proto/sessions/ioMapping.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fsessions_2fsession_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fsessions_2fsession_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsessions_2fsession_2eproto;
namespace ubii {
namespace sessions {
class Session;
class SessionDefaultTypeInternal;
extern SessionDefaultTypeInternal _Session_default_instance_;
class SessionList;
class SessionListDefaultTypeInternal;
extern SessionListDefaultTypeInternal _SessionList_default_instance_;
}  // namespace sessions
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::sessions::Session* Arena::CreateMaybeMessage<::ubii::sessions::Session>(Arena*);
template<> ::ubii::sessions::SessionList* Arena::CreateMaybeMessage<::ubii::sessions::SessionList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace sessions {

enum ProcessMode : int {
  CYCLE_INTERACTIONS = 0,
  INDIVIDUAL_PROCESS_FREQUENCIES = 1,
  ProcessMode_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcessMode_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcessMode_IsValid(int value);
constexpr ProcessMode ProcessMode_MIN = CYCLE_INTERACTIONS;
constexpr ProcessMode ProcessMode_MAX = INDIVIDUAL_PROCESS_FREQUENCIES;
constexpr int ProcessMode_ARRAYSIZE = ProcessMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessMode_descriptor();
template<typename T>
inline const std::string& ProcessMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessMode_descriptor(), enum_t_value);
}
inline bool ProcessMode_Parse(
    const std::string& name, ProcessMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessMode>(
    ProcessMode_descriptor(), name, value);
}
enum SessionStatus : int {
  CREATED = 0,
  RUNNING = 1,
  PAUSED = 2,
  STOPPED = 3,
  SessionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  SessionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool SessionStatus_IsValid(int value);
constexpr SessionStatus SessionStatus_MIN = CREATED;
constexpr SessionStatus SessionStatus_MAX = STOPPED;
constexpr int SessionStatus_ARRAYSIZE = SessionStatus_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* SessionStatus_descriptor();
template<typename T>
inline const std::string& SessionStatus_Name(T enum_t_value) {
  static_assert(::std::is_same<T, SessionStatus>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function SessionStatus_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    SessionStatus_descriptor(), enum_t_value);
}
inline bool SessionStatus_Parse(
    const std::string& name, SessionStatus* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<SessionStatus>(
    SessionStatus_descriptor(), name, value);
}
// ===================================================================

class Session :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.Session) */ {
 public:
  Session();
  virtual ~Session();

  Session(const Session& from);
  Session(Session&& from) noexcept
    : Session() {
    *this = ::std::move(from);
  }

  inline Session& operator=(const Session& from) {
    CopyFrom(from);
    return *this;
  }
  inline Session& operator=(Session&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Session& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Session* internal_default_instance() {
    return reinterpret_cast<const Session*>(
               &_Session_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Session& a, Session& b) {
    a.Swap(&b);
  }
  inline void Swap(Session* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Session* New() const final {
    return CreateMaybeMessage<Session>(nullptr);
  }

  Session* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Session>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Session& from);
  void MergeFrom(const Session& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Session* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.sessions.Session";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fsessions_2fsession_2eproto);
    return ::descriptor_table_proto_2fsessions_2fsession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInteractionsFieldNumber = 3,
    kIoMappingsFieldNumber = 4,
    kTagsFieldNumber = 5,
    kAuthorsFieldNumber = 7,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 6,
    kProcessModeFieldNumber = 8,
    kStatusFieldNumber = 9,
    kEditableFieldNumber = 10,
  };
  // repeated .ubii.interactions.Interaction interactions = 3;
  int interactions_size() const;
  private:
  int _internal_interactions_size() const;
  public:
  void clear_interactions();
  ::ubii::interactions::Interaction* mutable_interactions(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction >*
      mutable_interactions();
  private:
  const ::ubii::interactions::Interaction& _internal_interactions(int index) const;
  ::ubii::interactions::Interaction* _internal_add_interactions();
  public:
  const ::ubii::interactions::Interaction& interactions(int index) const;
  ::ubii::interactions::Interaction* add_interactions();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction >&
      interactions() const;

  // repeated .ubii.sessions.IOMapping io_mappings = 4;
  int io_mappings_size() const;
  private:
  int _internal_io_mappings_size() const;
  public:
  void clear_io_mappings();
  ::ubii::sessions::IOMapping* mutable_io_mappings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::IOMapping >*
      mutable_io_mappings();
  private:
  const ::ubii::sessions::IOMapping& _internal_io_mappings(int index) const;
  ::ubii::sessions::IOMapping* _internal_add_io_mappings();
  public:
  const ::ubii::sessions::IOMapping& io_mappings(int index) const;
  ::ubii::sessions::IOMapping* add_io_mappings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::IOMapping >&
      io_mappings() const;

  // repeated string tags = 5;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated string authors = 7;
  int authors_size() const;
  private:
  int _internal_authors_size() const;
  public:
  void clear_authors();
  const std::string& authors(int index) const;
  std::string* mutable_authors(int index);
  void set_authors(int index, const std::string& value);
  void set_authors(int index, std::string&& value);
  void set_authors(int index, const char* value);
  void set_authors(int index, const char* value, size_t size);
  std::string* add_authors();
  void add_authors(const std::string& value);
  void add_authors(std::string&& value);
  void add_authors(const char* value);
  void add_authors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authors();
  private:
  const std::string& _internal_authors(int index) const;
  std::string* _internal_add_authors();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .ubii.sessions.ProcessMode process_mode = 8;
  void clear_process_mode();
  ::ubii::sessions::ProcessMode process_mode() const;
  void set_process_mode(::ubii::sessions::ProcessMode value);
  private:
  ::ubii::sessions::ProcessMode _internal_process_mode() const;
  void _internal_set_process_mode(::ubii::sessions::ProcessMode value);
  public:

  // .ubii.sessions.SessionStatus status = 9;
  void clear_status();
  ::ubii::sessions::SessionStatus status() const;
  void set_status(::ubii::sessions::SessionStatus value);
  private:
  ::ubii::sessions::SessionStatus _internal_status() const;
  void _internal_set_status(::ubii::sessions::SessionStatus value);
  public:

  // bool editable = 10;
  void clear_editable();
  bool editable() const;
  void set_editable(bool value);
  private:
  bool _internal_editable() const;
  void _internal_set_editable(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.sessions.Session)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction > interactions_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::IOMapping > io_mappings_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authors_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int process_mode_;
  int status_;
  bool editable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsessions_2fsession_2eproto;
};
// -------------------------------------------------------------------

class SessionList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.SessionList) */ {
 public:
  SessionList();
  virtual ~SessionList();

  SessionList(const SessionList& from);
  SessionList(SessionList&& from) noexcept
    : SessionList() {
    *this = ::std::move(from);
  }

  inline SessionList& operator=(const SessionList& from) {
    CopyFrom(from);
    return *this;
  }
  inline SessionList& operator=(SessionList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SessionList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SessionList* internal_default_instance() {
    return reinterpret_cast<const SessionList*>(
               &_SessionList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SessionList& a, SessionList& b) {
    a.Swap(&b);
  }
  inline void Swap(SessionList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SessionList* New() const final {
    return CreateMaybeMessage<SessionList>(nullptr);
  }

  SessionList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SessionList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SessionList& from);
  void MergeFrom(const SessionList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SessionList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.sessions.SessionList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fsessions_2fsession_2eproto);
    return ::descriptor_table_proto_2fsessions_2fsession_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .ubii.sessions.Session elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ubii::sessions::Session* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::Session >*
      mutable_elements();
  private:
  const ::ubii::sessions::Session& _internal_elements(int index) const;
  ::ubii::sessions::Session* _internal_add_elements();
  public:
  const ::ubii::sessions::Session& elements(int index) const;
  ::ubii::sessions::Session* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::Session >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.sessions.SessionList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::Session > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fsessions_2fsession_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Session

// string id = 1;
inline void Session::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Session::id() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.id)
  return _internal_id();
}
inline void Session::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.id)
}
inline std::string* Session::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.Session.id)
  return _internal_mutable_id();
}
inline const std::string& Session::_internal_id() const {
  return id_.GetNoArena();
}
inline void Session::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Session::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.Session.id)
}
inline void Session::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.Session.id)
}
inline void Session::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.Session.id)
}
inline std::string* Session::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Session::release_id() {
  // @@protoc_insertion_point(field_release:ubii.sessions.Session.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.Session.id)
}

// string name = 2;
inline void Session::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Session::name() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.name)
  return _internal_name();
}
inline void Session::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.name)
}
inline std::string* Session::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.Session.name)
  return _internal_mutable_name();
}
inline const std::string& Session::_internal_name() const {
  return name_.GetNoArena();
}
inline void Session::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Session::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.Session.name)
}
inline void Session::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.Session.name)
}
inline void Session::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.Session.name)
}
inline std::string* Session::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Session::release_name() {
  // @@protoc_insertion_point(field_release:ubii.sessions.Session.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.Session.name)
}

// repeated .ubii.interactions.Interaction interactions = 3;
inline int Session::_internal_interactions_size() const {
  return interactions_.size();
}
inline int Session::interactions_size() const {
  return _internal_interactions_size();
}
inline ::ubii::interactions::Interaction* Session::mutable_interactions(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.Session.interactions)
  return interactions_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction >*
Session::mutable_interactions() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.Session.interactions)
  return &interactions_;
}
inline const ::ubii::interactions::Interaction& Session::_internal_interactions(int index) const {
  return interactions_.Get(index);
}
inline const ::ubii::interactions::Interaction& Session::interactions(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.interactions)
  return _internal_interactions(index);
}
inline ::ubii::interactions::Interaction* Session::_internal_add_interactions() {
  return interactions_.Add();
}
inline ::ubii::interactions::Interaction* Session::add_interactions() {
  // @@protoc_insertion_point(field_add:ubii.sessions.Session.interactions)
  return _internal_add_interactions();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::interactions::Interaction >&
Session::interactions() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.Session.interactions)
  return interactions_;
}

// repeated .ubii.sessions.IOMapping io_mappings = 4;
inline int Session::_internal_io_mappings_size() const {
  return io_mappings_.size();
}
inline int Session::io_mappings_size() const {
  return _internal_io_mappings_size();
}
inline ::ubii::sessions::IOMapping* Session::mutable_io_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.Session.io_mappings)
  return io_mappings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::IOMapping >*
Session::mutable_io_mappings() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.Session.io_mappings)
  return &io_mappings_;
}
inline const ::ubii::sessions::IOMapping& Session::_internal_io_mappings(int index) const {
  return io_mappings_.Get(index);
}
inline const ::ubii::sessions::IOMapping& Session::io_mappings(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.io_mappings)
  return _internal_io_mappings(index);
}
inline ::ubii::sessions::IOMapping* Session::_internal_add_io_mappings() {
  return io_mappings_.Add();
}
inline ::ubii::sessions::IOMapping* Session::add_io_mappings() {
  // @@protoc_insertion_point(field_add:ubii.sessions.Session.io_mappings)
  return _internal_add_io_mappings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::IOMapping >&
Session::io_mappings() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.Session.io_mappings)
  return io_mappings_;
}

// repeated string tags = 5;
inline int Session::_internal_tags_size() const {
  return tags_.size();
}
inline int Session::tags_size() const {
  return _internal_tags_size();
}
inline void Session::clear_tags() {
  tags_.Clear();
}
inline std::string* Session::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.sessions.Session.tags)
  return _internal_add_tags();
}
inline const std::string& Session::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Session::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.tags)
  return _internal_tags(index);
}
inline std::string* Session::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.Session.tags)
  return tags_.Mutable(index);
}
inline void Session::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Session::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Session::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.sessions.Session.tags)
}
inline void Session::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.Session.tags)
}
inline std::string* Session::_internal_add_tags() {
  return tags_.Add();
}
inline void Session::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.sessions.Session.tags)
}
inline void Session::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.sessions.Session.tags)
}
inline void Session::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.sessions.Session.tags)
}
inline void Session::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.sessions.Session.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Session::tags() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.Session.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Session::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.Session.tags)
  return &tags_;
}

// string description = 6;
inline void Session::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Session::description() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.description)
  return _internal_description();
}
inline void Session::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.description)
}
inline std::string* Session::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.Session.description)
  return _internal_mutable_description();
}
inline const std::string& Session::_internal_description() const {
  return description_.GetNoArena();
}
inline void Session::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Session::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.Session.description)
}
inline void Session::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.Session.description)
}
inline void Session::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.Session.description)
}
inline std::string* Session::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Session::release_description() {
  // @@protoc_insertion_point(field_release:ubii.sessions.Session.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Session::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.Session.description)
}

// repeated string authors = 7;
inline int Session::_internal_authors_size() const {
  return authors_.size();
}
inline int Session::authors_size() const {
  return _internal_authors_size();
}
inline void Session::clear_authors() {
  authors_.Clear();
}
inline std::string* Session::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:ubii.sessions.Session.authors)
  return _internal_add_authors();
}
inline const std::string& Session::_internal_authors(int index) const {
  return authors_.Get(index);
}
inline const std::string& Session::authors(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.authors)
  return _internal_authors(index);
}
inline std::string* Session::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.Session.authors)
  return authors_.Mutable(index);
}
inline void Session::set_authors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.authors)
  authors_.Mutable(index)->assign(value);
}
inline void Session::set_authors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
inline void Session::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.sessions.Session.authors)
}
inline void Session::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.Session.authors)
}
inline std::string* Session::_internal_add_authors() {
  return authors_.Add();
}
inline void Session::add_authors(const std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.sessions.Session.authors)
}
inline void Session::add_authors(std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.sessions.Session.authors)
}
inline void Session::add_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.sessions.Session.authors)
}
inline void Session::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.sessions.Session.authors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Session::authors() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.Session.authors)
  return authors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Session::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.Session.authors)
  return &authors_;
}

// .ubii.sessions.ProcessMode process_mode = 8;
inline void Session::clear_process_mode() {
  process_mode_ = 0;
}
inline ::ubii::sessions::ProcessMode Session::_internal_process_mode() const {
  return static_cast< ::ubii::sessions::ProcessMode >(process_mode_);
}
inline ::ubii::sessions::ProcessMode Session::process_mode() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.process_mode)
  return _internal_process_mode();
}
inline void Session::_internal_set_process_mode(::ubii::sessions::ProcessMode value) {
  
  process_mode_ = value;
}
inline void Session::set_process_mode(::ubii::sessions::ProcessMode value) {
  _internal_set_process_mode(value);
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.process_mode)
}

// .ubii.sessions.SessionStatus status = 9;
inline void Session::clear_status() {
  status_ = 0;
}
inline ::ubii::sessions::SessionStatus Session::_internal_status() const {
  return static_cast< ::ubii::sessions::SessionStatus >(status_);
}
inline ::ubii::sessions::SessionStatus Session::status() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.status)
  return _internal_status();
}
inline void Session::_internal_set_status(::ubii::sessions::SessionStatus value) {
  
  status_ = value;
}
inline void Session::set_status(::ubii::sessions::SessionStatus value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.status)
}

// bool editable = 10;
inline void Session::clear_editable() {
  editable_ = false;
}
inline bool Session::_internal_editable() const {
  return editable_;
}
inline bool Session::editable() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.Session.editable)
  return _internal_editable();
}
inline void Session::_internal_set_editable(bool value) {
  
  editable_ = value;
}
inline void Session::set_editable(bool value) {
  _internal_set_editable(value);
  // @@protoc_insertion_point(field_set:ubii.sessions.Session.editable)
}

// -------------------------------------------------------------------

// SessionList

// repeated .ubii.sessions.Session elements = 1;
inline int SessionList::_internal_elements_size() const {
  return elements_.size();
}
inline int SessionList::elements_size() const {
  return _internal_elements_size();
}
inline void SessionList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::sessions::Session* SessionList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.SessionList.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::Session >*
SessionList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.SessionList.elements)
  return &elements_;
}
inline const ::ubii::sessions::Session& SessionList::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::ubii::sessions::Session& SessionList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.SessionList.elements)
  return _internal_elements(index);
}
inline ::ubii::sessions::Session* SessionList::_internal_add_elements() {
  return elements_.Add();
}
inline ::ubii::sessions::Session* SessionList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.sessions.SessionList.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::sessions::Session >&
SessionList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.SessionList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sessions
}  // namespace ubii

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ubii::sessions::ProcessMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ubii::sessions::ProcessMode>() {
  return ::ubii::sessions::ProcessMode_descriptor();
}
template <> struct is_proto_enum< ::ubii::sessions::SessionStatus> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ubii::sessions::SessionStatus>() {
  return ::ubii::sessions::SessionStatus_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fsessions_2fsession_2eproto
