// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/sessions/ioMappings.proto

#ifndef PROTOBUF_INCLUDED_proto_2fsessions_2fioMappings_2eproto
#define PROTOBUF_INCLUDED_proto_2fsessions_2fioMappings_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/devices/topicMux.pb.h"
#include "proto/devices/topicDemux.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2fsessions_2fioMappings_2eproto 

namespace protobuf_proto_2fsessions_2fioMappings_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[6];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2fsessions_2fioMappings_2eproto
namespace ubii {
namespace sessions {
class IOMapping;
class IOMappingDefaultTypeInternal;
extern IOMappingDefaultTypeInternal _IOMapping_default_instance_;
class IOMappingList;
class IOMappingListDefaultTypeInternal;
extern IOMappingListDefaultTypeInternal _IOMappingList_default_instance_;
class TopicInputMapping;
class TopicInputMappingDefaultTypeInternal;
extern TopicInputMappingDefaultTypeInternal _TopicInputMapping_default_instance_;
class TopicInputMappingList;
class TopicInputMappingListDefaultTypeInternal;
extern TopicInputMappingListDefaultTypeInternal _TopicInputMappingList_default_instance_;
class TopicOutputMapping;
class TopicOutputMappingDefaultTypeInternal;
extern TopicOutputMappingDefaultTypeInternal _TopicOutputMapping_default_instance_;
class TopicOutputMappingList;
class TopicOutputMappingListDefaultTypeInternal;
extern TopicOutputMappingListDefaultTypeInternal _TopicOutputMappingList_default_instance_;
}  // namespace sessions
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::sessions::IOMapping* Arena::CreateMaybeMessage<::ubii::sessions::IOMapping>(Arena*);
template<> ::ubii::sessions::IOMappingList* Arena::CreateMaybeMessage<::ubii::sessions::IOMappingList>(Arena*);
template<> ::ubii::sessions::TopicInputMapping* Arena::CreateMaybeMessage<::ubii::sessions::TopicInputMapping>(Arena*);
template<> ::ubii::sessions::TopicInputMappingList* Arena::CreateMaybeMessage<::ubii::sessions::TopicInputMappingList>(Arena*);
template<> ::ubii::sessions::TopicOutputMapping* Arena::CreateMaybeMessage<::ubii::sessions::TopicOutputMapping>(Arena*);
template<> ::ubii::sessions::TopicOutputMappingList* Arena::CreateMaybeMessage<::ubii::sessions::TopicOutputMappingList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace sessions {

// ===================================================================

class TopicInputMapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.TopicInputMapping) */ {
 public:
  TopicInputMapping();
  virtual ~TopicInputMapping();

  TopicInputMapping(const TopicInputMapping& from);

  inline TopicInputMapping& operator=(const TopicInputMapping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicInputMapping(TopicInputMapping&& from) noexcept
    : TopicInputMapping() {
    *this = ::std::move(from);
  }

  inline TopicInputMapping& operator=(TopicInputMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicInputMapping& default_instance();

  enum TopicSourceCase {
    kTopic = 2,
    kTopicMux = 3,
    TOPIC_SOURCE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicInputMapping* internal_default_instance() {
    return reinterpret_cast<const TopicInputMapping*>(
               &_TopicInputMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TopicInputMapping* other);
  friend void swap(TopicInputMapping& a, TopicInputMapping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicInputMapping* New() const final {
    return CreateMaybeMessage<TopicInputMapping>(NULL);
  }

  TopicInputMapping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicInputMapping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicInputMapping& from);
  void MergeFrom(const TopicInputMapping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicInputMapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string input_name = 1;
  void clear_input_name();
  static const int kInputNameFieldNumber = 1;
  const ::std::string& input_name() const;
  void set_input_name(const ::std::string& value);
  #if LANG_CXX11
  void set_input_name(::std::string&& value);
  #endif
  void set_input_name(const char* value);
  void set_input_name(const char* value, size_t size);
  ::std::string* mutable_input_name();
  ::std::string* release_input_name();
  void set_allocated_input_name(::std::string* input_name);

  // string topic = 2;
  private:
  bool has_topic() const;
  public:
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .ubii.devices.TopicMux topic_mux = 3;
  bool has_topic_mux() const;
  void clear_topic_mux();
  static const int kTopicMuxFieldNumber = 3;
  private:
  const ::ubii::devices::TopicMux& _internal_topic_mux() const;
  public:
  const ::ubii::devices::TopicMux& topic_mux() const;
  ::ubii::devices::TopicMux* release_topic_mux();
  ::ubii::devices::TopicMux* mutable_topic_mux();
  void set_allocated_topic_mux(::ubii::devices::TopicMux* topic_mux);

  void clear_topic_source();
  TopicSourceCase topic_source_case() const;
  // @@protoc_insertion_point(class_scope:ubii.sessions.TopicInputMapping)
 private:
  void set_has_topic();
  void set_has_topic_mux();

  inline bool has_topic_source() const;
  inline void clear_has_topic_source();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr input_name_;
  union TopicSourceUnion {
    TopicSourceUnion() {}
    ::google::protobuf::internal::ArenaStringPtr topic_;
    ::ubii::devices::TopicMux* topic_mux_;
  } topic_source_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fsessions_2fioMappings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopicInputMappingList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.TopicInputMappingList) */ {
 public:
  TopicInputMappingList();
  virtual ~TopicInputMappingList();

  TopicInputMappingList(const TopicInputMappingList& from);

  inline TopicInputMappingList& operator=(const TopicInputMappingList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicInputMappingList(TopicInputMappingList&& from) noexcept
    : TopicInputMappingList() {
    *this = ::std::move(from);
  }

  inline TopicInputMappingList& operator=(TopicInputMappingList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicInputMappingList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicInputMappingList* internal_default_instance() {
    return reinterpret_cast<const TopicInputMappingList*>(
               &_TopicInputMappingList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TopicInputMappingList* other);
  friend void swap(TopicInputMappingList& a, TopicInputMappingList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicInputMappingList* New() const final {
    return CreateMaybeMessage<TopicInputMappingList>(NULL);
  }

  TopicInputMappingList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicInputMappingList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicInputMappingList& from);
  void MergeFrom(const TopicInputMappingList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicInputMappingList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.sessions.TopicInputMapping elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  ::ubii::sessions::TopicInputMapping* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping >*
      mutable_elements();
  const ::ubii::sessions::TopicInputMapping& elements(int index) const;
  ::ubii::sessions::TopicInputMapping* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.sessions.TopicInputMappingList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping > elements_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fsessions_2fioMappings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopicOutputMapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.TopicOutputMapping) */ {
 public:
  TopicOutputMapping();
  virtual ~TopicOutputMapping();

  TopicOutputMapping(const TopicOutputMapping& from);

  inline TopicOutputMapping& operator=(const TopicOutputMapping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicOutputMapping(TopicOutputMapping&& from) noexcept
    : TopicOutputMapping() {
    *this = ::std::move(from);
  }

  inline TopicOutputMapping& operator=(TopicOutputMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicOutputMapping& default_instance();

  enum TopicDestinationCase {
    kTopic = 2,
    kTopicDemux = 3,
    TOPIC_DESTINATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicOutputMapping* internal_default_instance() {
    return reinterpret_cast<const TopicOutputMapping*>(
               &_TopicOutputMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(TopicOutputMapping* other);
  friend void swap(TopicOutputMapping& a, TopicOutputMapping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicOutputMapping* New() const final {
    return CreateMaybeMessage<TopicOutputMapping>(NULL);
  }

  TopicOutputMapping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicOutputMapping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicOutputMapping& from);
  void MergeFrom(const TopicOutputMapping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicOutputMapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string output_name = 1;
  void clear_output_name();
  static const int kOutputNameFieldNumber = 1;
  const ::std::string& output_name() const;
  void set_output_name(const ::std::string& value);
  #if LANG_CXX11
  void set_output_name(::std::string&& value);
  #endif
  void set_output_name(const char* value);
  void set_output_name(const char* value, size_t size);
  ::std::string* mutable_output_name();
  ::std::string* release_output_name();
  void set_allocated_output_name(::std::string* output_name);

  // string topic = 2;
  private:
  bool has_topic() const;
  public:
  void clear_topic();
  static const int kTopicFieldNumber = 2;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .ubii.devices.TopicDemux topic_demux = 3;
  bool has_topic_demux() const;
  void clear_topic_demux();
  static const int kTopicDemuxFieldNumber = 3;
  private:
  const ::ubii::devices::TopicDemux& _internal_topic_demux() const;
  public:
  const ::ubii::devices::TopicDemux& topic_demux() const;
  ::ubii::devices::TopicDemux* release_topic_demux();
  ::ubii::devices::TopicDemux* mutable_topic_demux();
  void set_allocated_topic_demux(::ubii::devices::TopicDemux* topic_demux);

  void clear_topic_destination();
  TopicDestinationCase topic_destination_case() const;
  // @@protoc_insertion_point(class_scope:ubii.sessions.TopicOutputMapping)
 private:
  void set_has_topic();
  void set_has_topic_demux();

  inline bool has_topic_destination() const;
  inline void clear_has_topic_destination();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr output_name_;
  union TopicDestinationUnion {
    TopicDestinationUnion() {}
    ::google::protobuf::internal::ArenaStringPtr topic_;
    ::ubii::devices::TopicDemux* topic_demux_;
  } topic_destination_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2fsessions_2fioMappings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopicOutputMappingList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.TopicOutputMappingList) */ {
 public:
  TopicOutputMappingList();
  virtual ~TopicOutputMappingList();

  TopicOutputMappingList(const TopicOutputMappingList& from);

  inline TopicOutputMappingList& operator=(const TopicOutputMappingList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicOutputMappingList(TopicOutputMappingList&& from) noexcept
    : TopicOutputMappingList() {
    *this = ::std::move(from);
  }

  inline TopicOutputMappingList& operator=(TopicOutputMappingList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicOutputMappingList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicOutputMappingList* internal_default_instance() {
    return reinterpret_cast<const TopicOutputMappingList*>(
               &_TopicOutputMappingList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(TopicOutputMappingList* other);
  friend void swap(TopicOutputMappingList& a, TopicOutputMappingList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicOutputMappingList* New() const final {
    return CreateMaybeMessage<TopicOutputMappingList>(NULL);
  }

  TopicOutputMappingList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicOutputMappingList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicOutputMappingList& from);
  void MergeFrom(const TopicOutputMappingList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicOutputMappingList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.sessions.TopicOutputMapping elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  ::ubii::sessions::TopicOutputMapping* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping >*
      mutable_elements();
  const ::ubii::sessions::TopicOutputMapping& elements(int index) const;
  ::ubii::sessions::TopicOutputMapping* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.sessions.TopicOutputMappingList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping > elements_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fsessions_2fioMappings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IOMapping : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.IOMapping) */ {
 public:
  IOMapping();
  virtual ~IOMapping();

  IOMapping(const IOMapping& from);

  inline IOMapping& operator=(const IOMapping& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IOMapping(IOMapping&& from) noexcept
    : IOMapping() {
    *this = ::std::move(from);
  }

  inline IOMapping& operator=(IOMapping&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IOMapping& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOMapping* internal_default_instance() {
    return reinterpret_cast<const IOMapping*>(
               &_IOMapping_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(IOMapping* other);
  friend void swap(IOMapping& a, IOMapping& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IOMapping* New() const final {
    return CreateMaybeMessage<IOMapping>(NULL);
  }

  IOMapping* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IOMapping>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IOMapping& from);
  void MergeFrom(const IOMapping& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOMapping* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.sessions.TopicInputMapping input_mappings = 2;
  int input_mappings_size() const;
  void clear_input_mappings();
  static const int kInputMappingsFieldNumber = 2;
  ::ubii::sessions::TopicInputMapping* mutable_input_mappings(int index);
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping >*
      mutable_input_mappings();
  const ::ubii::sessions::TopicInputMapping& input_mappings(int index) const;
  ::ubii::sessions::TopicInputMapping* add_input_mappings();
  const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping >&
      input_mappings() const;

  // repeated .ubii.sessions.TopicOutputMapping output_mappings = 3;
  int output_mappings_size() const;
  void clear_output_mappings();
  static const int kOutputMappingsFieldNumber = 3;
  ::ubii::sessions::TopicOutputMapping* mutable_output_mappings(int index);
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping >*
      mutable_output_mappings();
  const ::ubii::sessions::TopicOutputMapping& output_mappings(int index) const;
  ::ubii::sessions::TopicOutputMapping* add_output_mappings();
  const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping >&
      output_mappings() const;

  // string processing_module_id = 1;
  void clear_processing_module_id();
  static const int kProcessingModuleIdFieldNumber = 1;
  const ::std::string& processing_module_id() const;
  void set_processing_module_id(const ::std::string& value);
  #if LANG_CXX11
  void set_processing_module_id(::std::string&& value);
  #endif
  void set_processing_module_id(const char* value);
  void set_processing_module_id(const char* value, size_t size);
  ::std::string* mutable_processing_module_id();
  ::std::string* release_processing_module_id();
  void set_allocated_processing_module_id(::std::string* processing_module_id);

  // string processing_module_name = 4;
  void clear_processing_module_name();
  static const int kProcessingModuleNameFieldNumber = 4;
  const ::std::string& processing_module_name() const;
  void set_processing_module_name(const ::std::string& value);
  #if LANG_CXX11
  void set_processing_module_name(::std::string&& value);
  #endif
  void set_processing_module_name(const char* value);
  void set_processing_module_name(const char* value, size_t size);
  ::std::string* mutable_processing_module_name();
  ::std::string* release_processing_module_name();
  void set_allocated_processing_module_name(::std::string* processing_module_name);

  // @@protoc_insertion_point(class_scope:ubii.sessions.IOMapping)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping > input_mappings_;
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping > output_mappings_;
  ::google::protobuf::internal::ArenaStringPtr processing_module_id_;
  ::google::protobuf::internal::ArenaStringPtr processing_module_name_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fsessions_2fioMappings_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class IOMappingList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.sessions.IOMappingList) */ {
 public:
  IOMappingList();
  virtual ~IOMappingList();

  IOMappingList(const IOMappingList& from);

  inline IOMappingList& operator=(const IOMappingList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  IOMappingList(IOMappingList&& from) noexcept
    : IOMappingList() {
    *this = ::std::move(from);
  }

  inline IOMappingList& operator=(IOMappingList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const IOMappingList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const IOMappingList* internal_default_instance() {
    return reinterpret_cast<const IOMappingList*>(
               &_IOMappingList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  void Swap(IOMappingList* other);
  friend void swap(IOMappingList& a, IOMappingList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline IOMappingList* New() const final {
    return CreateMaybeMessage<IOMappingList>(NULL);
  }

  IOMappingList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<IOMappingList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const IOMappingList& from);
  void MergeFrom(const IOMappingList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(IOMappingList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.sessions.IOMapping elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  ::ubii::sessions::IOMapping* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::IOMapping >*
      mutable_elements();
  const ::ubii::sessions::IOMapping& elements(int index) const;
  ::ubii::sessions::IOMapping* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::IOMapping >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.sessions.IOMappingList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ubii::sessions::IOMapping > elements_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2fsessions_2fioMappings_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicInputMapping

// string input_name = 1;
inline void TopicInputMapping::clear_input_name() {
  input_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicInputMapping::input_name() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.TopicInputMapping.input_name)
  return input_name_.GetNoArena();
}
inline void TopicInputMapping::set_input_name(const ::std::string& value) {
  
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.sessions.TopicInputMapping.input_name)
}
#if LANG_CXX11
inline void TopicInputMapping::set_input_name(::std::string&& value) {
  
  input_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.TopicInputMapping.input_name)
}
#endif
inline void TopicInputMapping::set_input_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.TopicInputMapping.input_name)
}
inline void TopicInputMapping::set_input_name(const char* value, size_t size) {
  
  input_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.TopicInputMapping.input_name)
}
inline ::std::string* TopicInputMapping::mutable_input_name() {
  
  // @@protoc_insertion_point(field_mutable:ubii.sessions.TopicInputMapping.input_name)
  return input_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicInputMapping::release_input_name() {
  // @@protoc_insertion_point(field_release:ubii.sessions.TopicInputMapping.input_name)
  
  return input_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicInputMapping::set_allocated_input_name(::std::string* input_name) {
  if (input_name != NULL) {
    
  } else {
    
  }
  input_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), input_name);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.TopicInputMapping.input_name)
}

// string topic = 2;
inline bool TopicInputMapping::has_topic() const {
  return topic_source_case() == kTopic;
}
inline void TopicInputMapping::set_has_topic() {
  _oneof_case_[0] = kTopic;
}
inline void TopicInputMapping::clear_topic() {
  if (has_topic()) {
    topic_source_.topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_topic_source();
  }
}
inline const ::std::string& TopicInputMapping::topic() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.TopicInputMapping.topic)
  if (has_topic()) {
    return topic_source_.topic_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TopicInputMapping::set_topic(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.sessions.TopicInputMapping.topic)
  if (!has_topic()) {
    clear_topic_source();
    set_has_topic();
    topic_source_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_source_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.sessions.TopicInputMapping.topic)
}
#if LANG_CXX11
inline void TopicInputMapping::set_topic(::std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.sessions.TopicInputMapping.topic)
  if (!has_topic()) {
    clear_topic_source();
    set_has_topic();
    topic_source_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_source_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.TopicInputMapping.topic)
}
#endif
inline void TopicInputMapping::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_topic()) {
    clear_topic_source();
    set_has_topic();
    topic_source_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_source_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.TopicInputMapping.topic)
}
inline void TopicInputMapping::set_topic(const char* value, size_t size) {
  if (!has_topic()) {
    clear_topic_source();
    set_has_topic();
    topic_source_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_source_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.TopicInputMapping.topic)
}
inline ::std::string* TopicInputMapping::mutable_topic() {
  if (!has_topic()) {
    clear_topic_source();
    set_has_topic();
    topic_source_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:ubii.sessions.TopicInputMapping.topic)
  return topic_source_.topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicInputMapping::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.sessions.TopicInputMapping.topic)
  if (has_topic()) {
    clear_has_topic_source();
    return topic_source_.topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TopicInputMapping::set_allocated_topic(::std::string* topic) {
  if (!has_topic()) {
    topic_source_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_topic_source();
  if (topic != NULL) {
    set_has_topic();
    topic_source_.topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.TopicInputMapping.topic)
}

// .ubii.devices.TopicMux topic_mux = 3;
inline bool TopicInputMapping::has_topic_mux() const {
  return topic_source_case() == kTopicMux;
}
inline void TopicInputMapping::set_has_topic_mux() {
  _oneof_case_[0] = kTopicMux;
}
inline const ::ubii::devices::TopicMux& TopicInputMapping::_internal_topic_mux() const {
  return *topic_source_.topic_mux_;
}
inline ::ubii::devices::TopicMux* TopicInputMapping::release_topic_mux() {
  // @@protoc_insertion_point(field_release:ubii.sessions.TopicInputMapping.topic_mux)
  if (has_topic_mux()) {
    clear_has_topic_source();
      ::ubii::devices::TopicMux* temp = topic_source_.topic_mux_;
    topic_source_.topic_mux_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::devices::TopicMux& TopicInputMapping::topic_mux() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.TopicInputMapping.topic_mux)
  return has_topic_mux()
      ? *topic_source_.topic_mux_
      : *reinterpret_cast< ::ubii::devices::TopicMux*>(&::ubii::devices::_TopicMux_default_instance_);
}
inline ::ubii::devices::TopicMux* TopicInputMapping::mutable_topic_mux() {
  if (!has_topic_mux()) {
    clear_topic_source();
    set_has_topic_mux();
    topic_source_.topic_mux_ = CreateMaybeMessage< ::ubii::devices::TopicMux >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.sessions.TopicInputMapping.topic_mux)
  return topic_source_.topic_mux_;
}

inline bool TopicInputMapping::has_topic_source() const {
  return topic_source_case() != TOPIC_SOURCE_NOT_SET;
}
inline void TopicInputMapping::clear_has_topic_source() {
  _oneof_case_[0] = TOPIC_SOURCE_NOT_SET;
}
inline TopicInputMapping::TopicSourceCase TopicInputMapping::topic_source_case() const {
  return TopicInputMapping::TopicSourceCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TopicInputMappingList

// repeated .ubii.sessions.TopicInputMapping elements = 1;
inline int TopicInputMappingList::elements_size() const {
  return elements_.size();
}
inline void TopicInputMappingList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::sessions::TopicInputMapping* TopicInputMappingList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.TopicInputMappingList.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping >*
TopicInputMappingList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.TopicInputMappingList.elements)
  return &elements_;
}
inline const ::ubii::sessions::TopicInputMapping& TopicInputMappingList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.TopicInputMappingList.elements)
  return elements_.Get(index);
}
inline ::ubii::sessions::TopicInputMapping* TopicInputMappingList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.sessions.TopicInputMappingList.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping >&
TopicInputMappingList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.TopicInputMappingList.elements)
  return elements_;
}

// -------------------------------------------------------------------

// TopicOutputMapping

// string output_name = 1;
inline void TopicOutputMapping::clear_output_name() {
  output_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicOutputMapping::output_name() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.TopicOutputMapping.output_name)
  return output_name_.GetNoArena();
}
inline void TopicOutputMapping::set_output_name(const ::std::string& value) {
  
  output_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.sessions.TopicOutputMapping.output_name)
}
#if LANG_CXX11
inline void TopicOutputMapping::set_output_name(::std::string&& value) {
  
  output_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.TopicOutputMapping.output_name)
}
#endif
inline void TopicOutputMapping::set_output_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  output_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.TopicOutputMapping.output_name)
}
inline void TopicOutputMapping::set_output_name(const char* value, size_t size) {
  
  output_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.TopicOutputMapping.output_name)
}
inline ::std::string* TopicOutputMapping::mutable_output_name() {
  
  // @@protoc_insertion_point(field_mutable:ubii.sessions.TopicOutputMapping.output_name)
  return output_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicOutputMapping::release_output_name() {
  // @@protoc_insertion_point(field_release:ubii.sessions.TopicOutputMapping.output_name)
  
  return output_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicOutputMapping::set_allocated_output_name(::std::string* output_name) {
  if (output_name != NULL) {
    
  } else {
    
  }
  output_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_name);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.TopicOutputMapping.output_name)
}

// string topic = 2;
inline bool TopicOutputMapping::has_topic() const {
  return topic_destination_case() == kTopic;
}
inline void TopicOutputMapping::set_has_topic() {
  _oneof_case_[0] = kTopic;
}
inline void TopicOutputMapping::clear_topic() {
  if (has_topic()) {
    topic_destination_.topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_topic_destination();
  }
}
inline const ::std::string& TopicOutputMapping::topic() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.TopicOutputMapping.topic)
  if (has_topic()) {
    return topic_destination_.topic_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TopicOutputMapping::set_topic(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.sessions.TopicOutputMapping.topic)
  if (!has_topic()) {
    clear_topic_destination();
    set_has_topic();
    topic_destination_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_destination_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.sessions.TopicOutputMapping.topic)
}
#if LANG_CXX11
inline void TopicOutputMapping::set_topic(::std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.sessions.TopicOutputMapping.topic)
  if (!has_topic()) {
    clear_topic_destination();
    set_has_topic();
    topic_destination_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_destination_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.TopicOutputMapping.topic)
}
#endif
inline void TopicOutputMapping::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_topic()) {
    clear_topic_destination();
    set_has_topic();
    topic_destination_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_destination_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.TopicOutputMapping.topic)
}
inline void TopicOutputMapping::set_topic(const char* value, size_t size) {
  if (!has_topic()) {
    clear_topic_destination();
    set_has_topic();
    topic_destination_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  topic_destination_.topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.TopicOutputMapping.topic)
}
inline ::std::string* TopicOutputMapping::mutable_topic() {
  if (!has_topic()) {
    clear_topic_destination();
    set_has_topic();
    topic_destination_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:ubii.sessions.TopicOutputMapping.topic)
  return topic_destination_.topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicOutputMapping::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.sessions.TopicOutputMapping.topic)
  if (has_topic()) {
    clear_has_topic_destination();
    return topic_destination_.topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TopicOutputMapping::set_allocated_topic(::std::string* topic) {
  if (!has_topic()) {
    topic_destination_.topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_topic_destination();
  if (topic != NULL) {
    set_has_topic();
    topic_destination_.topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.TopicOutputMapping.topic)
}

// .ubii.devices.TopicDemux topic_demux = 3;
inline bool TopicOutputMapping::has_topic_demux() const {
  return topic_destination_case() == kTopicDemux;
}
inline void TopicOutputMapping::set_has_topic_demux() {
  _oneof_case_[0] = kTopicDemux;
}
inline const ::ubii::devices::TopicDemux& TopicOutputMapping::_internal_topic_demux() const {
  return *topic_destination_.topic_demux_;
}
inline ::ubii::devices::TopicDemux* TopicOutputMapping::release_topic_demux() {
  // @@protoc_insertion_point(field_release:ubii.sessions.TopicOutputMapping.topic_demux)
  if (has_topic_demux()) {
    clear_has_topic_destination();
      ::ubii::devices::TopicDemux* temp = topic_destination_.topic_demux_;
    topic_destination_.topic_demux_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::devices::TopicDemux& TopicOutputMapping::topic_demux() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.TopicOutputMapping.topic_demux)
  return has_topic_demux()
      ? *topic_destination_.topic_demux_
      : *reinterpret_cast< ::ubii::devices::TopicDemux*>(&::ubii::devices::_TopicDemux_default_instance_);
}
inline ::ubii::devices::TopicDemux* TopicOutputMapping::mutable_topic_demux() {
  if (!has_topic_demux()) {
    clear_topic_destination();
    set_has_topic_demux();
    topic_destination_.topic_demux_ = CreateMaybeMessage< ::ubii::devices::TopicDemux >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.sessions.TopicOutputMapping.topic_demux)
  return topic_destination_.topic_demux_;
}

inline bool TopicOutputMapping::has_topic_destination() const {
  return topic_destination_case() != TOPIC_DESTINATION_NOT_SET;
}
inline void TopicOutputMapping::clear_has_topic_destination() {
  _oneof_case_[0] = TOPIC_DESTINATION_NOT_SET;
}
inline TopicOutputMapping::TopicDestinationCase TopicOutputMapping::topic_destination_case() const {
  return TopicOutputMapping::TopicDestinationCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TopicOutputMappingList

// repeated .ubii.sessions.TopicOutputMapping elements = 1;
inline int TopicOutputMappingList::elements_size() const {
  return elements_.size();
}
inline void TopicOutputMappingList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::sessions::TopicOutputMapping* TopicOutputMappingList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.TopicOutputMappingList.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping >*
TopicOutputMappingList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.TopicOutputMappingList.elements)
  return &elements_;
}
inline const ::ubii::sessions::TopicOutputMapping& TopicOutputMappingList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.TopicOutputMappingList.elements)
  return elements_.Get(index);
}
inline ::ubii::sessions::TopicOutputMapping* TopicOutputMappingList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.sessions.TopicOutputMappingList.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping >&
TopicOutputMappingList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.TopicOutputMappingList.elements)
  return elements_;
}

// -------------------------------------------------------------------

// IOMapping

// string processing_module_id = 1;
inline void IOMapping::clear_processing_module_id() {
  processing_module_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IOMapping::processing_module_id() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMapping.processing_module_id)
  return processing_module_id_.GetNoArena();
}
inline void IOMapping::set_processing_module_id(const ::std::string& value) {
  
  processing_module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.sessions.IOMapping.processing_module_id)
}
#if LANG_CXX11
inline void IOMapping::set_processing_module_id(::std::string&& value) {
  
  processing_module_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.IOMapping.processing_module_id)
}
#endif
inline void IOMapping::set_processing_module_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processing_module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.IOMapping.processing_module_id)
}
inline void IOMapping::set_processing_module_id(const char* value, size_t size) {
  
  processing_module_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.IOMapping.processing_module_id)
}
inline ::std::string* IOMapping::mutable_processing_module_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMapping.processing_module_id)
  return processing_module_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IOMapping::release_processing_module_id() {
  // @@protoc_insertion_point(field_release:ubii.sessions.IOMapping.processing_module_id)
  
  return processing_module_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IOMapping::set_allocated_processing_module_id(::std::string* processing_module_id) {
  if (processing_module_id != NULL) {
    
  } else {
    
  }
  processing_module_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_module_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.IOMapping.processing_module_id)
}

// repeated .ubii.sessions.TopicInputMapping input_mappings = 2;
inline int IOMapping::input_mappings_size() const {
  return input_mappings_.size();
}
inline void IOMapping::clear_input_mappings() {
  input_mappings_.Clear();
}
inline ::ubii::sessions::TopicInputMapping* IOMapping::mutable_input_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMapping.input_mappings)
  return input_mappings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping >*
IOMapping::mutable_input_mappings() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.IOMapping.input_mappings)
  return &input_mappings_;
}
inline const ::ubii::sessions::TopicInputMapping& IOMapping::input_mappings(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMapping.input_mappings)
  return input_mappings_.Get(index);
}
inline ::ubii::sessions::TopicInputMapping* IOMapping::add_input_mappings() {
  // @@protoc_insertion_point(field_add:ubii.sessions.IOMapping.input_mappings)
  return input_mappings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicInputMapping >&
IOMapping::input_mappings() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.IOMapping.input_mappings)
  return input_mappings_;
}

// repeated .ubii.sessions.TopicOutputMapping output_mappings = 3;
inline int IOMapping::output_mappings_size() const {
  return output_mappings_.size();
}
inline void IOMapping::clear_output_mappings() {
  output_mappings_.Clear();
}
inline ::ubii::sessions::TopicOutputMapping* IOMapping::mutable_output_mappings(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMapping.output_mappings)
  return output_mappings_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping >*
IOMapping::mutable_output_mappings() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.IOMapping.output_mappings)
  return &output_mappings_;
}
inline const ::ubii::sessions::TopicOutputMapping& IOMapping::output_mappings(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMapping.output_mappings)
  return output_mappings_.Get(index);
}
inline ::ubii::sessions::TopicOutputMapping* IOMapping::add_output_mappings() {
  // @@protoc_insertion_point(field_add:ubii.sessions.IOMapping.output_mappings)
  return output_mappings_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::TopicOutputMapping >&
IOMapping::output_mappings() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.IOMapping.output_mappings)
  return output_mappings_;
}

// string processing_module_name = 4;
inline void IOMapping::clear_processing_module_name() {
  processing_module_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& IOMapping::processing_module_name() const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMapping.processing_module_name)
  return processing_module_name_.GetNoArena();
}
inline void IOMapping::set_processing_module_name(const ::std::string& value) {
  
  processing_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.sessions.IOMapping.processing_module_name)
}
#if LANG_CXX11
inline void IOMapping::set_processing_module_name(::std::string&& value) {
  
  processing_module_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.sessions.IOMapping.processing_module_name)
}
#endif
inline void IOMapping::set_processing_module_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  processing_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.sessions.IOMapping.processing_module_name)
}
inline void IOMapping::set_processing_module_name(const char* value, size_t size) {
  
  processing_module_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.sessions.IOMapping.processing_module_name)
}
inline ::std::string* IOMapping::mutable_processing_module_name() {
  
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMapping.processing_module_name)
  return processing_module_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* IOMapping::release_processing_module_name() {
  // @@protoc_insertion_point(field_release:ubii.sessions.IOMapping.processing_module_name)
  
  return processing_module_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void IOMapping::set_allocated_processing_module_name(::std::string* processing_module_name) {
  if (processing_module_name != NULL) {
    
  } else {
    
  }
  processing_module_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), processing_module_name);
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.IOMapping.processing_module_name)
}

// -------------------------------------------------------------------

// IOMappingList

// repeated .ubii.sessions.IOMapping elements = 1;
inline int IOMappingList::elements_size() const {
  return elements_.size();
}
inline void IOMappingList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::sessions::IOMapping* IOMappingList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.sessions.IOMappingList.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::sessions::IOMapping >*
IOMappingList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.sessions.IOMappingList.elements)
  return &elements_;
}
inline const ::ubii::sessions::IOMapping& IOMappingList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.sessions.IOMappingList.elements)
  return elements_.Get(index);
}
inline ::ubii::sessions::IOMapping* IOMappingList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.sessions.IOMappingList.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::sessions::IOMapping >&
IOMappingList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.sessions.IOMappingList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace sessions
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2fsessions_2fioMappings_2eproto
