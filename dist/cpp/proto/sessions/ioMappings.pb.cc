// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/sessions/ioMappings.proto

#include "proto/sessions/ioMappings.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2ftopicDemux_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicDemux_proto_2fdevices_2ftopicDemux_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2ftopicMux_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TopicMux_proto_2fdevices_2ftopicMux_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fsessions_2fioMappings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IOMapping_proto_2fsessions_2fioMappings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fsessions_2fioMappings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fsessions_2fioMappings_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto;
namespace ubii {
namespace sessions {
class TopicInputMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicInputMapping> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  const ::ubii::devices::TopicMux* topic_mux_;
} _TopicInputMapping_default_instance_;
class TopicInputMappingListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicInputMappingList> _instance;
} _TopicInputMappingList_default_instance_;
class TopicOutputMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicOutputMapping> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  const ::ubii::devices::TopicDemux* topic_demux_;
} _TopicOutputMapping_default_instance_;
class TopicOutputMappingListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicOutputMappingList> _instance;
} _TopicOutputMappingList_default_instance_;
class IOMappingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOMapping> _instance;
} _IOMapping_default_instance_;
class IOMappingListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<IOMappingList> _instance;
} _IOMappingList_default_instance_;
}  // namespace sessions
}  // namespace ubii
static void InitDefaultsscc_info_IOMapping_proto_2fsessions_2fioMappings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::sessions::_IOMapping_default_instance_;
    new (ptr) ::ubii::sessions::IOMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::sessions::IOMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_IOMapping_proto_2fsessions_2fioMappings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_IOMapping_proto_2fsessions_2fioMappings_2eproto}, {
      &scc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto.base,
      &scc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto.base,}};

static void InitDefaultsscc_info_IOMappingList_proto_2fsessions_2fioMappings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::sessions::_IOMappingList_default_instance_;
    new (ptr) ::ubii::sessions::IOMappingList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::sessions::IOMappingList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_IOMappingList_proto_2fsessions_2fioMappings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_IOMappingList_proto_2fsessions_2fioMappings_2eproto}, {
      &scc_info_IOMapping_proto_2fsessions_2fioMappings_2eproto.base,}};

static void InitDefaultsscc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::sessions::_TopicInputMapping_default_instance_;
    new (ptr) ::ubii::sessions::TopicInputMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::sessions::TopicInputMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto}, {
      &scc_info_TopicMux_proto_2fdevices_2ftopicMux_2eproto.base,}};

static void InitDefaultsscc_info_TopicInputMappingList_proto_2fsessions_2fioMappings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::sessions::_TopicInputMappingList_default_instance_;
    new (ptr) ::ubii::sessions::TopicInputMappingList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::sessions::TopicInputMappingList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicInputMappingList_proto_2fsessions_2fioMappings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicInputMappingList_proto_2fsessions_2fioMappings_2eproto}, {
      &scc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto.base,}};

static void InitDefaultsscc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::sessions::_TopicOutputMapping_default_instance_;
    new (ptr) ::ubii::sessions::TopicOutputMapping();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::sessions::TopicOutputMapping::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto}, {
      &scc_info_TopicDemux_proto_2fdevices_2ftopicDemux_2eproto.base,}};

static void InitDefaultsscc_info_TopicOutputMappingList_proto_2fsessions_2fioMappings_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::sessions::_TopicOutputMappingList_default_instance_;
    new (ptr) ::ubii::sessions::TopicOutputMappingList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::sessions::TopicOutputMappingList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicOutputMappingList_proto_2fsessions_2fioMappings_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicOutputMappingList_proto_2fsessions_2fioMappings_2eproto}, {
      &scc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2fsessions_2fioMappings_2eproto[6];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2fsessions_2fioMappings_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2fsessions_2fioMappings_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2fsessions_2fioMappings_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicInputMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicInputMapping, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicInputMapping, input_name_),
  offsetof(::ubii::sessions::TopicInputMappingDefaultTypeInternal, topic_),
  offsetof(::ubii::sessions::TopicInputMappingDefaultTypeInternal, topic_mux_),
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicInputMapping, topic_source_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicInputMappingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicInputMappingList, elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicOutputMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicOutputMapping, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicOutputMapping, output_name_),
  offsetof(::ubii::sessions::TopicOutputMappingDefaultTypeInternal, topic_),
  offsetof(::ubii::sessions::TopicOutputMappingDefaultTypeInternal, topic_demux_),
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicOutputMapping, topic_destination_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicOutputMappingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::TopicOutputMappingList, elements_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::IOMapping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::IOMapping, processing_module_id_),
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::IOMapping, input_mappings_),
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::IOMapping, output_mappings_),
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::IOMapping, processing_module_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::IOMappingList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::sessions::IOMappingList, elements_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ubii::sessions::TopicInputMapping)},
  { 9, -1, sizeof(::ubii::sessions::TopicInputMappingList)},
  { 15, -1, sizeof(::ubii::sessions::TopicOutputMapping)},
  { 24, -1, sizeof(::ubii::sessions::TopicOutputMappingList)},
  { 30, -1, sizeof(::ubii::sessions::IOMapping)},
  { 39, -1, sizeof(::ubii::sessions::IOMappingList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::sessions::_TopicInputMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::sessions::_TopicInputMappingList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::sessions::_TopicOutputMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::sessions::_TopicOutputMappingList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::sessions::_IOMapping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::sessions::_IOMappingList_default_instance_),
};

const char descriptor_table_protodef_proto_2fsessions_2fioMappings_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037proto/sessions/ioMappings.proto\022\rubii."
  "sessions\032\034proto/devices/topicMux.proto\032\036"
  "proto/devices/topicDemux.proto\"u\n\021TopicI"
  "nputMapping\022\022\n\ninput_name\030\001 \001(\t\022\017\n\005topic"
  "\030\002 \001(\tH\000\022+\n\ttopic_mux\030\003 \001(\0132\026.ubii.devic"
  "es.TopicMuxH\000B\016\n\014topic_source\"K\n\025TopicIn"
  "putMappingList\0222\n\010elements\030\001 \003(\0132 .ubii."
  "sessions.TopicInputMapping\"\200\001\n\022TopicOutp"
  "utMapping\022\023\n\013output_name\030\001 \001(\t\022\017\n\005topic\030"
  "\002 \001(\tH\000\022/\n\013topic_demux\030\003 \001(\0132\030.ubii.devi"
  "ces.TopicDemuxH\000B\023\n\021topic_destination\"M\n"
  "\026TopicOutputMappingList\0223\n\010elements\030\001 \003("
  "\0132!.ubii.sessions.TopicOutputMapping\"\277\001\n"
  "\tIOMapping\022\034\n\024processing_module_id\030\001 \001(\t"
  "\0228\n\016input_mappings\030\002 \003(\0132 .ubii.sessions"
  ".TopicInputMapping\022:\n\017output_mappings\030\003 "
  "\003(\0132!.ubii.sessions.TopicOutputMapping\022\036"
  "\n\026processing_module_name\030\004 \001(\t\";\n\rIOMapp"
  "ingList\022*\n\010elements\030\001 \003(\0132\030.ubii.session"
  "s.IOMappingb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2fsessions_2fioMappings_2eproto_deps[2] = {
  &::descriptor_table_proto_2fdevices_2ftopicDemux_2eproto,
  &::descriptor_table_proto_2fdevices_2ftopicMux_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2fsessions_2fioMappings_2eproto_sccs[6] = {
  &scc_info_IOMapping_proto_2fsessions_2fioMappings_2eproto.base,
  &scc_info_IOMappingList_proto_2fsessions_2fioMappings_2eproto.base,
  &scc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto.base,
  &scc_info_TopicInputMappingList_proto_2fsessions_2fioMappings_2eproto.base,
  &scc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto.base,
  &scc_info_TopicOutputMappingList_proto_2fsessions_2fioMappings_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2fsessions_2fioMappings_2eproto_once;
static bool descriptor_table_proto_2fsessions_2fioMappings_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fsessions_2fioMappings_2eproto = {
  &descriptor_table_proto_2fsessions_2fioMappings_2eproto_initialized, descriptor_table_protodef_proto_2fsessions_2fioMappings_2eproto, "proto/sessions/ioMappings.proto", 779,
  &descriptor_table_proto_2fsessions_2fioMappings_2eproto_once, descriptor_table_proto_2fsessions_2fioMappings_2eproto_sccs, descriptor_table_proto_2fsessions_2fioMappings_2eproto_deps, 6, 2,
  schemas, file_default_instances, TableStruct_proto_2fsessions_2fioMappings_2eproto::offsets,
  file_level_metadata_proto_2fsessions_2fioMappings_2eproto, 6, file_level_enum_descriptors_proto_2fsessions_2fioMappings_2eproto, file_level_service_descriptors_proto_2fsessions_2fioMappings_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2fsessions_2fioMappings_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2fsessions_2fioMappings_2eproto), true);
namespace ubii {
namespace sessions {

// ===================================================================

void TopicInputMapping::InitAsDefaultInstance() {
  ::ubii::sessions::_TopicInputMapping_default_instance_.topic_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::ubii::sessions::_TopicInputMapping_default_instance_.topic_mux_ = const_cast< ::ubii::devices::TopicMux*>(
      ::ubii::devices::TopicMux::internal_default_instance());
}
class TopicInputMapping::_Internal {
 public:
  static const ::ubii::devices::TopicMux& topic_mux(const TopicInputMapping* msg);
};

const ::ubii::devices::TopicMux&
TopicInputMapping::_Internal::topic_mux(const TopicInputMapping* msg) {
  return *msg->topic_source_.topic_mux_;
}
void TopicInputMapping::set_allocated_topic_mux(::ubii::devices::TopicMux* topic_mux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_topic_source();
  if (topic_mux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic_mux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_mux, submessage_arena);
    }
    set_has_topic_mux();
    topic_source_.topic_mux_ = topic_mux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.TopicInputMapping.topic_mux)
}
void TopicInputMapping::clear_topic_mux() {
  if (_internal_has_topic_mux()) {
    delete topic_source_.topic_mux_;
    clear_has_topic_source();
  }
}
TopicInputMapping::TopicInputMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.sessions.TopicInputMapping)
}
TopicInputMapping::TopicInputMapping(const TopicInputMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  input_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_input_name().empty()) {
    input_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_name_);
  }
  clear_has_topic_source();
  switch (from.topic_source_case()) {
    case kTopic: {
      _internal_set_topic(from._internal_topic());
      break;
    }
    case kTopicMux: {
      _internal_mutable_topic_mux()->::ubii::devices::TopicMux::MergeFrom(from._internal_topic_mux());
      break;
    }
    case TOPIC_SOURCE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ubii.sessions.TopicInputMapping)
}

void TopicInputMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto.base);
  input_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_topic_source();
}

TopicInputMapping::~TopicInputMapping() {
  // @@protoc_insertion_point(destructor:ubii.sessions.TopicInputMapping)
  SharedDtor();
}

void TopicInputMapping::SharedDtor() {
  input_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_topic_source()) {
    clear_topic_source();
  }
}

void TopicInputMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicInputMapping& TopicInputMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicInputMapping_proto_2fsessions_2fioMappings_2eproto.base);
  return *internal_default_instance();
}


void TopicInputMapping::clear_topic_source() {
// @@protoc_insertion_point(one_of_clear_start:ubii.sessions.TopicInputMapping)
  switch (topic_source_case()) {
    case kTopic: {
      topic_source_.topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTopicMux: {
      delete topic_source_.topic_mux_;
      break;
    }
    case TOPIC_SOURCE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TOPIC_SOURCE_NOT_SET;
}


void TopicInputMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.sessions.TopicInputMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_topic_source();
  _internal_metadata_.Clear();
}

const char* TopicInputMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string input_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_input_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.sessions.TopicInputMapping.input_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.sessions.TopicInputMapping.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.TopicMux topic_mux = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_mux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicInputMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.sessions.TopicInputMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string input_name = 1;
  if (this->input_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_input_name().data(), static_cast<int>(this->_internal_input_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.sessions.TopicInputMapping.input_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_input_name(), target);
  }

  // string topic = 2;
  if (_internal_has_topic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.sessions.TopicInputMapping.topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topic(), target);
  }

  // .ubii.devices.TopicMux topic_mux = 3;
  if (_internal_has_topic_mux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::topic_mux(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.sessions.TopicInputMapping)
  return target;
}

size_t TopicInputMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.sessions.TopicInputMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string input_name = 1;
  if (this->input_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_input_name());
  }

  switch (topic_source_case()) {
    // string topic = 2;
    case kTopic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
      break;
    }
    // .ubii.devices.TopicMux topic_mux = 3;
    case kTopicMux: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topic_source_.topic_mux_);
      break;
    }
    case TOPIC_SOURCE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicInputMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.sessions.TopicInputMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicInputMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicInputMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.sessions.TopicInputMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.sessions.TopicInputMapping)
    MergeFrom(*source);
  }
}

void TopicInputMapping::MergeFrom(const TopicInputMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.sessions.TopicInputMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.input_name().size() > 0) {

    input_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.input_name_);
  }
  switch (from.topic_source_case()) {
    case kTopic: {
      _internal_set_topic(from._internal_topic());
      break;
    }
    case kTopicMux: {
      _internal_mutable_topic_mux()->::ubii::devices::TopicMux::MergeFrom(from._internal_topic_mux());
      break;
    }
    case TOPIC_SOURCE_NOT_SET: {
      break;
    }
  }
}

void TopicInputMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.sessions.TopicInputMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicInputMapping::CopyFrom(const TopicInputMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.sessions.TopicInputMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicInputMapping::IsInitialized() const {
  return true;
}

void TopicInputMapping::InternalSwap(TopicInputMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_name_.Swap(&other->input_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(topic_source_, other->topic_source_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicInputMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopicInputMappingList::InitAsDefaultInstance() {
}
class TopicInputMappingList::_Internal {
 public:
};

TopicInputMappingList::TopicInputMappingList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.sessions.TopicInputMappingList)
}
TopicInputMappingList::TopicInputMappingList(const TopicInputMappingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ubii.sessions.TopicInputMappingList)
}

void TopicInputMappingList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicInputMappingList_proto_2fsessions_2fioMappings_2eproto.base);
}

TopicInputMappingList::~TopicInputMappingList() {
  // @@protoc_insertion_point(destructor:ubii.sessions.TopicInputMappingList)
  SharedDtor();
}

void TopicInputMappingList::SharedDtor() {
}

void TopicInputMappingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicInputMappingList& TopicInputMappingList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicInputMappingList_proto_2fsessions_2fioMappings_2eproto.base);
  return *internal_default_instance();
}


void TopicInputMappingList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.sessions.TopicInputMappingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

const char* TopicInputMappingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ubii.sessions.TopicInputMapping elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicInputMappingList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.sessions.TopicInputMappingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ubii.sessions.TopicInputMapping elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.sessions.TopicInputMappingList)
  return target;
}

size_t TopicInputMappingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.sessions.TopicInputMappingList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ubii.sessions.TopicInputMapping elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicInputMappingList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.sessions.TopicInputMappingList)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicInputMappingList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicInputMappingList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.sessions.TopicInputMappingList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.sessions.TopicInputMappingList)
    MergeFrom(*source);
  }
}

void TopicInputMappingList::MergeFrom(const TopicInputMappingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.sessions.TopicInputMappingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void TopicInputMappingList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.sessions.TopicInputMappingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicInputMappingList::CopyFrom(const TopicInputMappingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.sessions.TopicInputMappingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicInputMappingList::IsInitialized() const {
  return true;
}

void TopicInputMappingList::InternalSwap(TopicInputMappingList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicInputMappingList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopicOutputMapping::InitAsDefaultInstance() {
  ::ubii::sessions::_TopicOutputMapping_default_instance_.topic_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::ubii::sessions::_TopicOutputMapping_default_instance_.topic_demux_ = const_cast< ::ubii::devices::TopicDemux*>(
      ::ubii::devices::TopicDemux::internal_default_instance());
}
class TopicOutputMapping::_Internal {
 public:
  static const ::ubii::devices::TopicDemux& topic_demux(const TopicOutputMapping* msg);
};

const ::ubii::devices::TopicDemux&
TopicOutputMapping::_Internal::topic_demux(const TopicOutputMapping* msg) {
  return *msg->topic_destination_.topic_demux_;
}
void TopicOutputMapping::set_allocated_topic_demux(::ubii::devices::TopicDemux* topic_demux) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_topic_destination();
  if (topic_demux) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic_demux = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_demux, submessage_arena);
    }
    set_has_topic_demux();
    topic_destination_.topic_demux_ = topic_demux;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.sessions.TopicOutputMapping.topic_demux)
}
void TopicOutputMapping::clear_topic_demux() {
  if (_internal_has_topic_demux()) {
    delete topic_destination_.topic_demux_;
    clear_has_topic_destination();
  }
}
TopicOutputMapping::TopicOutputMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.sessions.TopicOutputMapping)
}
TopicOutputMapping::TopicOutputMapping(const TopicOutputMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  output_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_output_name().empty()) {
    output_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_name_);
  }
  clear_has_topic_destination();
  switch (from.topic_destination_case()) {
    case kTopic: {
      _internal_set_topic(from._internal_topic());
      break;
    }
    case kTopicDemux: {
      _internal_mutable_topic_demux()->::ubii::devices::TopicDemux::MergeFrom(from._internal_topic_demux());
      break;
    }
    case TOPIC_DESTINATION_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ubii.sessions.TopicOutputMapping)
}

void TopicOutputMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto.base);
  output_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_has_topic_destination();
}

TopicOutputMapping::~TopicOutputMapping() {
  // @@protoc_insertion_point(destructor:ubii.sessions.TopicOutputMapping)
  SharedDtor();
}

void TopicOutputMapping::SharedDtor() {
  output_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (has_topic_destination()) {
    clear_topic_destination();
  }
}

void TopicOutputMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicOutputMapping& TopicOutputMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicOutputMapping_proto_2fsessions_2fioMappings_2eproto.base);
  return *internal_default_instance();
}


void TopicOutputMapping::clear_topic_destination() {
// @@protoc_insertion_point(one_of_clear_start:ubii.sessions.TopicOutputMapping)
  switch (topic_destination_case()) {
    case kTopic: {
      topic_destination_.topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kTopicDemux: {
      delete topic_destination_.topic_demux_;
      break;
    }
    case TOPIC_DESTINATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TOPIC_DESTINATION_NOT_SET;
}


void TopicOutputMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.sessions.TopicOutputMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  output_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  clear_topic_destination();
  _internal_metadata_.Clear();
}

const char* TopicOutputMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string output_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_output_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.sessions.TopicOutputMapping.output_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string topic = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.sessions.TopicOutputMapping.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.TopicDemux topic_demux = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_demux(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicOutputMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.sessions.TopicOutputMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string output_name = 1;
  if (this->output_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_output_name().data(), static_cast<int>(this->_internal_output_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.sessions.TopicOutputMapping.output_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_output_name(), target);
  }

  // string topic = 2;
  if (_internal_has_topic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.sessions.TopicOutputMapping.topic");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_topic(), target);
  }

  // .ubii.devices.TopicDemux topic_demux = 3;
  if (_internal_has_topic_demux()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::topic_demux(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.sessions.TopicOutputMapping)
  return target;
}

size_t TopicOutputMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.sessions.TopicOutputMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string output_name = 1;
  if (this->output_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_output_name());
  }

  switch (topic_destination_case()) {
    // string topic = 2;
    case kTopic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
      break;
    }
    // .ubii.devices.TopicDemux topic_demux = 3;
    case kTopicDemux: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *topic_destination_.topic_demux_);
      break;
    }
    case TOPIC_DESTINATION_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicOutputMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.sessions.TopicOutputMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicOutputMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicOutputMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.sessions.TopicOutputMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.sessions.TopicOutputMapping)
    MergeFrom(*source);
  }
}

void TopicOutputMapping::MergeFrom(const TopicOutputMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.sessions.TopicOutputMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.output_name().size() > 0) {

    output_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.output_name_);
  }
  switch (from.topic_destination_case()) {
    case kTopic: {
      _internal_set_topic(from._internal_topic());
      break;
    }
    case kTopicDemux: {
      _internal_mutable_topic_demux()->::ubii::devices::TopicDemux::MergeFrom(from._internal_topic_demux());
      break;
    }
    case TOPIC_DESTINATION_NOT_SET: {
      break;
    }
  }
}

void TopicOutputMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.sessions.TopicOutputMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicOutputMapping::CopyFrom(const TopicOutputMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.sessions.TopicOutputMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicOutputMapping::IsInitialized() const {
  return true;
}

void TopicOutputMapping::InternalSwap(TopicOutputMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  output_name_.Swap(&other->output_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(topic_destination_, other->topic_destination_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicOutputMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopicOutputMappingList::InitAsDefaultInstance() {
}
class TopicOutputMappingList::_Internal {
 public:
};

TopicOutputMappingList::TopicOutputMappingList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.sessions.TopicOutputMappingList)
}
TopicOutputMappingList::TopicOutputMappingList(const TopicOutputMappingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ubii.sessions.TopicOutputMappingList)
}

void TopicOutputMappingList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicOutputMappingList_proto_2fsessions_2fioMappings_2eproto.base);
}

TopicOutputMappingList::~TopicOutputMappingList() {
  // @@protoc_insertion_point(destructor:ubii.sessions.TopicOutputMappingList)
  SharedDtor();
}

void TopicOutputMappingList::SharedDtor() {
}

void TopicOutputMappingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicOutputMappingList& TopicOutputMappingList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicOutputMappingList_proto_2fsessions_2fioMappings_2eproto.base);
  return *internal_default_instance();
}


void TopicOutputMappingList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.sessions.TopicOutputMappingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

const char* TopicOutputMappingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ubii.sessions.TopicOutputMapping elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicOutputMappingList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.sessions.TopicOutputMappingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ubii.sessions.TopicOutputMapping elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.sessions.TopicOutputMappingList)
  return target;
}

size_t TopicOutputMappingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.sessions.TopicOutputMappingList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ubii.sessions.TopicOutputMapping elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicOutputMappingList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.sessions.TopicOutputMappingList)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicOutputMappingList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicOutputMappingList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.sessions.TopicOutputMappingList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.sessions.TopicOutputMappingList)
    MergeFrom(*source);
  }
}

void TopicOutputMappingList::MergeFrom(const TopicOutputMappingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.sessions.TopicOutputMappingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void TopicOutputMappingList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.sessions.TopicOutputMappingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicOutputMappingList::CopyFrom(const TopicOutputMappingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.sessions.TopicOutputMappingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicOutputMappingList::IsInitialized() const {
  return true;
}

void TopicOutputMappingList::InternalSwap(TopicOutputMappingList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicOutputMappingList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IOMapping::InitAsDefaultInstance() {
}
class IOMapping::_Internal {
 public:
};

IOMapping::IOMapping()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.sessions.IOMapping)
}
IOMapping::IOMapping(const IOMapping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      input_mappings_(from.input_mappings_),
      output_mappings_(from.output_mappings_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  processing_module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_processing_module_id().empty()) {
    processing_module_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.processing_module_id_);
  }
  processing_module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_processing_module_name().empty()) {
    processing_module_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.processing_module_name_);
  }
  // @@protoc_insertion_point(copy_constructor:ubii.sessions.IOMapping)
}

void IOMapping::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IOMapping_proto_2fsessions_2fioMappings_2eproto.base);
  processing_module_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processing_module_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

IOMapping::~IOMapping() {
  // @@protoc_insertion_point(destructor:ubii.sessions.IOMapping)
  SharedDtor();
}

void IOMapping::SharedDtor() {
  processing_module_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processing_module_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IOMapping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOMapping& IOMapping::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOMapping_proto_2fsessions_2fioMappings_2eproto.base);
  return *internal_default_instance();
}


void IOMapping::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.sessions.IOMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  input_mappings_.Clear();
  output_mappings_.Clear();
  processing_module_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  processing_module_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

const char* IOMapping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string processing_module_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_processing_module_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.sessions.IOMapping.processing_module_id"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .ubii.sessions.TopicInputMapping input_mappings = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_input_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .ubii.sessions.TopicOutputMapping output_mappings = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_output_mappings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      // string processing_module_name = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_processing_module_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.sessions.IOMapping.processing_module_name"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IOMapping::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.sessions.IOMapping)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string processing_module_id = 1;
  if (this->processing_module_id().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processing_module_id().data(), static_cast<int>(this->_internal_processing_module_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.sessions.IOMapping.processing_module_id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_processing_module_id(), target);
  }

  // repeated .ubii.sessions.TopicInputMapping input_mappings = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_input_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_input_mappings(i), target, stream);
  }

  // repeated .ubii.sessions.TopicOutputMapping output_mappings = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_output_mappings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_output_mappings(i), target, stream);
  }

  // string processing_module_name = 4;
  if (this->processing_module_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_processing_module_name().data(), static_cast<int>(this->_internal_processing_module_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.sessions.IOMapping.processing_module_name");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_processing_module_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.sessions.IOMapping)
  return target;
}

size_t IOMapping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.sessions.IOMapping)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ubii.sessions.TopicInputMapping input_mappings = 2;
  total_size += 1UL * this->_internal_input_mappings_size();
  for (const auto& msg : this->input_mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .ubii.sessions.TopicOutputMapping output_mappings = 3;
  total_size += 1UL * this->_internal_output_mappings_size();
  for (const auto& msg : this->output_mappings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string processing_module_id = 1;
  if (this->processing_module_id().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processing_module_id());
  }

  // string processing_module_name = 4;
  if (this->processing_module_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_processing_module_name());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOMapping::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.sessions.IOMapping)
  GOOGLE_DCHECK_NE(&from, this);
  const IOMapping* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOMapping>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.sessions.IOMapping)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.sessions.IOMapping)
    MergeFrom(*source);
  }
}

void IOMapping::MergeFrom(const IOMapping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.sessions.IOMapping)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  input_mappings_.MergeFrom(from.input_mappings_);
  output_mappings_.MergeFrom(from.output_mappings_);
  if (from.processing_module_id().size() > 0) {

    processing_module_id_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.processing_module_id_);
  }
  if (from.processing_module_name().size() > 0) {

    processing_module_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.processing_module_name_);
  }
}

void IOMapping::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.sessions.IOMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOMapping::CopyFrom(const IOMapping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.sessions.IOMapping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOMapping::IsInitialized() const {
  return true;
}

void IOMapping::InternalSwap(IOMapping* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  input_mappings_.InternalSwap(&other->input_mappings_);
  output_mappings_.InternalSwap(&other->output_mappings_);
  processing_module_id_.Swap(&other->processing_module_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  processing_module_name_.Swap(&other->processing_module_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata IOMapping::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void IOMappingList::InitAsDefaultInstance() {
}
class IOMappingList::_Internal {
 public:
};

IOMappingList::IOMappingList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.sessions.IOMappingList)
}
IOMappingList::IOMappingList(const IOMappingList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ubii.sessions.IOMappingList)
}

void IOMappingList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_IOMappingList_proto_2fsessions_2fioMappings_2eproto.base);
}

IOMappingList::~IOMappingList() {
  // @@protoc_insertion_point(destructor:ubii.sessions.IOMappingList)
  SharedDtor();
}

void IOMappingList::SharedDtor() {
}

void IOMappingList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const IOMappingList& IOMappingList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_IOMappingList_proto_2fsessions_2fioMappings_2eproto.base);
  return *internal_default_instance();
}


void IOMappingList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.sessions.IOMappingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

const char* IOMappingList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ubii.sessions.IOMapping elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* IOMappingList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.sessions.IOMappingList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ubii.sessions.IOMapping elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.sessions.IOMappingList)
  return target;
}

size_t IOMappingList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.sessions.IOMappingList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ubii.sessions.IOMapping elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void IOMappingList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.sessions.IOMappingList)
  GOOGLE_DCHECK_NE(&from, this);
  const IOMappingList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<IOMappingList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.sessions.IOMappingList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.sessions.IOMappingList)
    MergeFrom(*source);
  }
}

void IOMappingList::MergeFrom(const IOMappingList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.sessions.IOMappingList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void IOMappingList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.sessions.IOMappingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IOMappingList::CopyFrom(const IOMappingList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.sessions.IOMappingList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IOMappingList::IsInitialized() const {
  return true;
}

void IOMappingList::InternalSwap(IOMappingList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata IOMappingList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace sessions
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ubii::sessions::TopicInputMapping* Arena::CreateMaybeMessage< ::ubii::sessions::TopicInputMapping >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::sessions::TopicInputMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::ubii::sessions::TopicInputMappingList* Arena::CreateMaybeMessage< ::ubii::sessions::TopicInputMappingList >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::sessions::TopicInputMappingList >(arena);
}
template<> PROTOBUF_NOINLINE ::ubii::sessions::TopicOutputMapping* Arena::CreateMaybeMessage< ::ubii::sessions::TopicOutputMapping >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::sessions::TopicOutputMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::ubii::sessions::TopicOutputMappingList* Arena::CreateMaybeMessage< ::ubii::sessions::TopicOutputMappingList >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::sessions::TopicOutputMappingList >(arena);
}
template<> PROTOBUF_NOINLINE ::ubii::sessions::IOMapping* Arena::CreateMaybeMessage< ::ubii::sessions::IOMapping >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::sessions::IOMapping >(arena);
}
template<> PROTOBUF_NOINLINE ::ubii::sessions::IOMappingList* Arena::CreateMaybeMessage< ::ubii::sessions::IOMappingList >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::sessions::IOMappingList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
