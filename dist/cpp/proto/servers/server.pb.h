// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/servers/server.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fservers_2fserver_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fservers_2fserver_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fservers_2fserver_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fservers_2fserver_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fservers_2fserver_2eproto;
namespace ubii {
namespace servers {
class Server;
class ServerDefaultTypeInternal;
extern ServerDefaultTypeInternal _Server_default_instance_;
}  // namespace servers
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::servers::Server* Arena::CreateMaybeMessage<::ubii::servers::Server>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace servers {

// ===================================================================

class Server :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.servers.Server) */ {
 public:
  Server();
  virtual ~Server();

  Server(const Server& from);
  Server(Server&& from) noexcept
    : Server() {
    *this = ::std::move(from);
  }

  inline Server& operator=(const Server& from) {
    CopyFrom(from);
    return *this;
  }
  inline Server& operator=(Server&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Server& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Server* internal_default_instance() {
    return reinterpret_cast<const Server*>(
               &_Server_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Server& a, Server& b) {
    a.Swap(&b);
  }
  inline void Swap(Server* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Server* New() const final {
    return CreateMaybeMessage<Server>(nullptr);
  }

  Server* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Server>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Server& from);
  void MergeFrom(const Server& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Server* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.servers.Server";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fservers_2fserver_2eproto);
    return ::descriptor_table_proto_2fservers_2fserver_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kIpEthernetFieldNumber = 3,
    kIpWlanFieldNumber = 4,
    kPortServiceZmqFieldNumber = 5,
    kPortServiceRestFieldNumber = 6,
    kPortTopicDataZmqFieldNumber = 7,
    kPortTopicDataWsFieldNumber = 8,
    kConstantsJsonFieldNumber = 9,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string ip_ethernet = 3;
  void clear_ip_ethernet();
  const std::string& ip_ethernet() const;
  void set_ip_ethernet(const std::string& value);
  void set_ip_ethernet(std::string&& value);
  void set_ip_ethernet(const char* value);
  void set_ip_ethernet(const char* value, size_t size);
  std::string* mutable_ip_ethernet();
  std::string* release_ip_ethernet();
  void set_allocated_ip_ethernet(std::string* ip_ethernet);
  private:
  const std::string& _internal_ip_ethernet() const;
  void _internal_set_ip_ethernet(const std::string& value);
  std::string* _internal_mutable_ip_ethernet();
  public:

  // string ip_wlan = 4;
  void clear_ip_wlan();
  const std::string& ip_wlan() const;
  void set_ip_wlan(const std::string& value);
  void set_ip_wlan(std::string&& value);
  void set_ip_wlan(const char* value);
  void set_ip_wlan(const char* value, size_t size);
  std::string* mutable_ip_wlan();
  std::string* release_ip_wlan();
  void set_allocated_ip_wlan(std::string* ip_wlan);
  private:
  const std::string& _internal_ip_wlan() const;
  void _internal_set_ip_wlan(const std::string& value);
  std::string* _internal_mutable_ip_wlan();
  public:

  // string port_service_zmq = 5;
  void clear_port_service_zmq();
  const std::string& port_service_zmq() const;
  void set_port_service_zmq(const std::string& value);
  void set_port_service_zmq(std::string&& value);
  void set_port_service_zmq(const char* value);
  void set_port_service_zmq(const char* value, size_t size);
  std::string* mutable_port_service_zmq();
  std::string* release_port_service_zmq();
  void set_allocated_port_service_zmq(std::string* port_service_zmq);
  private:
  const std::string& _internal_port_service_zmq() const;
  void _internal_set_port_service_zmq(const std::string& value);
  std::string* _internal_mutable_port_service_zmq();
  public:

  // string port_service_rest = 6;
  void clear_port_service_rest();
  const std::string& port_service_rest() const;
  void set_port_service_rest(const std::string& value);
  void set_port_service_rest(std::string&& value);
  void set_port_service_rest(const char* value);
  void set_port_service_rest(const char* value, size_t size);
  std::string* mutable_port_service_rest();
  std::string* release_port_service_rest();
  void set_allocated_port_service_rest(std::string* port_service_rest);
  private:
  const std::string& _internal_port_service_rest() const;
  void _internal_set_port_service_rest(const std::string& value);
  std::string* _internal_mutable_port_service_rest();
  public:

  // string port_topic_data_zmq = 7;
  void clear_port_topic_data_zmq();
  const std::string& port_topic_data_zmq() const;
  void set_port_topic_data_zmq(const std::string& value);
  void set_port_topic_data_zmq(std::string&& value);
  void set_port_topic_data_zmq(const char* value);
  void set_port_topic_data_zmq(const char* value, size_t size);
  std::string* mutable_port_topic_data_zmq();
  std::string* release_port_topic_data_zmq();
  void set_allocated_port_topic_data_zmq(std::string* port_topic_data_zmq);
  private:
  const std::string& _internal_port_topic_data_zmq() const;
  void _internal_set_port_topic_data_zmq(const std::string& value);
  std::string* _internal_mutable_port_topic_data_zmq();
  public:

  // string port_topic_data_ws = 8;
  void clear_port_topic_data_ws();
  const std::string& port_topic_data_ws() const;
  void set_port_topic_data_ws(const std::string& value);
  void set_port_topic_data_ws(std::string&& value);
  void set_port_topic_data_ws(const char* value);
  void set_port_topic_data_ws(const char* value, size_t size);
  std::string* mutable_port_topic_data_ws();
  std::string* release_port_topic_data_ws();
  void set_allocated_port_topic_data_ws(std::string* port_topic_data_ws);
  private:
  const std::string& _internal_port_topic_data_ws() const;
  void _internal_set_port_topic_data_ws(const std::string& value);
  std::string* _internal_mutable_port_topic_data_ws();
  public:

  // string constants_json = 9;
  void clear_constants_json();
  const std::string& constants_json() const;
  void set_constants_json(const std::string& value);
  void set_constants_json(std::string&& value);
  void set_constants_json(const char* value);
  void set_constants_json(const char* value, size_t size);
  std::string* mutable_constants_json();
  std::string* release_constants_json();
  void set_allocated_constants_json(std::string* constants_json);
  private:
  const std::string& _internal_constants_json() const;
  void _internal_set_constants_json(const std::string& value);
  std::string* _internal_mutable_constants_json();
  public:

  // @@protoc_insertion_point(class_scope:ubii.servers.Server)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_ethernet_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ip_wlan_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_service_zmq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_service_rest_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_topic_data_zmq_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr port_topic_data_ws_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr constants_json_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fservers_2fserver_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Server

// string id = 1;
inline void Server::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::id() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.id)
  return _internal_id();
}
inline void Server::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.id)
}
inline std::string* Server::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.id)
  return _internal_mutable_id();
}
inline const std::string& Server::_internal_id() const {
  return id_.GetNoArena();
}
inline void Server::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.id)
}
inline void Server::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.id)
}
inline void Server::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.id)
}
inline std::string* Server::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_id() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.id)
}

// string name = 2;
inline void Server::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::name() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.name)
  return _internal_name();
}
inline void Server::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.name)
}
inline std::string* Server::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.name)
  return _internal_mutable_name();
}
inline const std::string& Server::_internal_name() const {
  return name_.GetNoArena();
}
inline void Server::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.name)
}
inline void Server::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.name)
}
inline void Server::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.name)
}
inline std::string* Server::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_name() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.name)
}

// string ip_ethernet = 3;
inline void Server::clear_ip_ethernet() {
  ip_ethernet_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::ip_ethernet() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.ip_ethernet)
  return _internal_ip_ethernet();
}
inline void Server::set_ip_ethernet(const std::string& value) {
  _internal_set_ip_ethernet(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.ip_ethernet)
}
inline std::string* Server::mutable_ip_ethernet() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.ip_ethernet)
  return _internal_mutable_ip_ethernet();
}
inline const std::string& Server::_internal_ip_ethernet() const {
  return ip_ethernet_.GetNoArena();
}
inline void Server::_internal_set_ip_ethernet(const std::string& value) {
  
  ip_ethernet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_ip_ethernet(std::string&& value) {
  
  ip_ethernet_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.ip_ethernet)
}
inline void Server::set_ip_ethernet(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_ethernet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.ip_ethernet)
}
inline void Server::set_ip_ethernet(const char* value, size_t size) {
  
  ip_ethernet_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.ip_ethernet)
}
inline std::string* Server::_internal_mutable_ip_ethernet() {
  
  return ip_ethernet_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_ip_ethernet() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.ip_ethernet)
  
  return ip_ethernet_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_ip_ethernet(std::string* ip_ethernet) {
  if (ip_ethernet != nullptr) {
    
  } else {
    
  }
  ip_ethernet_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_ethernet);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.ip_ethernet)
}

// string ip_wlan = 4;
inline void Server::clear_ip_wlan() {
  ip_wlan_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::ip_wlan() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.ip_wlan)
  return _internal_ip_wlan();
}
inline void Server::set_ip_wlan(const std::string& value) {
  _internal_set_ip_wlan(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.ip_wlan)
}
inline std::string* Server::mutable_ip_wlan() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.ip_wlan)
  return _internal_mutable_ip_wlan();
}
inline const std::string& Server::_internal_ip_wlan() const {
  return ip_wlan_.GetNoArena();
}
inline void Server::_internal_set_ip_wlan(const std::string& value) {
  
  ip_wlan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_ip_wlan(std::string&& value) {
  
  ip_wlan_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.ip_wlan)
}
inline void Server::set_ip_wlan(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  ip_wlan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.ip_wlan)
}
inline void Server::set_ip_wlan(const char* value, size_t size) {
  
  ip_wlan_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.ip_wlan)
}
inline std::string* Server::_internal_mutable_ip_wlan() {
  
  return ip_wlan_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_ip_wlan() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.ip_wlan)
  
  return ip_wlan_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_ip_wlan(std::string* ip_wlan) {
  if (ip_wlan != nullptr) {
    
  } else {
    
  }
  ip_wlan_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ip_wlan);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.ip_wlan)
}

// string port_service_zmq = 5;
inline void Server::clear_port_service_zmq() {
  port_service_zmq_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::port_service_zmq() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.port_service_zmq)
  return _internal_port_service_zmq();
}
inline void Server::set_port_service_zmq(const std::string& value) {
  _internal_set_port_service_zmq(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.port_service_zmq)
}
inline std::string* Server::mutable_port_service_zmq() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.port_service_zmq)
  return _internal_mutable_port_service_zmq();
}
inline const std::string& Server::_internal_port_service_zmq() const {
  return port_service_zmq_.GetNoArena();
}
inline void Server::_internal_set_port_service_zmq(const std::string& value) {
  
  port_service_zmq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_port_service_zmq(std::string&& value) {
  
  port_service_zmq_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.port_service_zmq)
}
inline void Server::set_port_service_zmq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_service_zmq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.port_service_zmq)
}
inline void Server::set_port_service_zmq(const char* value, size_t size) {
  
  port_service_zmq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.port_service_zmq)
}
inline std::string* Server::_internal_mutable_port_service_zmq() {
  
  return port_service_zmq_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_port_service_zmq() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.port_service_zmq)
  
  return port_service_zmq_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_port_service_zmq(std::string* port_service_zmq) {
  if (port_service_zmq != nullptr) {
    
  } else {
    
  }
  port_service_zmq_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_service_zmq);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.port_service_zmq)
}

// string port_service_rest = 6;
inline void Server::clear_port_service_rest() {
  port_service_rest_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::port_service_rest() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.port_service_rest)
  return _internal_port_service_rest();
}
inline void Server::set_port_service_rest(const std::string& value) {
  _internal_set_port_service_rest(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.port_service_rest)
}
inline std::string* Server::mutable_port_service_rest() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.port_service_rest)
  return _internal_mutable_port_service_rest();
}
inline const std::string& Server::_internal_port_service_rest() const {
  return port_service_rest_.GetNoArena();
}
inline void Server::_internal_set_port_service_rest(const std::string& value) {
  
  port_service_rest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_port_service_rest(std::string&& value) {
  
  port_service_rest_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.port_service_rest)
}
inline void Server::set_port_service_rest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_service_rest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.port_service_rest)
}
inline void Server::set_port_service_rest(const char* value, size_t size) {
  
  port_service_rest_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.port_service_rest)
}
inline std::string* Server::_internal_mutable_port_service_rest() {
  
  return port_service_rest_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_port_service_rest() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.port_service_rest)
  
  return port_service_rest_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_port_service_rest(std::string* port_service_rest) {
  if (port_service_rest != nullptr) {
    
  } else {
    
  }
  port_service_rest_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_service_rest);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.port_service_rest)
}

// string port_topic_data_zmq = 7;
inline void Server::clear_port_topic_data_zmq() {
  port_topic_data_zmq_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::port_topic_data_zmq() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.port_topic_data_zmq)
  return _internal_port_topic_data_zmq();
}
inline void Server::set_port_topic_data_zmq(const std::string& value) {
  _internal_set_port_topic_data_zmq(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.port_topic_data_zmq)
}
inline std::string* Server::mutable_port_topic_data_zmq() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.port_topic_data_zmq)
  return _internal_mutable_port_topic_data_zmq();
}
inline const std::string& Server::_internal_port_topic_data_zmq() const {
  return port_topic_data_zmq_.GetNoArena();
}
inline void Server::_internal_set_port_topic_data_zmq(const std::string& value) {
  
  port_topic_data_zmq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_port_topic_data_zmq(std::string&& value) {
  
  port_topic_data_zmq_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.port_topic_data_zmq)
}
inline void Server::set_port_topic_data_zmq(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_topic_data_zmq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.port_topic_data_zmq)
}
inline void Server::set_port_topic_data_zmq(const char* value, size_t size) {
  
  port_topic_data_zmq_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.port_topic_data_zmq)
}
inline std::string* Server::_internal_mutable_port_topic_data_zmq() {
  
  return port_topic_data_zmq_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_port_topic_data_zmq() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.port_topic_data_zmq)
  
  return port_topic_data_zmq_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_port_topic_data_zmq(std::string* port_topic_data_zmq) {
  if (port_topic_data_zmq != nullptr) {
    
  } else {
    
  }
  port_topic_data_zmq_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_topic_data_zmq);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.port_topic_data_zmq)
}

// string port_topic_data_ws = 8;
inline void Server::clear_port_topic_data_ws() {
  port_topic_data_ws_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::port_topic_data_ws() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.port_topic_data_ws)
  return _internal_port_topic_data_ws();
}
inline void Server::set_port_topic_data_ws(const std::string& value) {
  _internal_set_port_topic_data_ws(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.port_topic_data_ws)
}
inline std::string* Server::mutable_port_topic_data_ws() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.port_topic_data_ws)
  return _internal_mutable_port_topic_data_ws();
}
inline const std::string& Server::_internal_port_topic_data_ws() const {
  return port_topic_data_ws_.GetNoArena();
}
inline void Server::_internal_set_port_topic_data_ws(const std::string& value) {
  
  port_topic_data_ws_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_port_topic_data_ws(std::string&& value) {
  
  port_topic_data_ws_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.port_topic_data_ws)
}
inline void Server::set_port_topic_data_ws(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  port_topic_data_ws_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.port_topic_data_ws)
}
inline void Server::set_port_topic_data_ws(const char* value, size_t size) {
  
  port_topic_data_ws_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.port_topic_data_ws)
}
inline std::string* Server::_internal_mutable_port_topic_data_ws() {
  
  return port_topic_data_ws_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_port_topic_data_ws() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.port_topic_data_ws)
  
  return port_topic_data_ws_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_port_topic_data_ws(std::string* port_topic_data_ws) {
  if (port_topic_data_ws != nullptr) {
    
  } else {
    
  }
  port_topic_data_ws_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), port_topic_data_ws);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.port_topic_data_ws)
}

// string constants_json = 9;
inline void Server::clear_constants_json() {
  constants_json_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Server::constants_json() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.constants_json)
  return _internal_constants_json();
}
inline void Server::set_constants_json(const std::string& value) {
  _internal_set_constants_json(value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.constants_json)
}
inline std::string* Server::mutable_constants_json() {
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.constants_json)
  return _internal_mutable_constants_json();
}
inline const std::string& Server::_internal_constants_json() const {
  return constants_json_.GetNoArena();
}
inline void Server::_internal_set_constants_json(const std::string& value) {
  
  constants_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Server::set_constants_json(std::string&& value) {
  
  constants_json_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.servers.Server.constants_json)
}
inline void Server::set_constants_json(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  constants_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.constants_json)
}
inline void Server::set_constants_json(const char* value, size_t size) {
  
  constants_json_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.constants_json)
}
inline std::string* Server::_internal_mutable_constants_json() {
  
  return constants_json_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Server::release_constants_json() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.constants_json)
  
  return constants_json_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Server::set_allocated_constants_json(std::string* constants_json) {
  if (constants_json != nullptr) {
    
  } else {
    
  }
  constants_json_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), constants_json);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.constants_json)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace servers
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fservers_2fserver_2eproto
