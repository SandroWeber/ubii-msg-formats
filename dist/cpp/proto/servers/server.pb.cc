// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/servers/server.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/servers/server.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace servers {

namespace {

const ::google::protobuf::Descriptor* Server_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Server_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fservers_2fserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fservers_2fserver_2eproto() {
  protobuf_AddDesc_proto_2fservers_2fserver_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/servers/server.proto");
  GOOGLE_CHECK(file != NULL);
  Server_descriptor_ = file->message_type(0);
  static const int Server_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, ip_ethernet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, ip_wlan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, port_service_zmq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, port_service_rest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, port_topic_data_zmq_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, port_topic_data_ws_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, constants_json_),
  };
  Server_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Server_descriptor_,
      Server::default_instance_,
      Server_offsets_,
      -1,
      -1,
      -1,
      sizeof(Server),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Server, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fservers_2fserver_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Server_descriptor_, &Server::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fservers_2fserver_2eproto() {
  delete Server::default_instance_;
  delete Server_reflection_;
}

void protobuf_AddDesc_proto_2fservers_2fserver_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fservers_2fserver_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032proto/servers/server.proto\022\014ubii.serve"
    "rs\"\316\001\n\006Server\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\022"
    "\023\n\013ip_ethernet\030\003 \001(\t\022\017\n\007ip_wlan\030\004 \001(\t\022\030\n"
    "\020port_service_zmq\030\005 \001(\t\022\031\n\021port_service_"
    "rest\030\006 \001(\t\022\033\n\023port_topic_data_zmq\030\007 \001(\t\022"
    "\032\n\022port_topic_data_ws\030\010 \001(\t\022\026\n\016constants"
    "_json\030\t \001(\tb\006proto3", 259);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/servers/server.proto", &protobuf_RegisterTypes);
  Server::default_instance_ = new Server();
  Server::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fservers_2fserver_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fservers_2fserver_2eproto {
  StaticDescriptorInitializer_proto_2fservers_2fserver_2eproto() {
    protobuf_AddDesc_proto_2fservers_2fserver_2eproto();
  }
} static_descriptor_initializer_proto_2fservers_2fserver_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Server::kIdFieldNumber;
const int Server::kNameFieldNumber;
const int Server::kIpEthernetFieldNumber;
const int Server::kIpWlanFieldNumber;
const int Server::kPortServiceZmqFieldNumber;
const int Server::kPortServiceRestFieldNumber;
const int Server::kPortTopicDataZmqFieldNumber;
const int Server::kPortTopicDataWsFieldNumber;
const int Server::kConstantsJsonFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Server::Server()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.servers.Server)
}

void Server::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Server::Server(const Server& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.servers.Server)
}

void Server::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ethernet_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_wlan_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_service_zmq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_service_rest_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_topic_data_zmq_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_topic_data_ws_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constants_json_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Server::~Server() {
  // @@protoc_insertion_point(destructor:ubii.servers.Server)
  SharedDtor();
}

void Server::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ethernet_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_wlan_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_service_zmq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_service_rest_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_topic_data_zmq_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_topic_data_ws_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constants_json_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Server::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Server::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Server_descriptor_;
}

const Server& Server::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fservers_2fserver_2eproto();
  return *default_instance_;
}

Server* Server::default_instance_ = NULL;

Server* Server::New(::google::protobuf::Arena* arena) const {
  Server* n = new Server;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Server::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.servers.Server)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_ethernet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_wlan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_service_zmq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_service_rest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_topic_data_zmq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_topic_data_ws_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  constants_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Server::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.servers.Server)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_ip_ethernet;
        break;
      }

      // optional string ip_ethernet = 3;
      case 3: {
        if (tag == 26) {
         parse_ip_ethernet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_ethernet()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_ethernet().data(), this->ip_ethernet().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.ip_ethernet"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_ip_wlan;
        break;
      }

      // optional string ip_wlan = 4;
      case 4: {
        if (tag == 34) {
         parse_ip_wlan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_wlan()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_wlan().data(), this->ip_wlan().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.ip_wlan"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_port_service_zmq;
        break;
      }

      // optional string port_service_zmq = 5;
      case 5: {
        if (tag == 42) {
         parse_port_service_zmq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_service_zmq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port_service_zmq().data(), this->port_service_zmq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.port_service_zmq"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_port_service_rest;
        break;
      }

      // optional string port_service_rest = 6;
      case 6: {
        if (tag == 50) {
         parse_port_service_rest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_service_rest()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port_service_rest().data(), this->port_service_rest().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.port_service_rest"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_port_topic_data_zmq;
        break;
      }

      // optional string port_topic_data_zmq = 7;
      case 7: {
        if (tag == 58) {
         parse_port_topic_data_zmq:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_topic_data_zmq()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port_topic_data_zmq().data(), this->port_topic_data_zmq().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.port_topic_data_zmq"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_port_topic_data_ws;
        break;
      }

      // optional string port_topic_data_ws = 8;
      case 8: {
        if (tag == 66) {
         parse_port_topic_data_ws:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port_topic_data_ws()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port_topic_data_ws().data(), this->port_topic_data_ws().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.port_topic_data_ws"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_constants_json;
        break;
      }

      // optional string constants_json = 9;
      case 9: {
        if (tag == 74) {
         parse_constants_json:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_constants_json()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->constants_json().data(), this->constants_json().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.servers.Server.constants_json"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.servers.Server)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.servers.Server)
  return false;
#undef DO_
}

void Server::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.servers.Server)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string ip_ethernet = 3;
  if (this->ip_ethernet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_ethernet().data(), this->ip_ethernet().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.ip_ethernet");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->ip_ethernet(), output);
  }

  // optional string ip_wlan = 4;
  if (this->ip_wlan().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_wlan().data(), this->ip_wlan().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.ip_wlan");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->ip_wlan(), output);
  }

  // optional string port_service_zmq = 5;
  if (this->port_service_zmq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_service_zmq().data(), this->port_service_zmq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.port_service_zmq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->port_service_zmq(), output);
  }

  // optional string port_service_rest = 6;
  if (this->port_service_rest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_service_rest().data(), this->port_service_rest().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.port_service_rest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->port_service_rest(), output);
  }

  // optional string port_topic_data_zmq = 7;
  if (this->port_topic_data_zmq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_topic_data_zmq().data(), this->port_topic_data_zmq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.port_topic_data_zmq");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->port_topic_data_zmq(), output);
  }

  // optional string port_topic_data_ws = 8;
  if (this->port_topic_data_ws().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_topic_data_ws().data(), this->port_topic_data_ws().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.port_topic_data_ws");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->port_topic_data_ws(), output);
  }

  // optional string constants_json = 9;
  if (this->constants_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->constants_json().data(), this->constants_json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.constants_json");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->constants_json(), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.servers.Server)
}

::google::protobuf::uint8* Server::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.servers.Server)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string ip_ethernet = 3;
  if (this->ip_ethernet().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_ethernet().data(), this->ip_ethernet().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.ip_ethernet");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip_ethernet(), target);
  }

  // optional string ip_wlan = 4;
  if (this->ip_wlan().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_wlan().data(), this->ip_wlan().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.ip_wlan");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip_wlan(), target);
  }

  // optional string port_service_zmq = 5;
  if (this->port_service_zmq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_service_zmq().data(), this->port_service_zmq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.port_service_zmq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->port_service_zmq(), target);
  }

  // optional string port_service_rest = 6;
  if (this->port_service_rest().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_service_rest().data(), this->port_service_rest().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.port_service_rest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->port_service_rest(), target);
  }

  // optional string port_topic_data_zmq = 7;
  if (this->port_topic_data_zmq().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_topic_data_zmq().data(), this->port_topic_data_zmq().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.port_topic_data_zmq");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->port_topic_data_zmq(), target);
  }

  // optional string port_topic_data_ws = 8;
  if (this->port_topic_data_ws().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port_topic_data_ws().data(), this->port_topic_data_ws().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.port_topic_data_ws");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->port_topic_data_ws(), target);
  }

  // optional string constants_json = 9;
  if (this->constants_json().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->constants_json().data(), this->constants_json().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.servers.Server.constants_json");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->constants_json(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.servers.Server)
  return target;
}

int Server::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.servers.Server)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string ip_ethernet = 3;
  if (this->ip_ethernet().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_ethernet());
  }

  // optional string ip_wlan = 4;
  if (this->ip_wlan().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_wlan());
  }

  // optional string port_service_zmq = 5;
  if (this->port_service_zmq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port_service_zmq());
  }

  // optional string port_service_rest = 6;
  if (this->port_service_rest().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port_service_rest());
  }

  // optional string port_topic_data_zmq = 7;
  if (this->port_topic_data_zmq().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port_topic_data_zmq());
  }

  // optional string port_topic_data_ws = 8;
  if (this->port_topic_data_ws().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port_topic_data_ws());
  }

  // optional string constants_json = 9;
  if (this->constants_json().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->constants_json());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Server::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.servers.Server)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Server* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Server>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.servers.Server)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.servers.Server)
    MergeFrom(*source);
  }
}

void Server::MergeFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.servers.Server)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.ip_ethernet().size() > 0) {

    ip_ethernet_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_ethernet_);
  }
  if (from.ip_wlan().size() > 0) {

    ip_wlan_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_wlan_);
  }
  if (from.port_service_zmq().size() > 0) {

    port_service_zmq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_service_zmq_);
  }
  if (from.port_service_rest().size() > 0) {

    port_service_rest_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_service_rest_);
  }
  if (from.port_topic_data_zmq().size() > 0) {

    port_topic_data_zmq_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_topic_data_zmq_);
  }
  if (from.port_topic_data_ws().size() > 0) {

    port_topic_data_ws_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_topic_data_ws_);
  }
  if (from.constants_json().size() > 0) {

    constants_json_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.constants_json_);
  }
}

void Server::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.servers.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Server::CopyFrom(const Server& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.servers.Server)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Server::IsInitialized() const {

  return true;
}

void Server::Swap(Server* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Server::InternalSwap(Server* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  ip_ethernet_.Swap(&other->ip_ethernet_);
  ip_wlan_.Swap(&other->ip_wlan_);
  port_service_zmq_.Swap(&other->port_service_zmq_);
  port_service_rest_.Swap(&other->port_service_rest_);
  port_topic_data_zmq_.Swap(&other->port_topic_data_zmq_);
  port_topic_data_ws_.Swap(&other->port_topic_data_ws_);
  constants_json_.Swap(&other->constants_json_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Server::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Server_descriptor_;
  metadata.reflection = Server_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Server

// optional string id = 1;
void Server::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::id() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.id)
}
 void Server::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.id)
}
 void Server::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.id)
}
 ::std::string* Server::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_id() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.id)
}

// optional string name = 2;
void Server::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::name() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.name)
}
 void Server::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.name)
}
 void Server::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.name)
}
 ::std::string* Server::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_name() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.name)
}

// optional string ip_ethernet = 3;
void Server::clear_ip_ethernet() {
  ip_ethernet_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::ip_ethernet() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.ip_ethernet)
  return ip_ethernet_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_ip_ethernet(const ::std::string& value) {
  
  ip_ethernet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.ip_ethernet)
}
 void Server::set_ip_ethernet(const char* value) {
  
  ip_ethernet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.ip_ethernet)
}
 void Server::set_ip_ethernet(const char* value, size_t size) {
  
  ip_ethernet_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.ip_ethernet)
}
 ::std::string* Server::mutable_ip_ethernet() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.ip_ethernet)
  return ip_ethernet_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_ip_ethernet() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.ip_ethernet)
  
  return ip_ethernet_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_ip_ethernet(::std::string* ip_ethernet) {
  if (ip_ethernet != NULL) {
    
  } else {
    
  }
  ip_ethernet_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_ethernet);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.ip_ethernet)
}

// optional string ip_wlan = 4;
void Server::clear_ip_wlan() {
  ip_wlan_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::ip_wlan() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.ip_wlan)
  return ip_wlan_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_ip_wlan(const ::std::string& value) {
  
  ip_wlan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.ip_wlan)
}
 void Server::set_ip_wlan(const char* value) {
  
  ip_wlan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.ip_wlan)
}
 void Server::set_ip_wlan(const char* value, size_t size) {
  
  ip_wlan_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.ip_wlan)
}
 ::std::string* Server::mutable_ip_wlan() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.ip_wlan)
  return ip_wlan_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_ip_wlan() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.ip_wlan)
  
  return ip_wlan_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_ip_wlan(::std::string* ip_wlan) {
  if (ip_wlan != NULL) {
    
  } else {
    
  }
  ip_wlan_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_wlan);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.ip_wlan)
}

// optional string port_service_zmq = 5;
void Server::clear_port_service_zmq() {
  port_service_zmq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::port_service_zmq() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.port_service_zmq)
  return port_service_zmq_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_port_service_zmq(const ::std::string& value) {
  
  port_service_zmq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.port_service_zmq)
}
 void Server::set_port_service_zmq(const char* value) {
  
  port_service_zmq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.port_service_zmq)
}
 void Server::set_port_service_zmq(const char* value, size_t size) {
  
  port_service_zmq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.port_service_zmq)
}
 ::std::string* Server::mutable_port_service_zmq() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.port_service_zmq)
  return port_service_zmq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_port_service_zmq() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.port_service_zmq)
  
  return port_service_zmq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_port_service_zmq(::std::string* port_service_zmq) {
  if (port_service_zmq != NULL) {
    
  } else {
    
  }
  port_service_zmq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_service_zmq);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.port_service_zmq)
}

// optional string port_service_rest = 6;
void Server::clear_port_service_rest() {
  port_service_rest_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::port_service_rest() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.port_service_rest)
  return port_service_rest_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_port_service_rest(const ::std::string& value) {
  
  port_service_rest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.port_service_rest)
}
 void Server::set_port_service_rest(const char* value) {
  
  port_service_rest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.port_service_rest)
}
 void Server::set_port_service_rest(const char* value, size_t size) {
  
  port_service_rest_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.port_service_rest)
}
 ::std::string* Server::mutable_port_service_rest() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.port_service_rest)
  return port_service_rest_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_port_service_rest() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.port_service_rest)
  
  return port_service_rest_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_port_service_rest(::std::string* port_service_rest) {
  if (port_service_rest != NULL) {
    
  } else {
    
  }
  port_service_rest_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_service_rest);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.port_service_rest)
}

// optional string port_topic_data_zmq = 7;
void Server::clear_port_topic_data_zmq() {
  port_topic_data_zmq_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::port_topic_data_zmq() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.port_topic_data_zmq)
  return port_topic_data_zmq_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_port_topic_data_zmq(const ::std::string& value) {
  
  port_topic_data_zmq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.port_topic_data_zmq)
}
 void Server::set_port_topic_data_zmq(const char* value) {
  
  port_topic_data_zmq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.port_topic_data_zmq)
}
 void Server::set_port_topic_data_zmq(const char* value, size_t size) {
  
  port_topic_data_zmq_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.port_topic_data_zmq)
}
 ::std::string* Server::mutable_port_topic_data_zmq() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.port_topic_data_zmq)
  return port_topic_data_zmq_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_port_topic_data_zmq() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.port_topic_data_zmq)
  
  return port_topic_data_zmq_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_port_topic_data_zmq(::std::string* port_topic_data_zmq) {
  if (port_topic_data_zmq != NULL) {
    
  } else {
    
  }
  port_topic_data_zmq_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_topic_data_zmq);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.port_topic_data_zmq)
}

// optional string port_topic_data_ws = 8;
void Server::clear_port_topic_data_ws() {
  port_topic_data_ws_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::port_topic_data_ws() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.port_topic_data_ws)
  return port_topic_data_ws_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_port_topic_data_ws(const ::std::string& value) {
  
  port_topic_data_ws_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.port_topic_data_ws)
}
 void Server::set_port_topic_data_ws(const char* value) {
  
  port_topic_data_ws_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.port_topic_data_ws)
}
 void Server::set_port_topic_data_ws(const char* value, size_t size) {
  
  port_topic_data_ws_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.port_topic_data_ws)
}
 ::std::string* Server::mutable_port_topic_data_ws() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.port_topic_data_ws)
  return port_topic_data_ws_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_port_topic_data_ws() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.port_topic_data_ws)
  
  return port_topic_data_ws_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_port_topic_data_ws(::std::string* port_topic_data_ws) {
  if (port_topic_data_ws != NULL) {
    
  } else {
    
  }
  port_topic_data_ws_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port_topic_data_ws);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.port_topic_data_ws)
}

// optional string constants_json = 9;
void Server::clear_constants_json() {
  constants_json_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Server::constants_json() const {
  // @@protoc_insertion_point(field_get:ubii.servers.Server.constants_json)
  return constants_json_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_constants_json(const ::std::string& value) {
  
  constants_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.servers.Server.constants_json)
}
 void Server::set_constants_json(const char* value) {
  
  constants_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.servers.Server.constants_json)
}
 void Server::set_constants_json(const char* value, size_t size) {
  
  constants_json_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.servers.Server.constants_json)
}
 ::std::string* Server::mutable_constants_json() {
  
  // @@protoc_insertion_point(field_mutable:ubii.servers.Server.constants_json)
  return constants_json_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Server::release_constants_json() {
  // @@protoc_insertion_point(field_release:ubii.servers.Server.constants_json)
  
  return constants_json_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Server::set_allocated_constants_json(::std::string* constants_json) {
  if (constants_json != NULL) {
    
  } else {
    
  }
  constants_json_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), constants_json);
  // @@protoc_insertion_point(field_set_allocated:ubii.servers.Server.constants_json)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace servers
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
