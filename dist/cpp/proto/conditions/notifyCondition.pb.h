// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/conditions/notifyCondition.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fconditions_2fnotifyCondition_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fconditions_2fnotifyCondition_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/clients/client.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fconditions_2fnotifyCondition_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fconditions_2fnotifyCondition_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fconditions_2fnotifyCondition_2eproto;
namespace ubii {
namespace conditions {
class NotifyCondition;
class NotifyConditionDefaultTypeInternal;
extern NotifyConditionDefaultTypeInternal _NotifyCondition_default_instance_;
}  // namespace conditions
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::conditions::NotifyCondition* Arena::CreateMaybeMessage<::ubii::conditions::NotifyCondition>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace conditions {

// ===================================================================

class NotifyCondition :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.conditions.NotifyCondition) */ {
 public:
  NotifyCondition();
  virtual ~NotifyCondition();

  NotifyCondition(const NotifyCondition& from);
  NotifyCondition(NotifyCondition&& from) noexcept
    : NotifyCondition() {
    *this = ::std::move(from);
  }

  inline NotifyCondition& operator=(const NotifyCondition& from) {
    CopyFrom(from);
    return *this;
  }
  inline NotifyCondition& operator=(NotifyCondition&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NotifyCondition& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NotifyCondition* internal_default_instance() {
    return reinterpret_cast<const NotifyCondition*>(
               &_NotifyCondition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(NotifyCondition& a, NotifyCondition& b) {
    a.Swap(&b);
  }
  inline void Swap(NotifyCondition* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NotifyCondition* New() const final {
    return CreateMaybeMessage<NotifyCondition>(nullptr);
  }

  NotifyCondition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NotifyCondition>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NotifyCondition& from);
  void MergeFrom(const NotifyCondition& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NotifyCondition* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.conditions.NotifyCondition";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fconditions_2fnotifyCondition_2eproto);
    return ::descriptor_table_proto_2fconditions_2fnotifyCondition_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kEvaluationFunctionStringifiedFieldNumber = 3,
    kClientProfilePubFieldNumber = 4,
    kClientProfileSubFieldNumber = 5,
  };
  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string evaluation_function_stringified = 3;
  void clear_evaluation_function_stringified();
  const std::string& evaluation_function_stringified() const;
  void set_evaluation_function_stringified(const std::string& value);
  void set_evaluation_function_stringified(std::string&& value);
  void set_evaluation_function_stringified(const char* value);
  void set_evaluation_function_stringified(const char* value, size_t size);
  std::string* mutable_evaluation_function_stringified();
  std::string* release_evaluation_function_stringified();
  void set_allocated_evaluation_function_stringified(std::string* evaluation_function_stringified);
  private:
  const std::string& _internal_evaluation_function_stringified() const;
  void _internal_set_evaluation_function_stringified(const std::string& value);
  std::string* _internal_mutable_evaluation_function_stringified();
  public:

  // .ubii.clients.Client client_profile_pub = 4;
  bool has_client_profile_pub() const;
  private:
  bool _internal_has_client_profile_pub() const;
  public:
  void clear_client_profile_pub();
  const ::ubii::clients::Client& client_profile_pub() const;
  ::ubii::clients::Client* release_client_profile_pub();
  ::ubii::clients::Client* mutable_client_profile_pub();
  void set_allocated_client_profile_pub(::ubii::clients::Client* client_profile_pub);
  private:
  const ::ubii::clients::Client& _internal_client_profile_pub() const;
  ::ubii::clients::Client* _internal_mutable_client_profile_pub();
  public:

  // .ubii.clients.Client client_profile_sub = 5;
  bool has_client_profile_sub() const;
  private:
  bool _internal_has_client_profile_sub() const;
  public:
  void clear_client_profile_sub();
  const ::ubii::clients::Client& client_profile_sub() const;
  ::ubii::clients::Client* release_client_profile_sub();
  ::ubii::clients::Client* mutable_client_profile_sub();
  void set_allocated_client_profile_sub(::ubii::clients::Client* client_profile_sub);
  private:
  const ::ubii::clients::Client& _internal_client_profile_sub() const;
  ::ubii::clients::Client* _internal_mutable_client_profile_sub();
  public:

  // @@protoc_insertion_point(class_scope:ubii.conditions.NotifyCondition)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr evaluation_function_stringified_;
  ::ubii::clients::Client* client_profile_pub_;
  ::ubii::clients::Client* client_profile_sub_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fconditions_2fnotifyCondition_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// NotifyCondition

// string id = 1;
inline void NotifyCondition::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NotifyCondition::id() const {
  // @@protoc_insertion_point(field_get:ubii.conditions.NotifyCondition.id)
  return _internal_id();
}
inline void NotifyCondition::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ubii.conditions.NotifyCondition.id)
}
inline std::string* NotifyCondition::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ubii.conditions.NotifyCondition.id)
  return _internal_mutable_id();
}
inline const std::string& NotifyCondition::_internal_id() const {
  return id_.GetNoArena();
}
inline void NotifyCondition::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NotifyCondition::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.conditions.NotifyCondition.id)
}
inline void NotifyCondition::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.conditions.NotifyCondition.id)
}
inline void NotifyCondition::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.conditions.NotifyCondition.id)
}
inline std::string* NotifyCondition::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotifyCondition::release_id() {
  // @@protoc_insertion_point(field_release:ubii.conditions.NotifyCondition.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyCondition::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.conditions.NotifyCondition.id)
}

// string name = 2;
inline void NotifyCondition::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NotifyCondition::name() const {
  // @@protoc_insertion_point(field_get:ubii.conditions.NotifyCondition.name)
  return _internal_name();
}
inline void NotifyCondition::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ubii.conditions.NotifyCondition.name)
}
inline std::string* NotifyCondition::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ubii.conditions.NotifyCondition.name)
  return _internal_mutable_name();
}
inline const std::string& NotifyCondition::_internal_name() const {
  return name_.GetNoArena();
}
inline void NotifyCondition::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NotifyCondition::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.conditions.NotifyCondition.name)
}
inline void NotifyCondition::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.conditions.NotifyCondition.name)
}
inline void NotifyCondition::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.conditions.NotifyCondition.name)
}
inline std::string* NotifyCondition::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotifyCondition::release_name() {
  // @@protoc_insertion_point(field_release:ubii.conditions.NotifyCondition.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyCondition::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.conditions.NotifyCondition.name)
}

// string evaluation_function_stringified = 3;
inline void NotifyCondition::clear_evaluation_function_stringified() {
  evaluation_function_stringified_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& NotifyCondition::evaluation_function_stringified() const {
  // @@protoc_insertion_point(field_get:ubii.conditions.NotifyCondition.evaluation_function_stringified)
  return _internal_evaluation_function_stringified();
}
inline void NotifyCondition::set_evaluation_function_stringified(const std::string& value) {
  _internal_set_evaluation_function_stringified(value);
  // @@protoc_insertion_point(field_set:ubii.conditions.NotifyCondition.evaluation_function_stringified)
}
inline std::string* NotifyCondition::mutable_evaluation_function_stringified() {
  // @@protoc_insertion_point(field_mutable:ubii.conditions.NotifyCondition.evaluation_function_stringified)
  return _internal_mutable_evaluation_function_stringified();
}
inline const std::string& NotifyCondition::_internal_evaluation_function_stringified() const {
  return evaluation_function_stringified_.GetNoArena();
}
inline void NotifyCondition::_internal_set_evaluation_function_stringified(const std::string& value) {
  
  evaluation_function_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void NotifyCondition::set_evaluation_function_stringified(std::string&& value) {
  
  evaluation_function_stringified_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.conditions.NotifyCondition.evaluation_function_stringified)
}
inline void NotifyCondition::set_evaluation_function_stringified(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  evaluation_function_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.conditions.NotifyCondition.evaluation_function_stringified)
}
inline void NotifyCondition::set_evaluation_function_stringified(const char* value, size_t size) {
  
  evaluation_function_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.conditions.NotifyCondition.evaluation_function_stringified)
}
inline std::string* NotifyCondition::_internal_mutable_evaluation_function_stringified() {
  
  return evaluation_function_stringified_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* NotifyCondition::release_evaluation_function_stringified() {
  // @@protoc_insertion_point(field_release:ubii.conditions.NotifyCondition.evaluation_function_stringified)
  
  return evaluation_function_stringified_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void NotifyCondition::set_allocated_evaluation_function_stringified(std::string* evaluation_function_stringified) {
  if (evaluation_function_stringified != nullptr) {
    
  } else {
    
  }
  evaluation_function_stringified_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), evaluation_function_stringified);
  // @@protoc_insertion_point(field_set_allocated:ubii.conditions.NotifyCondition.evaluation_function_stringified)
}

// .ubii.clients.Client client_profile_pub = 4;
inline bool NotifyCondition::_internal_has_client_profile_pub() const {
  return this != internal_default_instance() && client_profile_pub_ != nullptr;
}
inline bool NotifyCondition::has_client_profile_pub() const {
  return _internal_has_client_profile_pub();
}
inline const ::ubii::clients::Client& NotifyCondition::_internal_client_profile_pub() const {
  const ::ubii::clients::Client* p = client_profile_pub_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ubii::clients::Client*>(
      &::ubii::clients::_Client_default_instance_);
}
inline const ::ubii::clients::Client& NotifyCondition::client_profile_pub() const {
  // @@protoc_insertion_point(field_get:ubii.conditions.NotifyCondition.client_profile_pub)
  return _internal_client_profile_pub();
}
inline ::ubii::clients::Client* NotifyCondition::release_client_profile_pub() {
  // @@protoc_insertion_point(field_release:ubii.conditions.NotifyCondition.client_profile_pub)
  
  ::ubii::clients::Client* temp = client_profile_pub_;
  client_profile_pub_ = nullptr;
  return temp;
}
inline ::ubii::clients::Client* NotifyCondition::_internal_mutable_client_profile_pub() {
  
  if (client_profile_pub_ == nullptr) {
    auto* p = CreateMaybeMessage<::ubii::clients::Client>(GetArenaNoVirtual());
    client_profile_pub_ = p;
  }
  return client_profile_pub_;
}
inline ::ubii::clients::Client* NotifyCondition::mutable_client_profile_pub() {
  // @@protoc_insertion_point(field_mutable:ubii.conditions.NotifyCondition.client_profile_pub)
  return _internal_mutable_client_profile_pub();
}
inline void NotifyCondition::set_allocated_client_profile_pub(::ubii::clients::Client* client_profile_pub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_profile_pub_);
  }
  if (client_profile_pub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_profile_pub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_profile_pub, submessage_arena);
    }
    
  } else {
    
  }
  client_profile_pub_ = client_profile_pub;
  // @@protoc_insertion_point(field_set_allocated:ubii.conditions.NotifyCondition.client_profile_pub)
}

// .ubii.clients.Client client_profile_sub = 5;
inline bool NotifyCondition::_internal_has_client_profile_sub() const {
  return this != internal_default_instance() && client_profile_sub_ != nullptr;
}
inline bool NotifyCondition::has_client_profile_sub() const {
  return _internal_has_client_profile_sub();
}
inline const ::ubii::clients::Client& NotifyCondition::_internal_client_profile_sub() const {
  const ::ubii::clients::Client* p = client_profile_sub_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ubii::clients::Client*>(
      &::ubii::clients::_Client_default_instance_);
}
inline const ::ubii::clients::Client& NotifyCondition::client_profile_sub() const {
  // @@protoc_insertion_point(field_get:ubii.conditions.NotifyCondition.client_profile_sub)
  return _internal_client_profile_sub();
}
inline ::ubii::clients::Client* NotifyCondition::release_client_profile_sub() {
  // @@protoc_insertion_point(field_release:ubii.conditions.NotifyCondition.client_profile_sub)
  
  ::ubii::clients::Client* temp = client_profile_sub_;
  client_profile_sub_ = nullptr;
  return temp;
}
inline ::ubii::clients::Client* NotifyCondition::_internal_mutable_client_profile_sub() {
  
  if (client_profile_sub_ == nullptr) {
    auto* p = CreateMaybeMessage<::ubii::clients::Client>(GetArenaNoVirtual());
    client_profile_sub_ = p;
  }
  return client_profile_sub_;
}
inline ::ubii::clients::Client* NotifyCondition::mutable_client_profile_sub() {
  // @@protoc_insertion_point(field_mutable:ubii.conditions.NotifyCondition.client_profile_sub)
  return _internal_mutable_client_profile_sub();
}
inline void NotifyCondition::set_allocated_client_profile_sub(::ubii::clients::Client* client_profile_sub) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(client_profile_sub_);
  }
  if (client_profile_sub) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      client_profile_sub = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, client_profile_sub, submessage_arena);
    }
    
  } else {
    
  }
  client_profile_sub_ = client_profile_sub;
  // @@protoc_insertion_point(field_set_allocated:ubii.conditions.NotifyCondition.client_profile_sub)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace conditions
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fconditions_2fnotifyCondition_2eproto
