// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/devices/device.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/devices/device.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace devices {

namespace {

const ::google::protobuf::Descriptor* Device_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Device_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* Device_DeviceType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* DeviceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fdevices_2fdevice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fdevices_2fdevice_2eproto() {
  protobuf_AddDesc_proto_2fdevices_2fdevice_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/devices/device.proto");
  GOOGLE_CHECK(file != NULL);
  Device_descriptor_ = file->message_type(0);
  static const int Device_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, components_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, client_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, tags_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, description_),
  };
  Device_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Device_descriptor_,
      Device::default_instance_,
      Device_offsets_,
      -1,
      -1,
      -1,
      sizeof(Device),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Device, _is_default_instance_));
  Device_DeviceType_descriptor_ = Device_descriptor_->enum_type(0);
  DeviceList_descriptor_ = file->message_type(1);
  static const int DeviceList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceList, elements_),
  };
  DeviceList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DeviceList_descriptor_,
      DeviceList::default_instance_,
      DeviceList_offsets_,
      -1,
      -1,
      -1,
      sizeof(DeviceList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fdevices_2fdevice_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Device_descriptor_, &Device::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DeviceList_descriptor_, &DeviceList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fdevices_2fdevice_2eproto() {
  delete Device::default_instance_;
  delete Device_reflection_;
  delete DeviceList::default_instance_;
  delete DeviceList_reflection_;
}

void protobuf_AddDesc_proto_2fdevices_2fdevice_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fdevices_2fdevice_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ubii::devices::protobuf_AddDesc_proto_2fdevices_2fcomponent_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032proto/devices/device.proto\022\014ubii.devic"
    "es\032\035proto/devices/component.proto\"\347\001\n\006De"
    "vice\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001(\t\0224\n\013device"
    "_type\030\003 \001(\0162\037.ubii.devices.Device.Device"
    "Type\022+\n\ncomponents\030\004 \003(\0132\027.ubii.devices."
    "Component\022\021\n\tclient_id\030\005 \001(\t\022\014\n\004tags\030\006 \003"
    "(\t\022\023\n\013description\030\007 \001(\t\"*\n\nDeviceType\022\017\n"
    "\013PARTICIPANT\020\000\022\013\n\007WATCHER\020\001\"4\n\nDeviceLis"
    "t\022&\n\010elements\030\001 \003(\0132\024.ubii.devices.Devic"
    "eb\006proto3", 369);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/devices/device.proto", &protobuf_RegisterTypes);
  Device::default_instance_ = new Device();
  DeviceList::default_instance_ = new DeviceList();
  Device::default_instance_->InitAsDefaultInstance();
  DeviceList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fdevices_2fdevice_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fdevices_2fdevice_2eproto {
  StaticDescriptorInitializer_proto_2fdevices_2fdevice_2eproto() {
    protobuf_AddDesc_proto_2fdevices_2fdevice_2eproto();
  }
} static_descriptor_initializer_proto_2fdevices_2fdevice_2eproto_;

// ===================================================================

const ::google::protobuf::EnumDescriptor* Device_DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_DeviceType_descriptor_;
}
bool Device_DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Device_DeviceType Device::PARTICIPANT;
const Device_DeviceType Device::WATCHER;
const Device_DeviceType Device::DeviceType_MIN;
const Device_DeviceType Device::DeviceType_MAX;
const int Device::DeviceType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Device::kIdFieldNumber;
const int Device::kNameFieldNumber;
const int Device::kDeviceTypeFieldNumber;
const int Device::kComponentsFieldNumber;
const int Device::kClientIdFieldNumber;
const int Device::kTagsFieldNumber;
const int Device::kDescriptionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Device::Device()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.devices.Device)
}

void Device::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Device::Device(const Device& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.devices.Device)
}

void Device::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
  client_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Device::~Device() {
  // @@protoc_insertion_point(destructor:ubii.devices.Device)
  SharedDtor();
}

void Device::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Device::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Device::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Device_descriptor_;
}

const Device& Device::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fdevices_2fdevice_2eproto();
  return *default_instance_;
}

Device* Device::default_instance_ = NULL;

Device* Device::New(::google::protobuf::Arena* arena) const {
  Device* n = new Device;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Device::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.devices.Device)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  device_type_ = 0;
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  components_.Clear();
  tags_.Clear();
}

bool Device::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.devices.Device)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.Device.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.Device.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_device_type;
        break;
      }

      // optional .ubii.devices.Device.DeviceType device_type = 3;
      case 3: {
        if (tag == 24) {
         parse_device_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_device_type(static_cast< ::ubii::devices::Device_DeviceType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_components;
        break;
      }

      // repeated .ubii.devices.Component components = 4;
      case 4: {
        if (tag == 34) {
         parse_components:
          DO_(input->IncrementRecursionDepth());
         parse_loop_components:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_components()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_loop_components;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(42)) goto parse_client_id;
        break;
      }

      // optional string client_id = 5;
      case 5: {
        if (tag == 42) {
         parse_client_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_client_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->client_id().data(), this->client_id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.Device.client_id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        break;
      }

      // repeated string tags = 6;
      case 6: {
        if (tag == 50) {
         parse_tags:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_tags()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->tags(this->tags_size() - 1).data(),
            this->tags(this->tags_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.Device.tags"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_tags;
        if (input->ExpectTag(58)) goto parse_description;
        break;
      }

      // optional string description = 7;
      case 7: {
        if (tag == 58) {
         parse_description:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_description()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->description().data(), this->description().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.Device.description"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.devices.Device)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.devices.Device)
  return false;
#undef DO_
}

void Device::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.devices.Device)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional .ubii.devices.Device.DeviceType device_type = 3;
  if (this->device_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->device_type(), output);
  }

  // repeated .ubii.devices.Component components = 4;
  for (unsigned int i = 0, n = this->components_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->components(i), output);
  }

  // optional string client_id = 5;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.client_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->client_id(), output);
  }

  // repeated string tags = 6;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.tags");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->tags(i), output);
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.description");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->description(), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.devices.Device)
}

::google::protobuf::uint8* Device::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.devices.Device)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional .ubii.devices.Device.DeviceType device_type = 3;
  if (this->device_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->device_type(), target);
  }

  // repeated .ubii.devices.Component components = 4;
  for (unsigned int i = 0, n = this->components_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, this->components(i), false, target);
  }

  // optional string client_id = 5;
  if (this->client_id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->client_id().data(), this->client_id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.client_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->client_id(), target);
  }

  // repeated string tags = 6;
  for (int i = 0; i < this->tags_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->tags(i).data(), this->tags(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.tags");
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(6, this->tags(i), target);
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->description().data(), this->description().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.Device.description");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->description(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.devices.Device)
  return target;
}

int Device::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.devices.Device)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional .ubii.devices.Device.DeviceType device_type = 3;
  if (this->device_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->device_type());
  }

  // optional string client_id = 5;
  if (this->client_id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->client_id());
  }

  // optional string description = 7;
  if (this->description().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->description());
  }

  // repeated .ubii.devices.Component components = 4;
  total_size += 1 * this->components_size();
  for (int i = 0; i < this->components_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->components(i));
  }

  // repeated string tags = 6;
  total_size += 1 * this->tags_size();
  for (int i = 0; i < this->tags_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->tags(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Device::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.devices.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Device* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Device>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.devices.Device)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.devices.Device)
    MergeFrom(*source);
  }
}

void Device::MergeFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.devices.Device)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  components_.MergeFrom(from.components_);
  tags_.MergeFrom(from.tags_);
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.device_type() != 0) {
    set_device_type(from.device_type());
  }
  if (from.client_id().size() > 0) {

    client_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_id_);
  }
  if (from.description().size() > 0) {

    description_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.description_);
  }
}

void Device::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.devices.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Device::CopyFrom(const Device& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.devices.Device)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Device::IsInitialized() const {

  return true;
}

void Device::Swap(Device* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Device::InternalSwap(Device* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  std::swap(device_type_, other->device_type_);
  components_.UnsafeArenaSwap(&other->components_);
  client_id_.Swap(&other->client_id_);
  tags_.UnsafeArenaSwap(&other->tags_);
  description_.Swap(&other->description_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Device::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Device_descriptor_;
  metadata.reflection = Device_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Device

// optional string id = 1;
void Device::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::id() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.id)
}
 void Device::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.id)
}
 void Device::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.id)
}
 ::std::string* Device::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_id() {
  // @@protoc_insertion_point(field_release:ubii.devices.Device.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Device.id)
}

// optional string name = 2;
void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.name)
}
 void Device::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.name)
}
 void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.name)
}
 ::std::string* Device::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:ubii.devices.Device.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Device.name)
}

// optional .ubii.devices.Device.DeviceType device_type = 3;
void Device::clear_device_type() {
  device_type_ = 0;
}
 ::ubii::devices::Device_DeviceType Device::device_type() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.device_type)
  return static_cast< ::ubii::devices::Device_DeviceType >(device_type_);
}
 void Device::set_device_type(::ubii::devices::Device_DeviceType value) {
  
  device_type_ = value;
  // @@protoc_insertion_point(field_set:ubii.devices.Device.device_type)
}

// repeated .ubii.devices.Component components = 4;
int Device::components_size() const {
  return components_.size();
}
void Device::clear_components() {
  components_.Clear();
}
const ::ubii::devices::Component& Device::components(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.components)
  return components_.Get(index);
}
::ubii::devices::Component* Device::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.components)
  return components_.Mutable(index);
}
::ubii::devices::Component* Device::add_components() {
  // @@protoc_insertion_point(field_add:ubii.devices.Device.components)
  return components_.Add();
}
::google::protobuf::RepeatedPtrField< ::ubii::devices::Component >*
Device::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.Device.components)
  return &components_;
}
const ::google::protobuf::RepeatedPtrField< ::ubii::devices::Component >&
Device::components() const {
  // @@protoc_insertion_point(field_list:ubii.devices.Device.components)
  return components_;
}

// optional string client_id = 5;
void Device::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::client_id() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.client_id)
  return client_id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_client_id(const ::std::string& value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.client_id)
}
 void Device::set_client_id(const char* value) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.client_id)
}
 void Device::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.client_id)
}
 ::std::string* Device::mutable_client_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.client_id)
  return client_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_client_id() {
  // @@protoc_insertion_point(field_release:ubii.devices.Device.client_id)
  
  return client_id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_client_id(::std::string* client_id) {
  if (client_id != NULL) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Device.client_id)
}

// repeated string tags = 6;
int Device::tags_size() const {
  return tags_.size();
}
void Device::clear_tags() {
  tags_.Clear();
}
 const ::std::string& Device::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.tags)
  return tags_.Get(index);
}
 ::std::string* Device::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.tags)
  return tags_.Mutable(index);
}
 void Device::set_tags(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.devices.Device.tags)
  tags_.Mutable(index)->assign(value);
}
 void Device::set_tags(int index, const char* value) {
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.tags)
}
 void Device::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.tags)
}
 ::std::string* Device::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.devices.Device.tags)
  return tags_.Add();
}
 void Device::add_tags(const ::std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.devices.Device.tags)
}
 void Device::add_tags(const char* value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.devices.Device.tags)
}
 void Device::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.devices.Device.tags)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
Device::tags() const {
  // @@protoc_insertion_point(field_list:ubii.devices.Device.tags)
  return tags_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
Device::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.Device.tags)
  return &tags_;
}

// optional string description = 7;
void Device::clear_description() {
  description_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Device::description() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.description)
  return description_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_description(const ::std::string& value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.description)
}
 void Device::set_description(const char* value) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.description)
}
 void Device::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.description)
}
 ::std::string* Device::mutable_description() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.description)
  return description_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Device::release_description() {
  // @@protoc_insertion_point(field_release:ubii.devices.Device.description)
  
  return description_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Device::set_allocated_description(::std::string* description) {
  if (description != NULL) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Device.description)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceList::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceList::DeviceList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.devices.DeviceList)
}

void DeviceList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

DeviceList::DeviceList(const DeviceList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.devices.DeviceList)
}

void DeviceList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

DeviceList::~DeviceList() {
  // @@protoc_insertion_point(destructor:ubii.devices.DeviceList)
  SharedDtor();
}

void DeviceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeviceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceList_descriptor_;
}

const DeviceList& DeviceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fdevices_2fdevice_2eproto();
  return *default_instance_;
}

DeviceList* DeviceList::default_instance_ = NULL;

DeviceList* DeviceList::New(::google::protobuf::Arena* arena) const {
  DeviceList* n = new DeviceList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DeviceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.devices.DeviceList)
  elements_.Clear();
}

bool DeviceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.devices.DeviceList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ubii.devices.Device elements = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_elements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.devices.DeviceList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.devices.DeviceList)
  return false;
#undef DO_
}

void DeviceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.devices.DeviceList)
  // repeated .ubii.devices.Device elements = 1;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.devices.DeviceList)
}

::google::protobuf::uint8* DeviceList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.devices.DeviceList)
  // repeated .ubii.devices.Device elements = 1;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->elements(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.devices.DeviceList)
  return target;
}

int DeviceList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.devices.DeviceList)
  int total_size = 0;

  // repeated .ubii.devices.Device elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.devices.DeviceList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DeviceList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DeviceList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.devices.DeviceList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.devices.DeviceList)
    MergeFrom(*source);
  }
}

void DeviceList::MergeFrom(const DeviceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.devices.DeviceList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  elements_.MergeFrom(from.elements_);
}

void DeviceList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.devices.DeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceList::CopyFrom(const DeviceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.devices.DeviceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceList::IsInitialized() const {

  return true;
}

void DeviceList::Swap(DeviceList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceList::InternalSwap(DeviceList* other) {
  elements_.UnsafeArenaSwap(&other->elements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata DeviceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceList_descriptor_;
  metadata.reflection = DeviceList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DeviceList

// repeated .ubii.devices.Device elements = 1;
int DeviceList::elements_size() const {
  return elements_.size();
}
void DeviceList::clear_elements() {
  elements_.Clear();
}
const ::ubii::devices::Device& DeviceList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.DeviceList.elements)
  return elements_.Get(index);
}
::ubii::devices::Device* DeviceList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.DeviceList.elements)
  return elements_.Mutable(index);
}
::ubii::devices::Device* DeviceList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.devices.DeviceList.elements)
  return elements_.Add();
}
::google::protobuf::RepeatedPtrField< ::ubii::devices::Device >*
DeviceList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.DeviceList.elements)
  return &elements_;
}
const ::google::protobuf::RepeatedPtrField< ::ubii::devices::Device >&
DeviceList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.devices.DeviceList.elements)
  return elements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace devices
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
