// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/devices/component.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fdevices_2fcomponent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fdevices_2fcomponent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2fcomponent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fdevices_2fcomponent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdevices_2fcomponent_2eproto;
namespace ubii {
namespace devices {
class Component;
class ComponentDefaultTypeInternal;
extern ComponentDefaultTypeInternal _Component_default_instance_;
}  // namespace devices
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::devices::Component* Arena::CreateMaybeMessage<::ubii::devices::Component>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace devices {

enum Component_IOType : int {
  Component_IOType_INPUT = 0,
  Component_IOType_OUTPUT = 1,
  Component_IOType_Component_IOType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Component_IOType_Component_IOType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Component_IOType_IsValid(int value);
constexpr Component_IOType Component_IOType_IOType_MIN = Component_IOType_INPUT;
constexpr Component_IOType Component_IOType_IOType_MAX = Component_IOType_OUTPUT;
constexpr int Component_IOType_IOType_ARRAYSIZE = Component_IOType_IOType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Component_IOType_descriptor();
template<typename T>
inline const std::string& Component_IOType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Component_IOType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Component_IOType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Component_IOType_descriptor(), enum_t_value);
}
inline bool Component_IOType_Parse(
    const std::string& name, Component_IOType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Component_IOType>(
    Component_IOType_descriptor(), name, value);
}
// ===================================================================

class Component :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.devices.Component) */ {
 public:
  Component();
  virtual ~Component();

  Component(const Component& from);
  Component(Component&& from) noexcept
    : Component() {
    *this = ::std::move(from);
  }

  inline Component& operator=(const Component& from) {
    CopyFrom(from);
    return *this;
  }
  inline Component& operator=(Component&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Component& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Component* internal_default_instance() {
    return reinterpret_cast<const Component*>(
               &_Component_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Component& a, Component& b) {
    a.Swap(&b);
  }
  inline void Swap(Component* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Component* New() const final {
    return CreateMaybeMessage<Component>(nullptr);
  }

  Component* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Component>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Component& from);
  void MergeFrom(const Component& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Component* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.devices.Component";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fdevices_2fcomponent_2eproto);
    return ::descriptor_table_proto_2fdevices_2fcomponent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Component_IOType IOType;
  static constexpr IOType INPUT =
    Component_IOType_INPUT;
  static constexpr IOType OUTPUT =
    Component_IOType_OUTPUT;
  static inline bool IOType_IsValid(int value) {
    return Component_IOType_IsValid(value);
  }
  static constexpr IOType IOType_MIN =
    Component_IOType_IOType_MIN;
  static constexpr IOType IOType_MAX =
    Component_IOType_IOType_MAX;
  static constexpr int IOType_ARRAYSIZE =
    Component_IOType_IOType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  IOType_descriptor() {
    return Component_IOType_descriptor();
  }
  template<typename T>
  static inline const std::string& IOType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, IOType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function IOType_Name.");
    return Component_IOType_Name(enum_t_value);
  }
  static inline bool IOType_Parse(const std::string& name,
      IOType* value) {
    return Component_IOType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTagsFieldNumber = 5,
    kTopicFieldNumber = 1,
    kMessageFormatFieldNumber = 2,
    kDeviceIdFieldNumber = 4,
    kDescriptionFieldNumber = 6,
    kIoTypeFieldNumber = 3,
  };
  // repeated string tags = 5;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string topic = 1;
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string message_format = 2;
  void clear_message_format();
  const std::string& message_format() const;
  void set_message_format(const std::string& value);
  void set_message_format(std::string&& value);
  void set_message_format(const char* value);
  void set_message_format(const char* value, size_t size);
  std::string* mutable_message_format();
  std::string* release_message_format();
  void set_allocated_message_format(std::string* message_format);
  private:
  const std::string& _internal_message_format() const;
  void _internal_set_message_format(const std::string& value);
  std::string* _internal_mutable_message_format();
  public:

  // string device_id = 4;
  void clear_device_id();
  const std::string& device_id() const;
  void set_device_id(const std::string& value);
  void set_device_id(std::string&& value);
  void set_device_id(const char* value);
  void set_device_id(const char* value, size_t size);
  std::string* mutable_device_id();
  std::string* release_device_id();
  void set_allocated_device_id(std::string* device_id);
  private:
  const std::string& _internal_device_id() const;
  void _internal_set_device_id(const std::string& value);
  std::string* _internal_mutable_device_id();
  public:

  // string description = 6;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .ubii.devices.Component.IOType io_type = 3;
  void clear_io_type();
  ::ubii::devices::Component_IOType io_type() const;
  void set_io_type(::ubii::devices::Component_IOType value);
  private:
  ::ubii::devices::Component_IOType _internal_io_type() const;
  void _internal_set_io_type(::ubii::devices::Component_IOType value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.devices.Component)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_format_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr device_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int io_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fdevices_2fcomponent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Component

// string topic = 1;
inline void Component::clear_topic() {
  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Component::topic() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Component.topic)
  return _internal_topic();
}
inline void Component::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Component.topic)
}
inline std::string* Component::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Component.topic)
  return _internal_mutable_topic();
}
inline const std::string& Component::_internal_topic() const {
  return topic_.GetNoArena();
}
inline void Component::_internal_set_topic(const std::string& value) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Component::set_topic(std::string&& value) {
  
  topic_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.devices.Component.topic)
}
inline void Component::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Component.topic)
}
inline void Component::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Component.topic)
}
inline std::string* Component::_internal_mutable_topic() {
  
  return topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Component::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.devices.Component.topic)
  
  return topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_topic(std::string* topic) {
  if (topic != nullptr) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Component.topic)
}

// string message_format = 2;
inline void Component::clear_message_format() {
  message_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Component::message_format() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Component.message_format)
  return _internal_message_format();
}
inline void Component::set_message_format(const std::string& value) {
  _internal_set_message_format(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Component.message_format)
}
inline std::string* Component::mutable_message_format() {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Component.message_format)
  return _internal_mutable_message_format();
}
inline const std::string& Component::_internal_message_format() const {
  return message_format_.GetNoArena();
}
inline void Component::_internal_set_message_format(const std::string& value) {
  
  message_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Component::set_message_format(std::string&& value) {
  
  message_format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.devices.Component.message_format)
}
inline void Component::set_message_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Component.message_format)
}
inline void Component::set_message_format(const char* value, size_t size) {
  
  message_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Component.message_format)
}
inline std::string* Component::_internal_mutable_message_format() {
  
  return message_format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Component::release_message_format() {
  // @@protoc_insertion_point(field_release:ubii.devices.Component.message_format)
  
  return message_format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_message_format(std::string* message_format) {
  if (message_format != nullptr) {
    
  } else {
    
  }
  message_format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_format);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Component.message_format)
}

// .ubii.devices.Component.IOType io_type = 3;
inline void Component::clear_io_type() {
  io_type_ = 0;
}
inline ::ubii::devices::Component_IOType Component::_internal_io_type() const {
  return static_cast< ::ubii::devices::Component_IOType >(io_type_);
}
inline ::ubii::devices::Component_IOType Component::io_type() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Component.io_type)
  return _internal_io_type();
}
inline void Component::_internal_set_io_type(::ubii::devices::Component_IOType value) {
  
  io_type_ = value;
}
inline void Component::set_io_type(::ubii::devices::Component_IOType value) {
  _internal_set_io_type(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Component.io_type)
}

// string device_id = 4;
inline void Component::clear_device_id() {
  device_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Component::device_id() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Component.device_id)
  return _internal_device_id();
}
inline void Component::set_device_id(const std::string& value) {
  _internal_set_device_id(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Component.device_id)
}
inline std::string* Component::mutable_device_id() {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Component.device_id)
  return _internal_mutable_device_id();
}
inline const std::string& Component::_internal_device_id() const {
  return device_id_.GetNoArena();
}
inline void Component::_internal_set_device_id(const std::string& value) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Component::set_device_id(std::string&& value) {
  
  device_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.devices.Component.device_id)
}
inline void Component::set_device_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Component.device_id)
}
inline void Component::set_device_id(const char* value, size_t size) {
  
  device_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Component.device_id)
}
inline std::string* Component::_internal_mutable_device_id() {
  
  return device_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Component::release_device_id() {
  // @@protoc_insertion_point(field_release:ubii.devices.Component.device_id)
  
  return device_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_device_id(std::string* device_id) {
  if (device_id != nullptr) {
    
  } else {
    
  }
  device_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), device_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Component.device_id)
}

// repeated string tags = 5;
inline int Component::_internal_tags_size() const {
  return tags_.size();
}
inline int Component::tags_size() const {
  return _internal_tags_size();
}
inline void Component::clear_tags() {
  tags_.Clear();
}
inline std::string* Component::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.devices.Component.tags)
  return _internal_add_tags();
}
inline const std::string& Component::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Component::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.Component.tags)
  return _internal_tags(index);
}
inline std::string* Component::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Component.tags)
  return tags_.Mutable(index);
}
inline void Component::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.devices.Component.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Component::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.devices.Component.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Component::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.devices.Component.tags)
}
inline void Component::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Component.tags)
}
inline std::string* Component::_internal_add_tags() {
  return tags_.Add();
}
inline void Component::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.devices.Component.tags)
}
inline void Component::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.devices.Component.tags)
}
inline void Component::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.devices.Component.tags)
}
inline void Component::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.devices.Component.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Component::tags() const {
  // @@protoc_insertion_point(field_list:ubii.devices.Component.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Component::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.Component.tags)
  return &tags_;
}

// string description = 6;
inline void Component::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Component::description() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Component.description)
  return _internal_description();
}
inline void Component::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Component.description)
}
inline std::string* Component::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Component.description)
  return _internal_mutable_description();
}
inline const std::string& Component::_internal_description() const {
  return description_.GetNoArena();
}
inline void Component::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Component::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.devices.Component.description)
}
inline void Component::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Component.description)
}
inline void Component::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Component.description)
}
inline std::string* Component::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Component::release_description() {
  // @@protoc_insertion_point(field_release:ubii.devices.Component.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Component::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Component.description)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace devices
}  // namespace ubii

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ubii::devices::Component_IOType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ubii::devices::Component_IOType>() {
  return ::ubii::devices::Component_IOType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fdevices_2fcomponent_2eproto
