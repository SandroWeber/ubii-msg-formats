// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/devices/device.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fdevices_2fdevice_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fdevices_2fdevice_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/devices/component.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2fdevice_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fdevices_2fdevice_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fdevices_2fdevice_2eproto;
namespace ubii {
namespace devices {
class Device;
class DeviceDefaultTypeInternal;
extern DeviceDefaultTypeInternal _Device_default_instance_;
class DeviceList;
class DeviceListDefaultTypeInternal;
extern DeviceListDefaultTypeInternal _DeviceList_default_instance_;
}  // namespace devices
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::devices::Device* Arena::CreateMaybeMessage<::ubii::devices::Device>(Arena*);
template<> ::ubii::devices::DeviceList* Arena::CreateMaybeMessage<::ubii::devices::DeviceList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace devices {

enum Device_DeviceType : int {
  Device_DeviceType_PARTICIPANT = 0,
  Device_DeviceType_WATCHER = 1,
  Device_DeviceType_Device_DeviceType_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  Device_DeviceType_Device_DeviceType_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool Device_DeviceType_IsValid(int value);
constexpr Device_DeviceType Device_DeviceType_DeviceType_MIN = Device_DeviceType_PARTICIPANT;
constexpr Device_DeviceType Device_DeviceType_DeviceType_MAX = Device_DeviceType_WATCHER;
constexpr int Device_DeviceType_DeviceType_ARRAYSIZE = Device_DeviceType_DeviceType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Device_DeviceType_descriptor();
template<typename T>
inline const std::string& Device_DeviceType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, Device_DeviceType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function Device_DeviceType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    Device_DeviceType_descriptor(), enum_t_value);
}
inline bool Device_DeviceType_Parse(
    const std::string& name, Device_DeviceType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<Device_DeviceType>(
    Device_DeviceType_descriptor(), name, value);
}
// ===================================================================

class Device :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.devices.Device) */ {
 public:
  Device();
  virtual ~Device();

  Device(const Device& from);
  Device(Device&& from) noexcept
    : Device() {
    *this = ::std::move(from);
  }

  inline Device& operator=(const Device& from) {
    CopyFrom(from);
    return *this;
  }
  inline Device& operator=(Device&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Device& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Device* internal_default_instance() {
    return reinterpret_cast<const Device*>(
               &_Device_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Device& a, Device& b) {
    a.Swap(&b);
  }
  inline void Swap(Device* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Device* New() const final {
    return CreateMaybeMessage<Device>(nullptr);
  }

  Device* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Device>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Device& from);
  void MergeFrom(const Device& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Device* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.devices.Device";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fdevices_2fdevice_2eproto);
    return ::descriptor_table_proto_2fdevices_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef Device_DeviceType DeviceType;
  static constexpr DeviceType PARTICIPANT =
    Device_DeviceType_PARTICIPANT;
  static constexpr DeviceType WATCHER =
    Device_DeviceType_WATCHER;
  static inline bool DeviceType_IsValid(int value) {
    return Device_DeviceType_IsValid(value);
  }
  static constexpr DeviceType DeviceType_MIN =
    Device_DeviceType_DeviceType_MIN;
  static constexpr DeviceType DeviceType_MAX =
    Device_DeviceType_DeviceType_MAX;
  static constexpr int DeviceType_ARRAYSIZE =
    Device_DeviceType_DeviceType_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  DeviceType_descriptor() {
    return Device_DeviceType_descriptor();
  }
  template<typename T>
  static inline const std::string& DeviceType_Name(T enum_t_value) {
    static_assert(::std::is_same<T, DeviceType>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function DeviceType_Name.");
    return Device_DeviceType_Name(enum_t_value);
  }
  static inline bool DeviceType_Parse(const std::string& name,
      DeviceType* value) {
    return Device_DeviceType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kComponentsFieldNumber = 4,
    kTagsFieldNumber = 6,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kClientIdFieldNumber = 5,
    kDescriptionFieldNumber = 7,
    kDeviceTypeFieldNumber = 3,
  };
  // repeated .ubii.devices.Component components = 4;
  int components_size() const;
  private:
  int _internal_components_size() const;
  public:
  void clear_components();
  ::ubii::devices::Component* mutable_components(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Component >*
      mutable_components();
  private:
  const ::ubii::devices::Component& _internal_components(int index) const;
  ::ubii::devices::Component* _internal_add_components();
  public:
  const ::ubii::devices::Component& components(int index) const;
  ::ubii::devices::Component* add_components();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Component >&
      components() const;

  // repeated string tags = 6;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string client_id = 5;
  void clear_client_id();
  const std::string& client_id() const;
  void set_client_id(const std::string& value);
  void set_client_id(std::string&& value);
  void set_client_id(const char* value);
  void set_client_id(const char* value, size_t size);
  std::string* mutable_client_id();
  std::string* release_client_id();
  void set_allocated_client_id(std::string* client_id);
  private:
  const std::string& _internal_client_id() const;
  void _internal_set_client_id(const std::string& value);
  std::string* _internal_mutable_client_id();
  public:

  // string description = 7;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // .ubii.devices.Device.DeviceType device_type = 3;
  void clear_device_type();
  ::ubii::devices::Device_DeviceType device_type() const;
  void set_device_type(::ubii::devices::Device_DeviceType value);
  private:
  ::ubii::devices::Device_DeviceType _internal_device_type() const;
  void _internal_set_device_type(::ubii::devices::Device_DeviceType value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.devices.Device)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Component > components_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr client_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  int device_type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fdevices_2fdevice_2eproto;
};
// -------------------------------------------------------------------

class DeviceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.devices.DeviceList) */ {
 public:
  DeviceList();
  virtual ~DeviceList();

  DeviceList(const DeviceList& from);
  DeviceList(DeviceList&& from) noexcept
    : DeviceList() {
    *this = ::std::move(from);
  }

  inline DeviceList& operator=(const DeviceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceList& operator=(DeviceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceList* internal_default_instance() {
    return reinterpret_cast<const DeviceList*>(
               &_DeviceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DeviceList& a, DeviceList& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceList* New() const final {
    return CreateMaybeMessage<DeviceList>(nullptr);
  }

  DeviceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceList& from);
  void MergeFrom(const DeviceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.devices.DeviceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fdevices_2fdevice_2eproto);
    return ::descriptor_table_proto_2fdevices_2fdevice_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .ubii.devices.Device elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ubii::devices::Device* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Device >*
      mutable_elements();
  private:
  const ::ubii::devices::Device& _internal_elements(int index) const;
  ::ubii::devices::Device* _internal_add_elements();
  public:
  const ::ubii::devices::Device& elements(int index) const;
  ::ubii::devices::Device* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Device >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.devices.DeviceList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Device > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fdevices_2fdevice_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Device

// string id = 1;
inline void Device::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device::id() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.id)
  return _internal_id();
}
inline void Device::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.id)
}
inline std::string* Device::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.id)
  return _internal_mutable_id();
}
inline const std::string& Device::_internal_id() const {
  return id_.GetNoArena();
}
inline void Device::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.devices.Device.id)
}
inline void Device::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.id)
}
inline void Device::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.id)
}
inline std::string* Device::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device::release_id() {
  // @@protoc_insertion_point(field_release:ubii.devices.Device.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Device.id)
}

// string name = 2;
inline void Device::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device::name() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.name)
  return _internal_name();
}
inline void Device::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.name)
}
inline std::string* Device::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.name)
  return _internal_mutable_name();
}
inline const std::string& Device::_internal_name() const {
  return name_.GetNoArena();
}
inline void Device::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.devices.Device.name)
}
inline void Device::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.name)
}
inline void Device::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.name)
}
inline std::string* Device::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device::release_name() {
  // @@protoc_insertion_point(field_release:ubii.devices.Device.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Device.name)
}

// .ubii.devices.Device.DeviceType device_type = 3;
inline void Device::clear_device_type() {
  device_type_ = 0;
}
inline ::ubii::devices::Device_DeviceType Device::_internal_device_type() const {
  return static_cast< ::ubii::devices::Device_DeviceType >(device_type_);
}
inline ::ubii::devices::Device_DeviceType Device::device_type() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.device_type)
  return _internal_device_type();
}
inline void Device::_internal_set_device_type(::ubii::devices::Device_DeviceType value) {
  
  device_type_ = value;
}
inline void Device::set_device_type(::ubii::devices::Device_DeviceType value) {
  _internal_set_device_type(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.device_type)
}

// repeated .ubii.devices.Component components = 4;
inline int Device::_internal_components_size() const {
  return components_.size();
}
inline int Device::components_size() const {
  return _internal_components_size();
}
inline ::ubii::devices::Component* Device::mutable_components(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.components)
  return components_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Component >*
Device::mutable_components() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.Device.components)
  return &components_;
}
inline const ::ubii::devices::Component& Device::_internal_components(int index) const {
  return components_.Get(index);
}
inline const ::ubii::devices::Component& Device::components(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.components)
  return _internal_components(index);
}
inline ::ubii::devices::Component* Device::_internal_add_components() {
  return components_.Add();
}
inline ::ubii::devices::Component* Device::add_components() {
  // @@protoc_insertion_point(field_add:ubii.devices.Device.components)
  return _internal_add_components();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Component >&
Device::components() const {
  // @@protoc_insertion_point(field_list:ubii.devices.Device.components)
  return components_;
}

// string client_id = 5;
inline void Device::clear_client_id() {
  client_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device::client_id() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.client_id)
  return _internal_client_id();
}
inline void Device::set_client_id(const std::string& value) {
  _internal_set_client_id(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.client_id)
}
inline std::string* Device::mutable_client_id() {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.client_id)
  return _internal_mutable_client_id();
}
inline const std::string& Device::_internal_client_id() const {
  return client_id_.GetNoArena();
}
inline void Device::_internal_set_client_id(const std::string& value) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device::set_client_id(std::string&& value) {
  
  client_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.devices.Device.client_id)
}
inline void Device::set_client_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.client_id)
}
inline void Device::set_client_id(const char* value, size_t size) {
  
  client_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.client_id)
}
inline std::string* Device::_internal_mutable_client_id() {
  
  return client_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device::release_client_id() {
  // @@protoc_insertion_point(field_release:ubii.devices.Device.client_id)
  
  return client_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_client_id(std::string* client_id) {
  if (client_id != nullptr) {
    
  } else {
    
  }
  client_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), client_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Device.client_id)
}

// repeated string tags = 6;
inline int Device::_internal_tags_size() const {
  return tags_.size();
}
inline int Device::tags_size() const {
  return _internal_tags_size();
}
inline void Device::clear_tags() {
  tags_.Clear();
}
inline std::string* Device::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.devices.Device.tags)
  return _internal_add_tags();
}
inline const std::string& Device::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& Device::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.tags)
  return _internal_tags(index);
}
inline std::string* Device::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.tags)
  return tags_.Mutable(index);
}
inline void Device::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.devices.Device.tags)
  tags_.Mutable(index)->assign(value);
}
inline void Device::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.devices.Device.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void Device::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.tags)
}
inline void Device::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.tags)
}
inline std::string* Device::_internal_add_tags() {
  return tags_.Add();
}
inline void Device::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.devices.Device.tags)
}
inline void Device::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.devices.Device.tags)
}
inline void Device::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.devices.Device.tags)
}
inline void Device::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.devices.Device.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
Device::tags() const {
  // @@protoc_insertion_point(field_list:ubii.devices.Device.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
Device::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.Device.tags)
  return &tags_;
}

// string description = 7;
inline void Device::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& Device::description() const {
  // @@protoc_insertion_point(field_get:ubii.devices.Device.description)
  return _internal_description();
}
inline void Device::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ubii.devices.Device.description)
}
inline std::string* Device::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ubii.devices.Device.description)
  return _internal_mutable_description();
}
inline const std::string& Device::_internal_description() const {
  return description_.GetNoArena();
}
inline void Device::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void Device::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.devices.Device.description)
}
inline void Device::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.Device.description)
}
inline void Device::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.Device.description)
}
inline std::string* Device::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* Device::release_description() {
  // @@protoc_insertion_point(field_release:ubii.devices.Device.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void Device::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.Device.description)
}

// -------------------------------------------------------------------

// DeviceList

// repeated .ubii.devices.Device elements = 1;
inline int DeviceList::_internal_elements_size() const {
  return elements_.size();
}
inline int DeviceList::elements_size() const {
  return _internal_elements_size();
}
inline void DeviceList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::devices::Device* DeviceList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.DeviceList.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Device >*
DeviceList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.DeviceList.elements)
  return &elements_;
}
inline const ::ubii::devices::Device& DeviceList::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::ubii::devices::Device& DeviceList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.DeviceList.elements)
  return _internal_elements(index);
}
inline ::ubii::devices::Device* DeviceList::_internal_add_elements() {
  return elements_.Add();
}
inline ::ubii::devices::Device* DeviceList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.devices.DeviceList.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::devices::Device >&
DeviceList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.devices.DeviceList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace devices
}  // namespace ubii

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ubii::devices::Device_DeviceType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ubii::devices::Device_DeviceType>() {
  return ::ubii::devices::Device_DeviceType_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fdevices_2fdevice_2eproto
