// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/devices/topicDemux.proto

#ifndef PROTOBUF_proto_2fdevices_2ftopicDemux_2eproto__INCLUDED
#define PROTOBUF_proto_2fdevices_2ftopicDemux_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace devices {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fdevices_2ftopicDemux_2eproto();
void protobuf_AssignDesc_proto_2fdevices_2ftopicDemux_2eproto();
void protobuf_ShutdownFile_proto_2fdevices_2ftopicDemux_2eproto();

class TopicDemux;
class TopicDemuxList;

// ===================================================================

class TopicDemux : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.devices.TopicDemux) */ {
 public:
  TopicDemux();
  virtual ~TopicDemux();

  TopicDemux(const TopicDemux& from);

  inline TopicDemux& operator=(const TopicDemux& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicDemux& default_instance();

  void Swap(TopicDemux* other);

  // implements Message ----------------------------------------------

  inline TopicDemux* New() const { return New(NULL); }

  TopicDemux* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicDemux& from);
  void MergeFrom(const TopicDemux& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicDemux* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // optional string name = 2;
  void clear_name();
  static const int kNameFieldNumber = 2;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // optional string data_type = 3;
  void clear_data_type();
  static const int kDataTypeFieldNumber = 3;
  const ::std::string& data_type() const;
  void set_data_type(const ::std::string& value);
  void set_data_type(const char* value);
  void set_data_type(const char* value, size_t size);
  ::std::string* mutable_data_type();
  ::std::string* release_data_type();
  void set_allocated_data_type(::std::string* data_type);

  // optional string output_topic_format = 4;
  void clear_output_topic_format();
  static const int kOutputTopicFormatFieldNumber = 4;
  const ::std::string& output_topic_format() const;
  void set_output_topic_format(const ::std::string& value);
  void set_output_topic_format(const char* value);
  void set_output_topic_format(const char* value, size_t size);
  ::std::string* mutable_output_topic_format();
  ::std::string* release_output_topic_format();
  void set_allocated_output_topic_format(::std::string* output_topic_format);

  // @@protoc_insertion_point(class_scope:ubii.devices.TopicDemux)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_type_;
  ::google::protobuf::internal::ArenaStringPtr output_topic_format_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fdevices_2ftopicDemux_2eproto();
  friend void protobuf_AssignDesc_proto_2fdevices_2ftopicDemux_2eproto();
  friend void protobuf_ShutdownFile_proto_2fdevices_2ftopicDemux_2eproto();

  void InitAsDefaultInstance();
  static TopicDemux* default_instance_;
};
// -------------------------------------------------------------------

class TopicDemuxList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.devices.TopicDemuxList) */ {
 public:
  TopicDemuxList();
  virtual ~TopicDemuxList();

  TopicDemuxList(const TopicDemuxList& from);

  inline TopicDemuxList& operator=(const TopicDemuxList& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicDemuxList& default_instance();

  void Swap(TopicDemuxList* other);

  // implements Message ----------------------------------------------

  inline TopicDemuxList* New() const { return New(NULL); }

  TopicDemuxList* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicDemuxList& from);
  void MergeFrom(const TopicDemuxList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicDemuxList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.devices.TopicDemux elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  const ::ubii::devices::TopicDemux& elements(int index) const;
  ::ubii::devices::TopicDemux* mutable_elements(int index);
  ::ubii::devices::TopicDemux* add_elements();
  ::google::protobuf::RepeatedPtrField< ::ubii::devices::TopicDemux >*
      mutable_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::devices::TopicDemux >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.devices.TopicDemuxList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::ubii::devices::TopicDemux > elements_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fdevices_2ftopicDemux_2eproto();
  friend void protobuf_AssignDesc_proto_2fdevices_2ftopicDemux_2eproto();
  friend void protobuf_ShutdownFile_proto_2fdevices_2ftopicDemux_2eproto();

  void InitAsDefaultInstance();
  static TopicDemuxList* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicDemux

// optional string id = 1;
inline void TopicDemux::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicDemux::id() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicDemux.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDemux::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicDemux.id)
}
inline void TopicDemux::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicDemux.id)
}
inline void TopicDemux::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicDemux.id)
}
inline ::std::string* TopicDemux::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicDemux.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicDemux::release_id() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicDemux.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDemux::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicDemux.id)
}

// optional string name = 2;
inline void TopicDemux::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicDemux::name() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicDemux.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDemux::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicDemux.name)
}
inline void TopicDemux::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicDemux.name)
}
inline void TopicDemux::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicDemux.name)
}
inline ::std::string* TopicDemux::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicDemux.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicDemux::release_name() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicDemux.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDemux::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicDemux.name)
}

// optional string data_type = 3;
inline void TopicDemux::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicDemux::data_type() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicDemux.data_type)
  return data_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDemux::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicDemux.data_type)
}
inline void TopicDemux::set_data_type(const char* value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicDemux.data_type)
}
inline void TopicDemux::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicDemux.data_type)
}
inline ::std::string* TopicDemux::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicDemux.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicDemux::release_data_type() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicDemux.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDemux::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicDemux.data_type)
}

// optional string output_topic_format = 4;
inline void TopicDemux::clear_output_topic_format() {
  output_topic_format_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicDemux::output_topic_format() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicDemux.output_topic_format)
  return output_topic_format_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDemux::set_output_topic_format(const ::std::string& value) {
  
  output_topic_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicDemux.output_topic_format)
}
inline void TopicDemux::set_output_topic_format(const char* value) {
  
  output_topic_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicDemux.output_topic_format)
}
inline void TopicDemux::set_output_topic_format(const char* value, size_t size) {
  
  output_topic_format_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicDemux.output_topic_format)
}
inline ::std::string* TopicDemux::mutable_output_topic_format() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicDemux.output_topic_format)
  return output_topic_format_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicDemux::release_output_topic_format() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicDemux.output_topic_format)
  
  return output_topic_format_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDemux::set_allocated_output_topic_format(::std::string* output_topic_format) {
  if (output_topic_format != NULL) {
    
  } else {
    
  }
  output_topic_format_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), output_topic_format);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicDemux.output_topic_format)
}

// -------------------------------------------------------------------

// TopicDemuxList

// repeated .ubii.devices.TopicDemux elements = 1;
inline int TopicDemuxList::elements_size() const {
  return elements_.size();
}
inline void TopicDemuxList::clear_elements() {
  elements_.Clear();
}
inline const ::ubii::devices::TopicDemux& TopicDemuxList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicDemuxList.elements)
  return elements_.Get(index);
}
inline ::ubii::devices::TopicDemux* TopicDemuxList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicDemuxList.elements)
  return elements_.Mutable(index);
}
inline ::ubii::devices::TopicDemux* TopicDemuxList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.devices.TopicDemuxList.elements)
  return elements_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::devices::TopicDemux >*
TopicDemuxList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.TopicDemuxList.elements)
  return &elements_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::devices::TopicDemux >&
TopicDemuxList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.devices.TopicDemuxList.elements)
  return elements_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace devices
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fdevices_2ftopicDemux_2eproto__INCLUDED
