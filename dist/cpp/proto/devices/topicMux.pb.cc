// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/devices/topicMux.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/devices/topicMux.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace devices {

namespace {

const ::google::protobuf::Descriptor* TopicMux_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMux_reflection_ = NULL;
const ::google::protobuf::Descriptor* TopicMuxList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicMuxList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fdevices_2ftopicMux_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2fdevices_2ftopicMux_2eproto() {
  protobuf_AddDesc_proto_2fdevices_2ftopicMux_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/devices/topicMux.proto");
  GOOGLE_CHECK(file != NULL);
  TopicMux_descriptor_ = file->message_type(0);
  static const int TopicMux_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMux, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMux, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMux, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMux, topic_selector_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMux, identity_match_pattern_),
  };
  TopicMux_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicMux_descriptor_,
      TopicMux::default_instance_,
      TopicMux_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopicMux),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMux, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMux, _is_default_instance_));
  TopicMuxList_descriptor_ = file->message_type(1);
  static const int TopicMuxList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMuxList, elements_),
  };
  TopicMuxList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicMuxList_descriptor_,
      TopicMuxList::default_instance_,
      TopicMuxList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopicMuxList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMuxList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicMuxList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fdevices_2ftopicMux_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicMux_descriptor_, &TopicMux::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicMuxList_descriptor_, &TopicMuxList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fdevices_2ftopicMux_2eproto() {
  delete TopicMux::default_instance_;
  delete TopicMux_reflection_;
  delete TopicMuxList::default_instance_;
  delete TopicMuxList_reflection_;
}

void protobuf_AddDesc_proto_2fdevices_2ftopicMux_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2fdevices_2ftopicMux_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034proto/devices/topicMux.proto\022\014ubii.dev"
    "ices\"o\n\010TopicMux\022\n\n\002id\030\001 \001(\t\022\014\n\004name\030\002 \001"
    "(\t\022\021\n\tdata_type\030\003 \001(\t\022\026\n\016topic_selector\030"
    "\004 \001(\t\022\036\n\026identity_match_pattern\030\005 \001(\t\"8\n"
    "\014TopicMuxList\022(\n\010elements\030\001 \003(\0132\026.ubii.d"
    "evices.TopicMuxb\006proto3", 223);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/devices/topicMux.proto", &protobuf_RegisterTypes);
  TopicMux::default_instance_ = new TopicMux();
  TopicMuxList::default_instance_ = new TopicMuxList();
  TopicMux::default_instance_->InitAsDefaultInstance();
  TopicMuxList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fdevices_2ftopicMux_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fdevices_2ftopicMux_2eproto {
  StaticDescriptorInitializer_proto_2fdevices_2ftopicMux_2eproto() {
    protobuf_AddDesc_proto_2fdevices_2ftopicMux_2eproto();
  }
} static_descriptor_initializer_proto_2fdevices_2ftopicMux_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicMux::kIdFieldNumber;
const int TopicMux::kNameFieldNumber;
const int TopicMux::kDataTypeFieldNumber;
const int TopicMux::kTopicSelectorFieldNumber;
const int TopicMux::kIdentityMatchPatternFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicMux::TopicMux()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.devices.TopicMux)
}

void TopicMux::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TopicMux::TopicMux(const TopicMux& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.devices.TopicMux)
}

void TopicMux::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_selector_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_match_pattern_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

TopicMux::~TopicMux() {
  // @@protoc_insertion_point(destructor:ubii.devices.TopicMux)
  SharedDtor();
}

void TopicMux::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_selector_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_match_pattern_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TopicMux::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMux::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMux_descriptor_;
}

const TopicMux& TopicMux::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fdevices_2ftopicMux_2eproto();
  return *default_instance_;
}

TopicMux* TopicMux::default_instance_ = NULL;

TopicMux* TopicMux::New(::google::protobuf::Arena* arena) const {
  TopicMux* n = new TopicMux;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicMux::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.devices.TopicMux)
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  topic_selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  identity_match_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool TopicMux::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.devices.TopicMux)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.TopicMux.id"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (tag == 18) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.TopicMux.name"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_data_type;
        break;
      }

      // optional string data_type = 3;
      case 3: {
        if (tag == 26) {
         parse_data_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data_type().data(), this->data_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.TopicMux.data_type"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_topic_selector;
        break;
      }

      // optional string topic_selector = 4;
      case 4: {
        if (tag == 34) {
         parse_topic_selector:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic_selector()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic_selector().data(), this->topic_selector().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.TopicMux.topic_selector"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_identity_match_pattern;
        break;
      }

      // optional string identity_match_pattern = 5;
      case 5: {
        if (tag == 42) {
         parse_identity_match_pattern:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_identity_match_pattern()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->identity_match_pattern().data(), this->identity_match_pattern().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.devices.TopicMux.identity_match_pattern"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.devices.TopicMux)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.devices.TopicMux)
  return false;
#undef DO_
}

void TopicMux::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.devices.TopicMux)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // optional string data_type = 3;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), this->data_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.data_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->data_type(), output);
  }

  // optional string topic_selector = 4;
  if (this->topic_selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_selector().data(), this->topic_selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.topic_selector");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->topic_selector(), output);
  }

  // optional string identity_match_pattern = 5;
  if (this->identity_match_pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identity_match_pattern().data(), this->identity_match_pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.identity_match_pattern");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->identity_match_pattern(), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.devices.TopicMux)
}

::google::protobuf::uint8* TopicMux::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.devices.TopicMux)
  // optional string id = 1;
  if (this->id().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional string data_type = 3;
  if (this->data_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data_type().data(), this->data_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.data_type");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->data_type(), target);
  }

  // optional string topic_selector = 4;
  if (this->topic_selector().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic_selector().data(), this->topic_selector().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.topic_selector");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->topic_selector(), target);
  }

  // optional string identity_match_pattern = 5;
  if (this->identity_match_pattern().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->identity_match_pattern().data(), this->identity_match_pattern().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.devices.TopicMux.identity_match_pattern");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->identity_match_pattern(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.devices.TopicMux)
  return target;
}

int TopicMux::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.devices.TopicMux)
  int total_size = 0;

  // optional string id = 1;
  if (this->id().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  // optional string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // optional string data_type = 3;
  if (this->data_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data_type());
  }

  // optional string topic_selector = 4;
  if (this->topic_selector().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic_selector());
  }

  // optional string identity_match_pattern = 5;
  if (this->identity_match_pattern().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->identity_match_pattern());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMux::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.devices.TopicMux)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicMux* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicMux>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.devices.TopicMux)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.devices.TopicMux)
    MergeFrom(*source);
  }
}

void TopicMux::MergeFrom(const TopicMux& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.devices.TopicMux)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.id().size() > 0) {

    id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.data_type().size() > 0) {

    data_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_type_);
  }
  if (from.topic_selector().size() > 0) {

    topic_selector_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_selector_);
  }
  if (from.identity_match_pattern().size() > 0) {

    identity_match_pattern_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.identity_match_pattern_);
  }
}

void TopicMux::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.devices.TopicMux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMux::CopyFrom(const TopicMux& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.devices.TopicMux)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicMux::IsInitialized() const {

  return true;
}

void TopicMux::Swap(TopicMux* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicMux::InternalSwap(TopicMux* other) {
  id_.Swap(&other->id_);
  name_.Swap(&other->name_);
  data_type_.Swap(&other->data_type_);
  topic_selector_.Swap(&other->topic_selector_);
  identity_match_pattern_.Swap(&other->identity_match_pattern_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicMux::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMux_descriptor_;
  metadata.reflection = TopicMux_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicMux

// optional string id = 1;
void TopicMux::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TopicMux::id() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicMux.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicMux.id)
}
 void TopicMux::set_id(const char* value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicMux.id)
}
 void TopicMux::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicMux.id)
}
 ::std::string* TopicMux::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicMux.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicMux::release_id() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicMux.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicMux.id)
}

// optional string name = 2;
void TopicMux::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TopicMux::name() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicMux.name)
  return name_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicMux.name)
}
 void TopicMux::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicMux.name)
}
 void TopicMux::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicMux.name)
}
 ::std::string* TopicMux::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicMux.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicMux::release_name() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicMux.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicMux.name)
}

// optional string data_type = 3;
void TopicMux::clear_data_type() {
  data_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TopicMux::data_type() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicMux.data_type)
  return data_type_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_data_type(const ::std::string& value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicMux.data_type)
}
 void TopicMux::set_data_type(const char* value) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicMux.data_type)
}
 void TopicMux::set_data_type(const char* value, size_t size) {
  
  data_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicMux.data_type)
}
 ::std::string* TopicMux::mutable_data_type() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicMux.data_type)
  return data_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicMux::release_data_type() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicMux.data_type)
  
  return data_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_allocated_data_type(::std::string* data_type) {
  if (data_type != NULL) {
    
  } else {
    
  }
  data_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data_type);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicMux.data_type)
}

// optional string topic_selector = 4;
void TopicMux::clear_topic_selector() {
  topic_selector_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TopicMux::topic_selector() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicMux.topic_selector)
  return topic_selector_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_topic_selector(const ::std::string& value) {
  
  topic_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicMux.topic_selector)
}
 void TopicMux::set_topic_selector(const char* value) {
  
  topic_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicMux.topic_selector)
}
 void TopicMux::set_topic_selector(const char* value, size_t size) {
  
  topic_selector_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicMux.topic_selector)
}
 ::std::string* TopicMux::mutable_topic_selector() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicMux.topic_selector)
  return topic_selector_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicMux::release_topic_selector() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicMux.topic_selector)
  
  return topic_selector_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_allocated_topic_selector(::std::string* topic_selector) {
  if (topic_selector != NULL) {
    
  } else {
    
  }
  topic_selector_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic_selector);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicMux.topic_selector)
}

// optional string identity_match_pattern = 5;
void TopicMux::clear_identity_match_pattern() {
  identity_match_pattern_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TopicMux::identity_match_pattern() const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicMux.identity_match_pattern)
  return identity_match_pattern_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_identity_match_pattern(const ::std::string& value) {
  
  identity_match_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.devices.TopicMux.identity_match_pattern)
}
 void TopicMux::set_identity_match_pattern(const char* value) {
  
  identity_match_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.devices.TopicMux.identity_match_pattern)
}
 void TopicMux::set_identity_match_pattern(const char* value, size_t size) {
  
  identity_match_pattern_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.devices.TopicMux.identity_match_pattern)
}
 ::std::string* TopicMux::mutable_identity_match_pattern() {
  
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicMux.identity_match_pattern)
  return identity_match_pattern_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicMux::release_identity_match_pattern() {
  // @@protoc_insertion_point(field_release:ubii.devices.TopicMux.identity_match_pattern)
  
  return identity_match_pattern_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicMux::set_allocated_identity_match_pattern(::std::string* identity_match_pattern) {
  if (identity_match_pattern != NULL) {
    
  } else {
    
  }
  identity_match_pattern_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), identity_match_pattern);
  // @@protoc_insertion_point(field_set_allocated:ubii.devices.TopicMux.identity_match_pattern)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicMuxList::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicMuxList::TopicMuxList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.devices.TopicMuxList)
}

void TopicMuxList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TopicMuxList::TopicMuxList(const TopicMuxList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.devices.TopicMuxList)
}

void TopicMuxList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TopicMuxList::~TopicMuxList() {
  // @@protoc_insertion_point(destructor:ubii.devices.TopicMuxList)
  SharedDtor();
}

void TopicMuxList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicMuxList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicMuxList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicMuxList_descriptor_;
}

const TopicMuxList& TopicMuxList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fdevices_2ftopicMux_2eproto();
  return *default_instance_;
}

TopicMuxList* TopicMuxList::default_instance_ = NULL;

TopicMuxList* TopicMuxList::New(::google::protobuf::Arena* arena) const {
  TopicMuxList* n = new TopicMuxList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicMuxList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.devices.TopicMuxList)
  elements_.Clear();
}

bool TopicMuxList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.devices.TopicMuxList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ubii.devices.TopicMux elements = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_elements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.devices.TopicMuxList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.devices.TopicMuxList)
  return false;
#undef DO_
}

void TopicMuxList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.devices.TopicMuxList)
  // repeated .ubii.devices.TopicMux elements = 1;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.devices.TopicMuxList)
}

::google::protobuf::uint8* TopicMuxList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.devices.TopicMuxList)
  // repeated .ubii.devices.TopicMux elements = 1;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->elements(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.devices.TopicMuxList)
  return target;
}

int TopicMuxList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.devices.TopicMuxList)
  int total_size = 0;

  // repeated .ubii.devices.TopicMux elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicMuxList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.devices.TopicMuxList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicMuxList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicMuxList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.devices.TopicMuxList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.devices.TopicMuxList)
    MergeFrom(*source);
  }
}

void TopicMuxList::MergeFrom(const TopicMuxList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.devices.TopicMuxList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  elements_.MergeFrom(from.elements_);
}

void TopicMuxList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.devices.TopicMuxList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicMuxList::CopyFrom(const TopicMuxList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.devices.TopicMuxList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicMuxList::IsInitialized() const {

  return true;
}

void TopicMuxList::Swap(TopicMuxList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicMuxList::InternalSwap(TopicMuxList* other) {
  elements_.UnsafeArenaSwap(&other->elements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicMuxList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicMuxList_descriptor_;
  metadata.reflection = TopicMuxList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicMuxList

// repeated .ubii.devices.TopicMux elements = 1;
int TopicMuxList::elements_size() const {
  return elements_.size();
}
void TopicMuxList::clear_elements() {
  elements_.Clear();
}
const ::ubii::devices::TopicMux& TopicMuxList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.devices.TopicMuxList.elements)
  return elements_.Get(index);
}
::ubii::devices::TopicMux* TopicMuxList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.devices.TopicMuxList.elements)
  return elements_.Mutable(index);
}
::ubii::devices::TopicMux* TopicMuxList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.devices.TopicMuxList.elements)
  return elements_.Add();
}
::google::protobuf::RepeatedPtrField< ::ubii::devices::TopicMux >*
TopicMuxList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.devices.TopicMuxList.elements)
  return &elements_;
}
const ::google::protobuf::RepeatedPtrField< ::ubii::devices::TopicMux >&
TopicMuxList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.devices.TopicMuxList.elements)
  return elements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace devices
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
