// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/topicDataRecord.proto

#ifndef PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto
#define PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/timestamp.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/vector2.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/vector3.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/vector4.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/quaternion.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/matrix3x2.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/matrix4x4.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/color.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/touchEvent.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/keyEvent.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/mouseEvent.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto 

namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto
namespace ubii {
namespace topicData {
class TopicDataRecord;
class TopicDataRecordDefaultTypeInternal;
extern TopicDataRecordDefaultTypeInternal _TopicDataRecord_default_instance_;
class TopicDataRecordList;
class TopicDataRecordListDefaultTypeInternal;
extern TopicDataRecordListDefaultTypeInternal _TopicDataRecordList_default_instance_;
}  // namespace topicData
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::topicData::TopicDataRecord* Arena::CreateMaybeMessage<::ubii::topicData::TopicDataRecord>(Arena*);
template<> ::ubii::topicData::TopicDataRecordList* Arena::CreateMaybeMessage<::ubii::topicData::TopicDataRecordList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace topicData {

// ===================================================================

class TopicDataRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicDataRecord) */ {
 public:
  TopicDataRecord();
  virtual ~TopicDataRecord();

  TopicDataRecord(const TopicDataRecord& from);

  inline TopicDataRecord& operator=(const TopicDataRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicDataRecord(TopicDataRecord&& from) noexcept
    : TopicDataRecord() {
    *this = ::std::move(from);
  }

  inline TopicDataRecord& operator=(TopicDataRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicDataRecord& default_instance();

  enum TypeCase {
    kNumber = 3,
    kBoolean = 4,
    kString = 5,
    kVector2 = 6,
    kVector3 = 7,
    kVector4 = 8,
    kQuaternion = 9,
    kMatrix3X2 = 10,
    kMatrix4X4 = 11,
    kColor = 12,
    kTouchEvent = 13,
    kKeyEvent = 14,
    kMouseEvent = 15,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicDataRecord* internal_default_instance() {
    return reinterpret_cast<const TopicDataRecord*>(
               &_TopicDataRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TopicDataRecord* other);
  friend void swap(TopicDataRecord& a, TopicDataRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicDataRecord* New() const final {
    return CreateMaybeMessage<TopicDataRecord>(NULL);
  }

  TopicDataRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicDataRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicDataRecord& from);
  void MergeFrom(const TopicDataRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicDataRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .ubii.topicData.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::ubii::topicData::Timestamp& _internal_timestamp() const;
  public:
  const ::ubii::topicData::Timestamp& timestamp() const;
  ::ubii::topicData::Timestamp* release_timestamp();
  ::ubii::topicData::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::ubii::topicData::Timestamp* timestamp);

  // double number = 3;
  private:
  bool has_number() const;
  public:
  void clear_number();
  static const int kNumberFieldNumber = 3;
  double number() const;
  void set_number(double value);

  // bool boolean = 4;
  private:
  bool has_boolean() const;
  public:
  void clear_boolean();
  static const int kBooleanFieldNumber = 4;
  bool boolean() const;
  void set_boolean(bool value);

  // string string = 5;
  private:
  bool has_string() const;
  public:
  void clear_string();
  static const int kStringFieldNumber = 5;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  #if LANG_CXX11
  void set_string(::std::string&& value);
  #endif
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // .ubii.dataStructure.Vector2 vector2 = 6;
  bool has_vector2() const;
  void clear_vector2();
  static const int kVector2FieldNumber = 6;
  private:
  const ::ubii::dataStructure::Vector2& _internal_vector2() const;
  public:
  const ::ubii::dataStructure::Vector2& vector2() const;
  ::ubii::dataStructure::Vector2* release_vector2();
  ::ubii::dataStructure::Vector2* mutable_vector2();
  void set_allocated_vector2(::ubii::dataStructure::Vector2* vector2);

  // .ubii.dataStructure.Vector3 vector3 = 7;
  bool has_vector3() const;
  void clear_vector3();
  static const int kVector3FieldNumber = 7;
  private:
  const ::ubii::dataStructure::Vector3& _internal_vector3() const;
  public:
  const ::ubii::dataStructure::Vector3& vector3() const;
  ::ubii::dataStructure::Vector3* release_vector3();
  ::ubii::dataStructure::Vector3* mutable_vector3();
  void set_allocated_vector3(::ubii::dataStructure::Vector3* vector3);

  // .ubii.dataStructure.Vector4 vector4 = 8;
  bool has_vector4() const;
  void clear_vector4();
  static const int kVector4FieldNumber = 8;
  private:
  const ::ubii::dataStructure::Vector4& _internal_vector4() const;
  public:
  const ::ubii::dataStructure::Vector4& vector4() const;
  ::ubii::dataStructure::Vector4* release_vector4();
  ::ubii::dataStructure::Vector4* mutable_vector4();
  void set_allocated_vector4(::ubii::dataStructure::Vector4* vector4);

  // .ubii.dataStructure.Quaternion quaternion = 9;
  bool has_quaternion() const;
  void clear_quaternion();
  static const int kQuaternionFieldNumber = 9;
  private:
  const ::ubii::dataStructure::Quaternion& _internal_quaternion() const;
  public:
  const ::ubii::dataStructure::Quaternion& quaternion() const;
  ::ubii::dataStructure::Quaternion* release_quaternion();
  ::ubii::dataStructure::Quaternion* mutable_quaternion();
  void set_allocated_quaternion(::ubii::dataStructure::Quaternion* quaternion);

  // .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
  bool has_matrix3x2() const;
  void clear_matrix3x2();
  static const int kMatrix3X2FieldNumber = 10;
  private:
  const ::ubii::dataStructure::Matrix3x2& _internal_matrix3x2() const;
  public:
  const ::ubii::dataStructure::Matrix3x2& matrix3x2() const;
  ::ubii::dataStructure::Matrix3x2* release_matrix3x2();
  ::ubii::dataStructure::Matrix3x2* mutable_matrix3x2();
  void set_allocated_matrix3x2(::ubii::dataStructure::Matrix3x2* matrix3x2);

  // .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
  bool has_matrix4x4() const;
  void clear_matrix4x4();
  static const int kMatrix4X4FieldNumber = 11;
  private:
  const ::ubii::dataStructure::Matrix4x4& _internal_matrix4x4() const;
  public:
  const ::ubii::dataStructure::Matrix4x4& matrix4x4() const;
  ::ubii::dataStructure::Matrix4x4* release_matrix4x4();
  ::ubii::dataStructure::Matrix4x4* mutable_matrix4x4();
  void set_allocated_matrix4x4(::ubii::dataStructure::Matrix4x4* matrix4x4);

  // .ubii.dataStructure.Color color = 12;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 12;
  private:
  const ::ubii::dataStructure::Color& _internal_color() const;
  public:
  const ::ubii::dataStructure::Color& color() const;
  ::ubii::dataStructure::Color* release_color();
  ::ubii::dataStructure::Color* mutable_color();
  void set_allocated_color(::ubii::dataStructure::Color* color);

  // .ubii.dataStructure.TouchEvent touchEvent = 13;
  bool has_touchevent() const;
  void clear_touchevent();
  static const int kTouchEventFieldNumber = 13;
  private:
  const ::ubii::dataStructure::TouchEvent& _internal_touchevent() const;
  public:
  const ::ubii::dataStructure::TouchEvent& touchevent() const;
  ::ubii::dataStructure::TouchEvent* release_touchevent();
  ::ubii::dataStructure::TouchEvent* mutable_touchevent();
  void set_allocated_touchevent(::ubii::dataStructure::TouchEvent* touchevent);

  // .ubii.dataStructure.KeyEvent keyEvent = 14;
  bool has_keyevent() const;
  void clear_keyevent();
  static const int kKeyEventFieldNumber = 14;
  private:
  const ::ubii::dataStructure::KeyEvent& _internal_keyevent() const;
  public:
  const ::ubii::dataStructure::KeyEvent& keyevent() const;
  ::ubii::dataStructure::KeyEvent* release_keyevent();
  ::ubii::dataStructure::KeyEvent* mutable_keyevent();
  void set_allocated_keyevent(::ubii::dataStructure::KeyEvent* keyevent);

  // .ubii.dataStructure.MouseEvent mouseEvent = 15;
  bool has_mouseevent() const;
  void clear_mouseevent();
  static const int kMouseEventFieldNumber = 15;
  private:
  const ::ubii::dataStructure::MouseEvent& _internal_mouseevent() const;
  public:
  const ::ubii::dataStructure::MouseEvent& mouseevent() const;
  ::ubii::dataStructure::MouseEvent* release_mouseevent();
  ::ubii::dataStructure::MouseEvent* mutable_mouseevent();
  void set_allocated_mouseevent(::ubii::dataStructure::MouseEvent* mouseevent);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicDataRecord)
 private:
  void set_has_number();
  void set_has_boolean();
  void set_has_string();
  void set_has_vector2();
  void set_has_vector3();
  void set_has_vector4();
  void set_has_quaternion();
  void set_has_matrix3x2();
  void set_has_matrix4x4();
  void set_has_color();
  void set_has_touchevent();
  void set_has_keyevent();
  void set_has_mouseevent();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::ubii::topicData::Timestamp* timestamp_;
  union TypeUnion {
    TypeUnion() {}
    double number_;
    bool boolean_;
    ::google::protobuf::internal::ArenaStringPtr string_;
    ::ubii::dataStructure::Vector2* vector2_;
    ::ubii::dataStructure::Vector3* vector3_;
    ::ubii::dataStructure::Vector4* vector4_;
    ::ubii::dataStructure::Quaternion* quaternion_;
    ::ubii::dataStructure::Matrix3x2* matrix3x2_;
    ::ubii::dataStructure::Matrix4x4* matrix4x4_;
    ::ubii::dataStructure::Color* color_;
    ::ubii::dataStructure::TouchEvent* touchevent_;
    ::ubii::dataStructure::KeyEvent* keyevent_;
    ::ubii::dataStructure::MouseEvent* mouseevent_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopicDataRecordList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicDataRecordList) */ {
 public:
  TopicDataRecordList();
  virtual ~TopicDataRecordList();

  TopicDataRecordList(const TopicDataRecordList& from);

  inline TopicDataRecordList& operator=(const TopicDataRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicDataRecordList(TopicDataRecordList&& from) noexcept
    : TopicDataRecordList() {
    *this = ::std::move(from);
  }

  inline TopicDataRecordList& operator=(TopicDataRecordList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicDataRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicDataRecordList* internal_default_instance() {
    return reinterpret_cast<const TopicDataRecordList*>(
               &_TopicDataRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TopicDataRecordList* other);
  friend void swap(TopicDataRecordList& a, TopicDataRecordList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicDataRecordList* New() const final {
    return CreateMaybeMessage<TopicDataRecordList>(NULL);
  }

  TopicDataRecordList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicDataRecordList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicDataRecordList& from);
  void MergeFrom(const TopicDataRecordList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicDataRecordList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.topicData.TopicDataRecord elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  ::ubii::topicData::TopicDataRecord* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
      mutable_elements();
  const ::ubii::topicData::TopicDataRecord& elements(int index) const;
  ::ubii::topicData::TopicDataRecord* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicDataRecordList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord > elements_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicDataRecord

// string topic = 1;
inline void TopicDataRecord::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicDataRecord::topic() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.topic)
  return topic_.GetNoArena();
}
inline void TopicDataRecord::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.topic)
}
#if LANG_CXX11
inline void TopicDataRecord::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.topicData.TopicDataRecord.topic)
}
#endif
inline void TopicDataRecord::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.topicData.TopicDataRecord.topic)
}
inline void TopicDataRecord::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.topicData.TopicDataRecord.topic)
}
inline ::std::string* TopicDataRecord::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicDataRecord::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDataRecord::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.topic)
}

// .ubii.topicData.Timestamp timestamp = 2;
inline bool TopicDataRecord::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::ubii::topicData::Timestamp& TopicDataRecord::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::ubii::topicData::Timestamp& TopicDataRecord::timestamp() const {
  const ::ubii::topicData::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::ubii::topicData::Timestamp*>(
      &::ubii::topicData::_Timestamp_default_instance_);
}
inline ::ubii::topicData::Timestamp* TopicDataRecord::release_timestamp() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.timestamp)
  
  ::ubii::topicData::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::ubii::topicData::Timestamp* TopicDataRecord::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::ubii::topicData::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.timestamp)
  return timestamp_;
}
inline void TopicDataRecord::set_allocated_timestamp(::ubii::topicData::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.timestamp)
}

// double number = 3;
inline bool TopicDataRecord::has_number() const {
  return type_case() == kNumber;
}
inline void TopicDataRecord::set_has_number() {
  _oneof_case_[0] = kNumber;
}
inline void TopicDataRecord::clear_number() {
  if (has_number()) {
    type_.number_ = 0;
    clear_has_type();
  }
}
inline double TopicDataRecord::number() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.number)
  if (has_number()) {
    return type_.number_;
  }
  return 0;
}
inline void TopicDataRecord::set_number(double value) {
  if (!has_number()) {
    clear_type();
    set_has_number();
  }
  type_.number_ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.number)
}

// bool boolean = 4;
inline bool TopicDataRecord::has_boolean() const {
  return type_case() == kBoolean;
}
inline void TopicDataRecord::set_has_boolean() {
  _oneof_case_[0] = kBoolean;
}
inline void TopicDataRecord::clear_boolean() {
  if (has_boolean()) {
    type_.boolean_ = false;
    clear_has_type();
  }
}
inline bool TopicDataRecord::boolean() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.boolean)
  if (has_boolean()) {
    return type_.boolean_;
  }
  return false;
}
inline void TopicDataRecord::set_boolean(bool value) {
  if (!has_boolean()) {
    clear_type();
    set_has_boolean();
  }
  type_.boolean_ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.boolean)
}

// string string = 5;
inline bool TopicDataRecord::has_string() const {
  return type_case() == kString;
}
inline void TopicDataRecord::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void TopicDataRecord::clear_string() {
  if (has_string()) {
    type_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const ::std::string& TopicDataRecord::string() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.string)
  if (has_string()) {
    return type_.string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TopicDataRecord::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.string)
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.string)
}
#if LANG_CXX11
inline void TopicDataRecord::set_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.string)
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.topicData.TopicDataRecord.string)
}
#endif
inline void TopicDataRecord::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.topicData.TopicDataRecord.string)
}
inline void TopicDataRecord::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.topicData.TopicDataRecord.string)
}
inline ::std::string* TopicDataRecord::mutable_string() {
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.string)
  return type_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicDataRecord::release_string() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.string)
  if (has_string()) {
    clear_has_type();
    return type_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TopicDataRecord::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (string != NULL) {
    set_has_string();
    type_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.string)
}

// .ubii.dataStructure.Vector2 vector2 = 6;
inline bool TopicDataRecord::has_vector2() const {
  return type_case() == kVector2;
}
inline void TopicDataRecord::set_has_vector2() {
  _oneof_case_[0] = kVector2;
}
inline const ::ubii::dataStructure::Vector2& TopicDataRecord::_internal_vector2() const {
  return *type_.vector2_;
}
inline ::ubii::dataStructure::Vector2* TopicDataRecord::release_vector2() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector2)
  if (has_vector2()) {
    clear_has_type();
      ::ubii::dataStructure::Vector2* temp = type_.vector2_;
    type_.vector2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector2& TopicDataRecord::vector2() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector2)
  return has_vector2()
      ? *type_.vector2_
      : *reinterpret_cast< ::ubii::dataStructure::Vector2*>(&::ubii::dataStructure::_Vector2_default_instance_);
}
inline ::ubii::dataStructure::Vector2* TopicDataRecord::mutable_vector2() {
  if (!has_vector2()) {
    clear_type();
    set_has_vector2();
    type_.vector2_ = CreateMaybeMessage< ::ubii::dataStructure::Vector2 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector2)
  return type_.vector2_;
}

// .ubii.dataStructure.Vector3 vector3 = 7;
inline bool TopicDataRecord::has_vector3() const {
  return type_case() == kVector3;
}
inline void TopicDataRecord::set_has_vector3() {
  _oneof_case_[0] = kVector3;
}
inline const ::ubii::dataStructure::Vector3& TopicDataRecord::_internal_vector3() const {
  return *type_.vector3_;
}
inline ::ubii::dataStructure::Vector3* TopicDataRecord::release_vector3() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector3)
  if (has_vector3()) {
    clear_has_type();
      ::ubii::dataStructure::Vector3* temp = type_.vector3_;
    type_.vector3_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector3& TopicDataRecord::vector3() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector3)
  return has_vector3()
      ? *type_.vector3_
      : *reinterpret_cast< ::ubii::dataStructure::Vector3*>(&::ubii::dataStructure::_Vector3_default_instance_);
}
inline ::ubii::dataStructure::Vector3* TopicDataRecord::mutable_vector3() {
  if (!has_vector3()) {
    clear_type();
    set_has_vector3();
    type_.vector3_ = CreateMaybeMessage< ::ubii::dataStructure::Vector3 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector3)
  return type_.vector3_;
}

// .ubii.dataStructure.Vector4 vector4 = 8;
inline bool TopicDataRecord::has_vector4() const {
  return type_case() == kVector4;
}
inline void TopicDataRecord::set_has_vector4() {
  _oneof_case_[0] = kVector4;
}
inline const ::ubii::dataStructure::Vector4& TopicDataRecord::_internal_vector4() const {
  return *type_.vector4_;
}
inline ::ubii::dataStructure::Vector4* TopicDataRecord::release_vector4() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector4)
  if (has_vector4()) {
    clear_has_type();
      ::ubii::dataStructure::Vector4* temp = type_.vector4_;
    type_.vector4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector4& TopicDataRecord::vector4() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector4)
  return has_vector4()
      ? *type_.vector4_
      : *reinterpret_cast< ::ubii::dataStructure::Vector4*>(&::ubii::dataStructure::_Vector4_default_instance_);
}
inline ::ubii::dataStructure::Vector4* TopicDataRecord::mutable_vector4() {
  if (!has_vector4()) {
    clear_type();
    set_has_vector4();
    type_.vector4_ = CreateMaybeMessage< ::ubii::dataStructure::Vector4 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector4)
  return type_.vector4_;
}

// .ubii.dataStructure.Quaternion quaternion = 9;
inline bool TopicDataRecord::has_quaternion() const {
  return type_case() == kQuaternion;
}
inline void TopicDataRecord::set_has_quaternion() {
  _oneof_case_[0] = kQuaternion;
}
inline const ::ubii::dataStructure::Quaternion& TopicDataRecord::_internal_quaternion() const {
  return *type_.quaternion_;
}
inline ::ubii::dataStructure::Quaternion* TopicDataRecord::release_quaternion() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.quaternion)
  if (has_quaternion()) {
    clear_has_type();
      ::ubii::dataStructure::Quaternion* temp = type_.quaternion_;
    type_.quaternion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Quaternion& TopicDataRecord::quaternion() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.quaternion)
  return has_quaternion()
      ? *type_.quaternion_
      : *reinterpret_cast< ::ubii::dataStructure::Quaternion*>(&::ubii::dataStructure::_Quaternion_default_instance_);
}
inline ::ubii::dataStructure::Quaternion* TopicDataRecord::mutable_quaternion() {
  if (!has_quaternion()) {
    clear_type();
    set_has_quaternion();
    type_.quaternion_ = CreateMaybeMessage< ::ubii::dataStructure::Quaternion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.quaternion)
  return type_.quaternion_;
}

// .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
inline bool TopicDataRecord::has_matrix3x2() const {
  return type_case() == kMatrix3X2;
}
inline void TopicDataRecord::set_has_matrix3x2() {
  _oneof_case_[0] = kMatrix3X2;
}
inline const ::ubii::dataStructure::Matrix3x2& TopicDataRecord::_internal_matrix3x2() const {
  return *type_.matrix3x2_;
}
inline ::ubii::dataStructure::Matrix3x2* TopicDataRecord::release_matrix3x2() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.matrix3x2)
  if (has_matrix3x2()) {
    clear_has_type();
      ::ubii::dataStructure::Matrix3x2* temp = type_.matrix3x2_;
    type_.matrix3x2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Matrix3x2& TopicDataRecord::matrix3x2() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.matrix3x2)
  return has_matrix3x2()
      ? *type_.matrix3x2_
      : *reinterpret_cast< ::ubii::dataStructure::Matrix3x2*>(&::ubii::dataStructure::_Matrix3x2_default_instance_);
}
inline ::ubii::dataStructure::Matrix3x2* TopicDataRecord::mutable_matrix3x2() {
  if (!has_matrix3x2()) {
    clear_type();
    set_has_matrix3x2();
    type_.matrix3x2_ = CreateMaybeMessage< ::ubii::dataStructure::Matrix3x2 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.matrix3x2)
  return type_.matrix3x2_;
}

// .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
inline bool TopicDataRecord::has_matrix4x4() const {
  return type_case() == kMatrix4X4;
}
inline void TopicDataRecord::set_has_matrix4x4() {
  _oneof_case_[0] = kMatrix4X4;
}
inline const ::ubii::dataStructure::Matrix4x4& TopicDataRecord::_internal_matrix4x4() const {
  return *type_.matrix4x4_;
}
inline ::ubii::dataStructure::Matrix4x4* TopicDataRecord::release_matrix4x4() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.matrix4x4)
  if (has_matrix4x4()) {
    clear_has_type();
      ::ubii::dataStructure::Matrix4x4* temp = type_.matrix4x4_;
    type_.matrix4x4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Matrix4x4& TopicDataRecord::matrix4x4() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.matrix4x4)
  return has_matrix4x4()
      ? *type_.matrix4x4_
      : *reinterpret_cast< ::ubii::dataStructure::Matrix4x4*>(&::ubii::dataStructure::_Matrix4x4_default_instance_);
}
inline ::ubii::dataStructure::Matrix4x4* TopicDataRecord::mutable_matrix4x4() {
  if (!has_matrix4x4()) {
    clear_type();
    set_has_matrix4x4();
    type_.matrix4x4_ = CreateMaybeMessage< ::ubii::dataStructure::Matrix4x4 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.matrix4x4)
  return type_.matrix4x4_;
}

// .ubii.dataStructure.Color color = 12;
inline bool TopicDataRecord::has_color() const {
  return type_case() == kColor;
}
inline void TopicDataRecord::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline const ::ubii::dataStructure::Color& TopicDataRecord::_internal_color() const {
  return *type_.color_;
}
inline ::ubii::dataStructure::Color* TopicDataRecord::release_color() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.color)
  if (has_color()) {
    clear_has_type();
      ::ubii::dataStructure::Color* temp = type_.color_;
    type_.color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Color& TopicDataRecord::color() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.color)
  return has_color()
      ? *type_.color_
      : *reinterpret_cast< ::ubii::dataStructure::Color*>(&::ubii::dataStructure::_Color_default_instance_);
}
inline ::ubii::dataStructure::Color* TopicDataRecord::mutable_color() {
  if (!has_color()) {
    clear_type();
    set_has_color();
    type_.color_ = CreateMaybeMessage< ::ubii::dataStructure::Color >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.color)
  return type_.color_;
}

// .ubii.dataStructure.TouchEvent touchEvent = 13;
inline bool TopicDataRecord::has_touchevent() const {
  return type_case() == kTouchEvent;
}
inline void TopicDataRecord::set_has_touchevent() {
  _oneof_case_[0] = kTouchEvent;
}
inline const ::ubii::dataStructure::TouchEvent& TopicDataRecord::_internal_touchevent() const {
  return *type_.touchevent_;
}
inline ::ubii::dataStructure::TouchEvent* TopicDataRecord::release_touchevent() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.touchEvent)
  if (has_touchevent()) {
    clear_has_type();
      ::ubii::dataStructure::TouchEvent* temp = type_.touchevent_;
    type_.touchevent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::TouchEvent& TopicDataRecord::touchevent() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.touchEvent)
  return has_touchevent()
      ? *type_.touchevent_
      : *reinterpret_cast< ::ubii::dataStructure::TouchEvent*>(&::ubii::dataStructure::_TouchEvent_default_instance_);
}
inline ::ubii::dataStructure::TouchEvent* TopicDataRecord::mutable_touchevent() {
  if (!has_touchevent()) {
    clear_type();
    set_has_touchevent();
    type_.touchevent_ = CreateMaybeMessage< ::ubii::dataStructure::TouchEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.touchEvent)
  return type_.touchevent_;
}

// .ubii.dataStructure.KeyEvent keyEvent = 14;
inline bool TopicDataRecord::has_keyevent() const {
  return type_case() == kKeyEvent;
}
inline void TopicDataRecord::set_has_keyevent() {
  _oneof_case_[0] = kKeyEvent;
}
inline const ::ubii::dataStructure::KeyEvent& TopicDataRecord::_internal_keyevent() const {
  return *type_.keyevent_;
}
inline ::ubii::dataStructure::KeyEvent* TopicDataRecord::release_keyevent() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.keyEvent)
  if (has_keyevent()) {
    clear_has_type();
      ::ubii::dataStructure::KeyEvent* temp = type_.keyevent_;
    type_.keyevent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::KeyEvent& TopicDataRecord::keyevent() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.keyEvent)
  return has_keyevent()
      ? *type_.keyevent_
      : *reinterpret_cast< ::ubii::dataStructure::KeyEvent*>(&::ubii::dataStructure::_KeyEvent_default_instance_);
}
inline ::ubii::dataStructure::KeyEvent* TopicDataRecord::mutable_keyevent() {
  if (!has_keyevent()) {
    clear_type();
    set_has_keyevent();
    type_.keyevent_ = CreateMaybeMessage< ::ubii::dataStructure::KeyEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.keyEvent)
  return type_.keyevent_;
}

// .ubii.dataStructure.MouseEvent mouseEvent = 15;
inline bool TopicDataRecord::has_mouseevent() const {
  return type_case() == kMouseEvent;
}
inline void TopicDataRecord::set_has_mouseevent() {
  _oneof_case_[0] = kMouseEvent;
}
inline const ::ubii::dataStructure::MouseEvent& TopicDataRecord::_internal_mouseevent() const {
  return *type_.mouseevent_;
}
inline ::ubii::dataStructure::MouseEvent* TopicDataRecord::release_mouseevent() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.mouseEvent)
  if (has_mouseevent()) {
    clear_has_type();
      ::ubii::dataStructure::MouseEvent* temp = type_.mouseevent_;
    type_.mouseevent_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::MouseEvent& TopicDataRecord::mouseevent() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.mouseEvent)
  return has_mouseevent()
      ? *type_.mouseevent_
      : *reinterpret_cast< ::ubii::dataStructure::MouseEvent*>(&::ubii::dataStructure::_MouseEvent_default_instance_);
}
inline ::ubii::dataStructure::MouseEvent* TopicDataRecord::mutable_mouseevent() {
  if (!has_mouseevent()) {
    clear_type();
    set_has_mouseevent();
    type_.mouseevent_ = CreateMaybeMessage< ::ubii::dataStructure::MouseEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.mouseEvent)
  return type_.mouseevent_;
}

inline bool TopicDataRecord::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TopicDataRecord::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline TopicDataRecord::TypeCase TopicDataRecord::type_case() const {
  return TopicDataRecord::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TopicDataRecordList

// repeated .ubii.topicData.TopicDataRecord elements = 1;
inline int TopicDataRecordList::elements_size() const {
  return elements_.size();
}
inline void TopicDataRecordList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::topicData::TopicDataRecord* TopicDataRecordList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
TopicDataRecordList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.topicData.TopicDataRecordList.elements)
  return &elements_;
}
inline const ::ubii::topicData::TopicDataRecord& TopicDataRecordList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Get(index);
}
inline ::ubii::topicData::TopicDataRecord* TopicDataRecordList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
TopicDataRecordList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.topicData.TopicDataRecordList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace topicData
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto
