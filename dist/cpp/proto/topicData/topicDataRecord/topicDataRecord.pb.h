// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/topicDataRecord.proto

#ifndef PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto
#define PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/timestamp.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/lists.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/vector2.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/vector3.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/vector4.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/quaternion.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/matrix3x2.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/matrix4x4.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/color.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/touchEvent.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/keyEvent.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/mouseEvent.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/myoEvent.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/pose2d.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/pose3d.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/object2d.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/object3d.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/image.pb.h"
#include "proto/sessions/session.pb.h"
#include "proto/processing/processingModule.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto 

namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto
namespace ubii {
namespace topicData {
class TopicDataRecord;
class TopicDataRecordDefaultTypeInternal;
extern TopicDataRecordDefaultTypeInternal _TopicDataRecord_default_instance_;
class TopicDataRecordList;
class TopicDataRecordListDefaultTypeInternal;
extern TopicDataRecordListDefaultTypeInternal _TopicDataRecordList_default_instance_;
}  // namespace topicData
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::topicData::TopicDataRecord* Arena::CreateMaybeMessage<::ubii::topicData::TopicDataRecord>(Arena*);
template<> ::ubii::topicData::TopicDataRecordList* Arena::CreateMaybeMessage<::ubii::topicData::TopicDataRecordList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace topicData {

// ===================================================================

class TopicDataRecord : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicDataRecord) */ {
 public:
  TopicDataRecord();
  virtual ~TopicDataRecord();

  TopicDataRecord(const TopicDataRecord& from);

  inline TopicDataRecord& operator=(const TopicDataRecord& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicDataRecord(TopicDataRecord&& from) noexcept
    : TopicDataRecord() {
    *this = ::std::move(from);
  }

  inline TopicDataRecord& operator=(TopicDataRecord&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicDataRecord& default_instance();

  enum TypeCase {
    kDouble = 3,
    kBool = 4,
    kString = 5,
    kInt32 = 23,
    kFloat = 24,
    kVector2 = 6,
    kVector2List = 35,
    kVector3 = 7,
    kVector3List = 36,
    kVector4 = 8,
    kVector4List = 37,
    kQuaternion = 9,
    kQuaternionList = 38,
    kMatrix3X2 = 10,
    kMatrix4X4 = 11,
    kColor = 12,
    kTouchEvent = 13,
    kTouchEventList = 34,
    kKeyEvent = 14,
    kMouseEvent = 15,
    kMyoEvent = 16,
    kPose2D = 17,
    kPose3D = 18,
    kObject2D = 19,
    kObject3D = 20,
    kObject2DList = 21,
    kObject3DList = 22,
    kInt32List = 25,
    kFloatList = 26,
    kDoubleList = 27,
    kStringList = 28,
    kBoolList = 29,
    kImage2D = 30,
    kImage2DList = 31,
    kSession = 32,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicDataRecord* internal_default_instance() {
    return reinterpret_cast<const TopicDataRecord*>(
               &_TopicDataRecord_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TopicDataRecord* other);
  friend void swap(TopicDataRecord& a, TopicDataRecord& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicDataRecord* New() const final {
    return CreateMaybeMessage<TopicDataRecord>(NULL);
  }

  TopicDataRecord* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicDataRecord>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicDataRecord& from);
  void MergeFrom(const TopicDataRecord& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicDataRecord* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string topic = 1;
  void clear_topic();
  static const int kTopicFieldNumber = 1;
  const ::std::string& topic() const;
  void set_topic(const ::std::string& value);
  #if LANG_CXX11
  void set_topic(::std::string&& value);
  #endif
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  ::std::string* mutable_topic();
  ::std::string* release_topic();
  void set_allocated_topic(::std::string* topic);

  // .ubii.topicData.Timestamp timestamp = 2;
  bool has_timestamp() const;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  private:
  const ::ubii::topicData::Timestamp& _internal_timestamp() const;
  public:
  const ::ubii::topicData::Timestamp& timestamp() const;
  ::ubii::topicData::Timestamp* release_timestamp();
  ::ubii::topicData::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::ubii::topicData::Timestamp* timestamp);

  // double double = 3;
  private:
  bool has_double_() const;
  public:
  void clear_double_();
  static const int kDoubleFieldNumber = 3;
  double double_() const;
  void set_double_(double value);

  // bool bool = 4;
  private:
  bool has_bool_() const;
  public:
  void clear_bool_();
  static const int kBoolFieldNumber = 4;
  bool bool_() const;
  void set_bool_(bool value);

  // string string = 5;
  private:
  bool has_string() const;
  public:
  void clear_string();
  static const int kStringFieldNumber = 5;
  const ::std::string& string() const;
  void set_string(const ::std::string& value);
  #if LANG_CXX11
  void set_string(::std::string&& value);
  #endif
  void set_string(const char* value);
  void set_string(const char* value, size_t size);
  ::std::string* mutable_string();
  ::std::string* release_string();
  void set_allocated_string(::std::string* string);

  // int32 int32 = 23;
  private:
  bool has_int32() const;
  public:
  void clear_int32();
  static const int kInt32FieldNumber = 23;
  ::google::protobuf::int32 int32() const;
  void set_int32(::google::protobuf::int32 value);

  // float float = 24;
  private:
  bool has_float_() const;
  public:
  void clear_float_();
  static const int kFloatFieldNumber = 24;
  float float_() const;
  void set_float_(float value);

  // .ubii.dataStructure.Vector2 vector2 = 6;
  bool has_vector2() const;
  void clear_vector2();
  static const int kVector2FieldNumber = 6;
  private:
  const ::ubii::dataStructure::Vector2& _internal_vector2() const;
  public:
  const ::ubii::dataStructure::Vector2& vector2() const;
  ::ubii::dataStructure::Vector2* release_vector2();
  ::ubii::dataStructure::Vector2* mutable_vector2();
  void set_allocated_vector2(::ubii::dataStructure::Vector2* vector2);

  // .ubii.dataStructure.Vector2List vector2_list = 35;
  bool has_vector2_list() const;
  void clear_vector2_list();
  static const int kVector2ListFieldNumber = 35;
  private:
  const ::ubii::dataStructure::Vector2List& _internal_vector2_list() const;
  public:
  const ::ubii::dataStructure::Vector2List& vector2_list() const;
  ::ubii::dataStructure::Vector2List* release_vector2_list();
  ::ubii::dataStructure::Vector2List* mutable_vector2_list();
  void set_allocated_vector2_list(::ubii::dataStructure::Vector2List* vector2_list);

  // .ubii.dataStructure.Vector3 vector3 = 7;
  bool has_vector3() const;
  void clear_vector3();
  static const int kVector3FieldNumber = 7;
  private:
  const ::ubii::dataStructure::Vector3& _internal_vector3() const;
  public:
  const ::ubii::dataStructure::Vector3& vector3() const;
  ::ubii::dataStructure::Vector3* release_vector3();
  ::ubii::dataStructure::Vector3* mutable_vector3();
  void set_allocated_vector3(::ubii::dataStructure::Vector3* vector3);

  // .ubii.dataStructure.Vector3List vector3_list = 36;
  bool has_vector3_list() const;
  void clear_vector3_list();
  static const int kVector3ListFieldNumber = 36;
  private:
  const ::ubii::dataStructure::Vector3List& _internal_vector3_list() const;
  public:
  const ::ubii::dataStructure::Vector3List& vector3_list() const;
  ::ubii::dataStructure::Vector3List* release_vector3_list();
  ::ubii::dataStructure::Vector3List* mutable_vector3_list();
  void set_allocated_vector3_list(::ubii::dataStructure::Vector3List* vector3_list);

  // .ubii.dataStructure.Vector4 vector4 = 8;
  bool has_vector4() const;
  void clear_vector4();
  static const int kVector4FieldNumber = 8;
  private:
  const ::ubii::dataStructure::Vector4& _internal_vector4() const;
  public:
  const ::ubii::dataStructure::Vector4& vector4() const;
  ::ubii::dataStructure::Vector4* release_vector4();
  ::ubii::dataStructure::Vector4* mutable_vector4();
  void set_allocated_vector4(::ubii::dataStructure::Vector4* vector4);

  // .ubii.dataStructure.Vector4List vector4_list = 37;
  bool has_vector4_list() const;
  void clear_vector4_list();
  static const int kVector4ListFieldNumber = 37;
  private:
  const ::ubii::dataStructure::Vector4List& _internal_vector4_list() const;
  public:
  const ::ubii::dataStructure::Vector4List& vector4_list() const;
  ::ubii::dataStructure::Vector4List* release_vector4_list();
  ::ubii::dataStructure::Vector4List* mutable_vector4_list();
  void set_allocated_vector4_list(::ubii::dataStructure::Vector4List* vector4_list);

  // .ubii.dataStructure.Quaternion quaternion = 9;
  bool has_quaternion() const;
  void clear_quaternion();
  static const int kQuaternionFieldNumber = 9;
  private:
  const ::ubii::dataStructure::Quaternion& _internal_quaternion() const;
  public:
  const ::ubii::dataStructure::Quaternion& quaternion() const;
  ::ubii::dataStructure::Quaternion* release_quaternion();
  ::ubii::dataStructure::Quaternion* mutable_quaternion();
  void set_allocated_quaternion(::ubii::dataStructure::Quaternion* quaternion);

  // .ubii.dataStructure.Quaternion quaternion_list = 38;
  bool has_quaternion_list() const;
  void clear_quaternion_list();
  static const int kQuaternionListFieldNumber = 38;
  private:
  const ::ubii::dataStructure::Quaternion& _internal_quaternion_list() const;
  public:
  const ::ubii::dataStructure::Quaternion& quaternion_list() const;
  ::ubii::dataStructure::Quaternion* release_quaternion_list();
  ::ubii::dataStructure::Quaternion* mutable_quaternion_list();
  void set_allocated_quaternion_list(::ubii::dataStructure::Quaternion* quaternion_list);

  // .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
  bool has_matrix3x2() const;
  void clear_matrix3x2();
  static const int kMatrix3X2FieldNumber = 10;
  private:
  const ::ubii::dataStructure::Matrix3x2& _internal_matrix3x2() const;
  public:
  const ::ubii::dataStructure::Matrix3x2& matrix3x2() const;
  ::ubii::dataStructure::Matrix3x2* release_matrix3x2();
  ::ubii::dataStructure::Matrix3x2* mutable_matrix3x2();
  void set_allocated_matrix3x2(::ubii::dataStructure::Matrix3x2* matrix3x2);

  // .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
  bool has_matrix4x4() const;
  void clear_matrix4x4();
  static const int kMatrix4X4FieldNumber = 11;
  private:
  const ::ubii::dataStructure::Matrix4x4& _internal_matrix4x4() const;
  public:
  const ::ubii::dataStructure::Matrix4x4& matrix4x4() const;
  ::ubii::dataStructure::Matrix4x4* release_matrix4x4();
  ::ubii::dataStructure::Matrix4x4* mutable_matrix4x4();
  void set_allocated_matrix4x4(::ubii::dataStructure::Matrix4x4* matrix4x4);

  // .ubii.dataStructure.Color color = 12;
  bool has_color() const;
  void clear_color();
  static const int kColorFieldNumber = 12;
  private:
  const ::ubii::dataStructure::Color& _internal_color() const;
  public:
  const ::ubii::dataStructure::Color& color() const;
  ::ubii::dataStructure::Color* release_color();
  ::ubii::dataStructure::Color* mutable_color();
  void set_allocated_color(::ubii::dataStructure::Color* color);

  // .ubii.dataStructure.TouchEvent touch_event = 13;
  bool has_touch_event() const;
  void clear_touch_event();
  static const int kTouchEventFieldNumber = 13;
  private:
  const ::ubii::dataStructure::TouchEvent& _internal_touch_event() const;
  public:
  const ::ubii::dataStructure::TouchEvent& touch_event() const;
  ::ubii::dataStructure::TouchEvent* release_touch_event();
  ::ubii::dataStructure::TouchEvent* mutable_touch_event();
  void set_allocated_touch_event(::ubii::dataStructure::TouchEvent* touch_event);

  // .ubii.dataStructure.TouchEventList touch_event_list = 34;
  bool has_touch_event_list() const;
  void clear_touch_event_list();
  static const int kTouchEventListFieldNumber = 34;
  private:
  const ::ubii::dataStructure::TouchEventList& _internal_touch_event_list() const;
  public:
  const ::ubii::dataStructure::TouchEventList& touch_event_list() const;
  ::ubii::dataStructure::TouchEventList* release_touch_event_list();
  ::ubii::dataStructure::TouchEventList* mutable_touch_event_list();
  void set_allocated_touch_event_list(::ubii::dataStructure::TouchEventList* touch_event_list);

  // .ubii.dataStructure.KeyEvent key_event = 14;
  bool has_key_event() const;
  void clear_key_event();
  static const int kKeyEventFieldNumber = 14;
  private:
  const ::ubii::dataStructure::KeyEvent& _internal_key_event() const;
  public:
  const ::ubii::dataStructure::KeyEvent& key_event() const;
  ::ubii::dataStructure::KeyEvent* release_key_event();
  ::ubii::dataStructure::KeyEvent* mutable_key_event();
  void set_allocated_key_event(::ubii::dataStructure::KeyEvent* key_event);

  // .ubii.dataStructure.MouseEvent mouse_event = 15;
  bool has_mouse_event() const;
  void clear_mouse_event();
  static const int kMouseEventFieldNumber = 15;
  private:
  const ::ubii::dataStructure::MouseEvent& _internal_mouse_event() const;
  public:
  const ::ubii::dataStructure::MouseEvent& mouse_event() const;
  ::ubii::dataStructure::MouseEvent* release_mouse_event();
  ::ubii::dataStructure::MouseEvent* mutable_mouse_event();
  void set_allocated_mouse_event(::ubii::dataStructure::MouseEvent* mouse_event);

  // .ubii.dataStructure.MyoEvent myo_event = 16;
  bool has_myo_event() const;
  void clear_myo_event();
  static const int kMyoEventFieldNumber = 16;
  private:
  const ::ubii::dataStructure::MyoEvent& _internal_myo_event() const;
  public:
  const ::ubii::dataStructure::MyoEvent& myo_event() const;
  ::ubii::dataStructure::MyoEvent* release_myo_event();
  ::ubii::dataStructure::MyoEvent* mutable_myo_event();
  void set_allocated_myo_event(::ubii::dataStructure::MyoEvent* myo_event);

  // .ubii.dataStructure.Pose2D pose2D = 17;
  bool has_pose2d() const;
  void clear_pose2d();
  static const int kPose2DFieldNumber = 17;
  private:
  const ::ubii::dataStructure::Pose2D& _internal_pose2d() const;
  public:
  const ::ubii::dataStructure::Pose2D& pose2d() const;
  ::ubii::dataStructure::Pose2D* release_pose2d();
  ::ubii::dataStructure::Pose2D* mutable_pose2d();
  void set_allocated_pose2d(::ubii::dataStructure::Pose2D* pose2d);

  // .ubii.dataStructure.Pose3D pose3D = 18;
  bool has_pose3d() const;
  void clear_pose3d();
  static const int kPose3DFieldNumber = 18;
  private:
  const ::ubii::dataStructure::Pose3D& _internal_pose3d() const;
  public:
  const ::ubii::dataStructure::Pose3D& pose3d() const;
  ::ubii::dataStructure::Pose3D* release_pose3d();
  ::ubii::dataStructure::Pose3D* mutable_pose3d();
  void set_allocated_pose3d(::ubii::dataStructure::Pose3D* pose3d);

  // .ubii.dataStructure.Object2D object2D = 19;
  bool has_object2d() const;
  void clear_object2d();
  static const int kObject2DFieldNumber = 19;
  private:
  const ::ubii::dataStructure::Object2D& _internal_object2d() const;
  public:
  const ::ubii::dataStructure::Object2D& object2d() const;
  ::ubii::dataStructure::Object2D* release_object2d();
  ::ubii::dataStructure::Object2D* mutable_object2d();
  void set_allocated_object2d(::ubii::dataStructure::Object2D* object2d);

  // .ubii.dataStructure.Object3D object3D = 20;
  bool has_object3d() const;
  void clear_object3d();
  static const int kObject3DFieldNumber = 20;
  private:
  const ::ubii::dataStructure::Object3D& _internal_object3d() const;
  public:
  const ::ubii::dataStructure::Object3D& object3d() const;
  ::ubii::dataStructure::Object3D* release_object3d();
  ::ubii::dataStructure::Object3D* mutable_object3d();
  void set_allocated_object3d(::ubii::dataStructure::Object3D* object3d);

  // .ubii.dataStructure.Object2DList object2D_list = 21;
  bool has_object2d_list() const;
  void clear_object2d_list();
  static const int kObject2DListFieldNumber = 21;
  private:
  const ::ubii::dataStructure::Object2DList& _internal_object2d_list() const;
  public:
  const ::ubii::dataStructure::Object2DList& object2d_list() const;
  ::ubii::dataStructure::Object2DList* release_object2d_list();
  ::ubii::dataStructure::Object2DList* mutable_object2d_list();
  void set_allocated_object2d_list(::ubii::dataStructure::Object2DList* object2d_list);

  // .ubii.dataStructure.Object3DList object3D_list = 22;
  bool has_object3d_list() const;
  void clear_object3d_list();
  static const int kObject3DListFieldNumber = 22;
  private:
  const ::ubii::dataStructure::Object3DList& _internal_object3d_list() const;
  public:
  const ::ubii::dataStructure::Object3DList& object3d_list() const;
  ::ubii::dataStructure::Object3DList* release_object3d_list();
  ::ubii::dataStructure::Object3DList* mutable_object3d_list();
  void set_allocated_object3d_list(::ubii::dataStructure::Object3DList* object3d_list);

  // .ubii.dataStructure.Int32List int32_list = 25;
  bool has_int32_list() const;
  void clear_int32_list();
  static const int kInt32ListFieldNumber = 25;
  private:
  const ::ubii::dataStructure::Int32List& _internal_int32_list() const;
  public:
  const ::ubii::dataStructure::Int32List& int32_list() const;
  ::ubii::dataStructure::Int32List* release_int32_list();
  ::ubii::dataStructure::Int32List* mutable_int32_list();
  void set_allocated_int32_list(::ubii::dataStructure::Int32List* int32_list);

  // .ubii.dataStructure.FloatList float_list = 26;
  bool has_float_list() const;
  void clear_float_list();
  static const int kFloatListFieldNumber = 26;
  private:
  const ::ubii::dataStructure::FloatList& _internal_float_list() const;
  public:
  const ::ubii::dataStructure::FloatList& float_list() const;
  ::ubii::dataStructure::FloatList* release_float_list();
  ::ubii::dataStructure::FloatList* mutable_float_list();
  void set_allocated_float_list(::ubii::dataStructure::FloatList* float_list);

  // .ubii.dataStructure.DoubleList double_list = 27;
  bool has_double_list() const;
  void clear_double_list();
  static const int kDoubleListFieldNumber = 27;
  private:
  const ::ubii::dataStructure::DoubleList& _internal_double_list() const;
  public:
  const ::ubii::dataStructure::DoubleList& double_list() const;
  ::ubii::dataStructure::DoubleList* release_double_list();
  ::ubii::dataStructure::DoubleList* mutable_double_list();
  void set_allocated_double_list(::ubii::dataStructure::DoubleList* double_list);

  // .ubii.dataStructure.StringList string_list = 28;
  bool has_string_list() const;
  void clear_string_list();
  static const int kStringListFieldNumber = 28;
  private:
  const ::ubii::dataStructure::StringList& _internal_string_list() const;
  public:
  const ::ubii::dataStructure::StringList& string_list() const;
  ::ubii::dataStructure::StringList* release_string_list();
  ::ubii::dataStructure::StringList* mutable_string_list();
  void set_allocated_string_list(::ubii::dataStructure::StringList* string_list);

  // .ubii.dataStructure.BoolList bool_list = 29;
  bool has_bool_list() const;
  void clear_bool_list();
  static const int kBoolListFieldNumber = 29;
  private:
  const ::ubii::dataStructure::BoolList& _internal_bool_list() const;
  public:
  const ::ubii::dataStructure::BoolList& bool_list() const;
  ::ubii::dataStructure::BoolList* release_bool_list();
  ::ubii::dataStructure::BoolList* mutable_bool_list();
  void set_allocated_bool_list(::ubii::dataStructure::BoolList* bool_list);

  // .ubii.dataStructure.Image2D image2D = 30;
  bool has_image2d() const;
  void clear_image2d();
  static const int kImage2DFieldNumber = 30;
  private:
  const ::ubii::dataStructure::Image2D& _internal_image2d() const;
  public:
  const ::ubii::dataStructure::Image2D& image2d() const;
  ::ubii::dataStructure::Image2D* release_image2d();
  ::ubii::dataStructure::Image2D* mutable_image2d();
  void set_allocated_image2d(::ubii::dataStructure::Image2D* image2d);

  // .ubii.dataStructure.Image2DList image2D_list = 31;
  bool has_image2d_list() const;
  void clear_image2d_list();
  static const int kImage2DListFieldNumber = 31;
  private:
  const ::ubii::dataStructure::Image2DList& _internal_image2d_list() const;
  public:
  const ::ubii::dataStructure::Image2DList& image2d_list() const;
  ::ubii::dataStructure::Image2DList* release_image2d_list();
  ::ubii::dataStructure::Image2DList* mutable_image2d_list();
  void set_allocated_image2d_list(::ubii::dataStructure::Image2DList* image2d_list);

  // .ubii.sessions.Session session = 32;
  bool has_session() const;
  void clear_session();
  static const int kSessionFieldNumber = 32;
  private:
  const ::ubii::sessions::Session& _internal_session() const;
  public:
  const ::ubii::sessions::Session& session() const;
  ::ubii::sessions::Session* release_session();
  ::ubii::sessions::Session* mutable_session();
  void set_allocated_session(::ubii::sessions::Session* session);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicDataRecord)
 private:
  void set_has_double_();
  void set_has_bool_();
  void set_has_string();
  void set_has_int32();
  void set_has_float_();
  void set_has_vector2();
  void set_has_vector2_list();
  void set_has_vector3();
  void set_has_vector3_list();
  void set_has_vector4();
  void set_has_vector4_list();
  void set_has_quaternion();
  void set_has_quaternion_list();
  void set_has_matrix3x2();
  void set_has_matrix4x4();
  void set_has_color();
  void set_has_touch_event();
  void set_has_touch_event_list();
  void set_has_key_event();
  void set_has_mouse_event();
  void set_has_myo_event();
  void set_has_pose2d();
  void set_has_pose3d();
  void set_has_object2d();
  void set_has_object3d();
  void set_has_object2d_list();
  void set_has_object3d_list();
  void set_has_int32_list();
  void set_has_float_list();
  void set_has_double_list();
  void set_has_string_list();
  void set_has_bool_list();
  void set_has_image2d();
  void set_has_image2d_list();
  void set_has_session();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr topic_;
  ::ubii::topicData::Timestamp* timestamp_;
  union TypeUnion {
    TypeUnion() {}
    double double__;
    bool bool__;
    ::google::protobuf::internal::ArenaStringPtr string_;
    ::google::protobuf::int32 int32_;
    float float__;
    ::ubii::dataStructure::Vector2* vector2_;
    ::ubii::dataStructure::Vector2List* vector2_list_;
    ::ubii::dataStructure::Vector3* vector3_;
    ::ubii::dataStructure::Vector3List* vector3_list_;
    ::ubii::dataStructure::Vector4* vector4_;
    ::ubii::dataStructure::Vector4List* vector4_list_;
    ::ubii::dataStructure::Quaternion* quaternion_;
    ::ubii::dataStructure::Quaternion* quaternion_list_;
    ::ubii::dataStructure::Matrix3x2* matrix3x2_;
    ::ubii::dataStructure::Matrix4x4* matrix4x4_;
    ::ubii::dataStructure::Color* color_;
    ::ubii::dataStructure::TouchEvent* touch_event_;
    ::ubii::dataStructure::TouchEventList* touch_event_list_;
    ::ubii::dataStructure::KeyEvent* key_event_;
    ::ubii::dataStructure::MouseEvent* mouse_event_;
    ::ubii::dataStructure::MyoEvent* myo_event_;
    ::ubii::dataStructure::Pose2D* pose2d_;
    ::ubii::dataStructure::Pose3D* pose3d_;
    ::ubii::dataStructure::Object2D* object2d_;
    ::ubii::dataStructure::Object3D* object3d_;
    ::ubii::dataStructure::Object2DList* object2d_list_;
    ::ubii::dataStructure::Object3DList* object3d_list_;
    ::ubii::dataStructure::Int32List* int32_list_;
    ::ubii::dataStructure::FloatList* float_list_;
    ::ubii::dataStructure::DoubleList* double_list_;
    ::ubii::dataStructure::StringList* string_list_;
    ::ubii::dataStructure::BoolList* bool_list_;
    ::ubii::dataStructure::Image2D* image2d_;
    ::ubii::dataStructure::Image2DList* image2d_list_;
    ::ubii::sessions::Session* session_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TopicDataRecordList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicDataRecordList) */ {
 public:
  TopicDataRecordList();
  virtual ~TopicDataRecordList();

  TopicDataRecordList(const TopicDataRecordList& from);

  inline TopicDataRecordList& operator=(const TopicDataRecordList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicDataRecordList(TopicDataRecordList&& from) noexcept
    : TopicDataRecordList() {
    *this = ::std::move(from);
  }

  inline TopicDataRecordList& operator=(TopicDataRecordList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicDataRecordList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicDataRecordList* internal_default_instance() {
    return reinterpret_cast<const TopicDataRecordList*>(
               &_TopicDataRecordList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TopicDataRecordList* other);
  friend void swap(TopicDataRecordList& a, TopicDataRecordList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicDataRecordList* New() const final {
    return CreateMaybeMessage<TopicDataRecordList>(NULL);
  }

  TopicDataRecordList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicDataRecordList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicDataRecordList& from);
  void MergeFrom(const TopicDataRecordList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicDataRecordList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.topicData.TopicDataRecord elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  ::ubii::topicData::TopicDataRecord* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
      mutable_elements();
  const ::ubii::topicData::TopicDataRecord& elements(int index) const;
  ::ubii::topicData::TopicDataRecord* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicDataRecordList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord > elements_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicDataRecord

// string topic = 1;
inline void TopicDataRecord::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TopicDataRecord::topic() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.topic)
  return topic_.GetNoArena();
}
inline void TopicDataRecord::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.topic)
}
#if LANG_CXX11
inline void TopicDataRecord::set_topic(::std::string&& value) {
  
  topic_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.topicData.TopicDataRecord.topic)
}
#endif
inline void TopicDataRecord::set_topic(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.topicData.TopicDataRecord.topic)
}
inline void TopicDataRecord::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.topicData.TopicDataRecord.topic)
}
inline ::std::string* TopicDataRecord::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicDataRecord::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TopicDataRecord::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.topic)
}

// .ubii.topicData.Timestamp timestamp = 2;
inline bool TopicDataRecord::has_timestamp() const {
  return this != internal_default_instance() && timestamp_ != NULL;
}
inline const ::ubii::topicData::Timestamp& TopicDataRecord::_internal_timestamp() const {
  return *timestamp_;
}
inline const ::ubii::topicData::Timestamp& TopicDataRecord::timestamp() const {
  const ::ubii::topicData::Timestamp* p = timestamp_;
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.timestamp)
  return p != NULL ? *p : *reinterpret_cast<const ::ubii::topicData::Timestamp*>(
      &::ubii::topicData::_Timestamp_default_instance_);
}
inline ::ubii::topicData::Timestamp* TopicDataRecord::release_timestamp() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.timestamp)
  
  ::ubii::topicData::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
inline ::ubii::topicData::Timestamp* TopicDataRecord::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    auto* p = CreateMaybeMessage<::ubii::topicData::Timestamp>(GetArenaNoVirtual());
    timestamp_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.timestamp)
  return timestamp_;
}
inline void TopicDataRecord::set_allocated_timestamp(::ubii::topicData::Timestamp* timestamp) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(timestamp_);
  }
  if (timestamp) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      timestamp = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, timestamp, submessage_arena);
    }
    
  } else {
    
  }
  timestamp_ = timestamp;
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.timestamp)
}

// double double = 3;
inline bool TopicDataRecord::has_double_() const {
  return type_case() == kDouble;
}
inline void TopicDataRecord::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
inline void TopicDataRecord::clear_double_() {
  if (has_double_()) {
    type_.double__ = 0;
    clear_has_type();
  }
}
inline double TopicDataRecord::double_() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.double)
  if (has_double_()) {
    return type_.double__;
  }
  return 0;
}
inline void TopicDataRecord::set_double_(double value) {
  if (!has_double_()) {
    clear_type();
    set_has_double_();
  }
  type_.double__ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.double)
}

// bool bool = 4;
inline bool TopicDataRecord::has_bool_() const {
  return type_case() == kBool;
}
inline void TopicDataRecord::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
inline void TopicDataRecord::clear_bool_() {
  if (has_bool_()) {
    type_.bool__ = false;
    clear_has_type();
  }
}
inline bool TopicDataRecord::bool_() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.bool)
  if (has_bool_()) {
    return type_.bool__;
  }
  return false;
}
inline void TopicDataRecord::set_bool_(bool value) {
  if (!has_bool_()) {
    clear_type();
    set_has_bool_();
  }
  type_.bool__ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.bool)
}

// string string = 5;
inline bool TopicDataRecord::has_string() const {
  return type_case() == kString;
}
inline void TopicDataRecord::set_has_string() {
  _oneof_case_[0] = kString;
}
inline void TopicDataRecord::clear_string() {
  if (has_string()) {
    type_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const ::std::string& TopicDataRecord::string() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.string)
  if (has_string()) {
    return type_.string_.GetNoArena();
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
inline void TopicDataRecord::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.string)
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.string)
}
#if LANG_CXX11
inline void TopicDataRecord::set_string(::std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.string)
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.topicData.TopicDataRecord.string)
}
#endif
inline void TopicDataRecord::set_string(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.topicData.TopicDataRecord.string)
}
inline void TopicDataRecord::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.topicData.TopicDataRecord.string)
}
inline ::std::string* TopicDataRecord::mutable_string() {
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.string)
  return type_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TopicDataRecord::release_string() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.string)
  if (has_string()) {
    clear_has_type();
    return type_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
inline void TopicDataRecord::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (string != NULL) {
    set_has_string();
    type_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), string);
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.string)
}

// int32 int32 = 23;
inline bool TopicDataRecord::has_int32() const {
  return type_case() == kInt32;
}
inline void TopicDataRecord::set_has_int32() {
  _oneof_case_[0] = kInt32;
}
inline void TopicDataRecord::clear_int32() {
  if (has_int32()) {
    type_.int32_ = 0;
    clear_has_type();
  }
}
inline ::google::protobuf::int32 TopicDataRecord::int32() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.int32)
  if (has_int32()) {
    return type_.int32_;
  }
  return 0;
}
inline void TopicDataRecord::set_int32(::google::protobuf::int32 value) {
  if (!has_int32()) {
    clear_type();
    set_has_int32();
  }
  type_.int32_ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.int32)
}

// float float = 24;
inline bool TopicDataRecord::has_float_() const {
  return type_case() == kFloat;
}
inline void TopicDataRecord::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
inline void TopicDataRecord::clear_float_() {
  if (has_float_()) {
    type_.float__ = 0;
    clear_has_type();
  }
}
inline float TopicDataRecord::float_() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.float)
  if (has_float_()) {
    return type_.float__;
  }
  return 0;
}
inline void TopicDataRecord::set_float_(float value) {
  if (!has_float_()) {
    clear_type();
    set_has_float_();
  }
  type_.float__ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.float)
}

// .ubii.dataStructure.Vector2 vector2 = 6;
inline bool TopicDataRecord::has_vector2() const {
  return type_case() == kVector2;
}
inline void TopicDataRecord::set_has_vector2() {
  _oneof_case_[0] = kVector2;
}
inline const ::ubii::dataStructure::Vector2& TopicDataRecord::_internal_vector2() const {
  return *type_.vector2_;
}
inline ::ubii::dataStructure::Vector2* TopicDataRecord::release_vector2() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector2)
  if (has_vector2()) {
    clear_has_type();
      ::ubii::dataStructure::Vector2* temp = type_.vector2_;
    type_.vector2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector2& TopicDataRecord::vector2() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector2)
  return has_vector2()
      ? *type_.vector2_
      : *reinterpret_cast< ::ubii::dataStructure::Vector2*>(&::ubii::dataStructure::_Vector2_default_instance_);
}
inline ::ubii::dataStructure::Vector2* TopicDataRecord::mutable_vector2() {
  if (!has_vector2()) {
    clear_type();
    set_has_vector2();
    type_.vector2_ = CreateMaybeMessage< ::ubii::dataStructure::Vector2 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector2)
  return type_.vector2_;
}

// .ubii.dataStructure.Vector2List vector2_list = 35;
inline bool TopicDataRecord::has_vector2_list() const {
  return type_case() == kVector2List;
}
inline void TopicDataRecord::set_has_vector2_list() {
  _oneof_case_[0] = kVector2List;
}
inline const ::ubii::dataStructure::Vector2List& TopicDataRecord::_internal_vector2_list() const {
  return *type_.vector2_list_;
}
inline ::ubii::dataStructure::Vector2List* TopicDataRecord::release_vector2_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector2_list)
  if (has_vector2_list()) {
    clear_has_type();
      ::ubii::dataStructure::Vector2List* temp = type_.vector2_list_;
    type_.vector2_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector2List& TopicDataRecord::vector2_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector2_list)
  return has_vector2_list()
      ? *type_.vector2_list_
      : *reinterpret_cast< ::ubii::dataStructure::Vector2List*>(&::ubii::dataStructure::_Vector2List_default_instance_);
}
inline ::ubii::dataStructure::Vector2List* TopicDataRecord::mutable_vector2_list() {
  if (!has_vector2_list()) {
    clear_type();
    set_has_vector2_list();
    type_.vector2_list_ = CreateMaybeMessage< ::ubii::dataStructure::Vector2List >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector2_list)
  return type_.vector2_list_;
}

// .ubii.dataStructure.Vector3 vector3 = 7;
inline bool TopicDataRecord::has_vector3() const {
  return type_case() == kVector3;
}
inline void TopicDataRecord::set_has_vector3() {
  _oneof_case_[0] = kVector3;
}
inline const ::ubii::dataStructure::Vector3& TopicDataRecord::_internal_vector3() const {
  return *type_.vector3_;
}
inline ::ubii::dataStructure::Vector3* TopicDataRecord::release_vector3() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector3)
  if (has_vector3()) {
    clear_has_type();
      ::ubii::dataStructure::Vector3* temp = type_.vector3_;
    type_.vector3_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector3& TopicDataRecord::vector3() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector3)
  return has_vector3()
      ? *type_.vector3_
      : *reinterpret_cast< ::ubii::dataStructure::Vector3*>(&::ubii::dataStructure::_Vector3_default_instance_);
}
inline ::ubii::dataStructure::Vector3* TopicDataRecord::mutable_vector3() {
  if (!has_vector3()) {
    clear_type();
    set_has_vector3();
    type_.vector3_ = CreateMaybeMessage< ::ubii::dataStructure::Vector3 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector3)
  return type_.vector3_;
}

// .ubii.dataStructure.Vector3List vector3_list = 36;
inline bool TopicDataRecord::has_vector3_list() const {
  return type_case() == kVector3List;
}
inline void TopicDataRecord::set_has_vector3_list() {
  _oneof_case_[0] = kVector3List;
}
inline const ::ubii::dataStructure::Vector3List& TopicDataRecord::_internal_vector3_list() const {
  return *type_.vector3_list_;
}
inline ::ubii::dataStructure::Vector3List* TopicDataRecord::release_vector3_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector3_list)
  if (has_vector3_list()) {
    clear_has_type();
      ::ubii::dataStructure::Vector3List* temp = type_.vector3_list_;
    type_.vector3_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector3List& TopicDataRecord::vector3_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector3_list)
  return has_vector3_list()
      ? *type_.vector3_list_
      : *reinterpret_cast< ::ubii::dataStructure::Vector3List*>(&::ubii::dataStructure::_Vector3List_default_instance_);
}
inline ::ubii::dataStructure::Vector3List* TopicDataRecord::mutable_vector3_list() {
  if (!has_vector3_list()) {
    clear_type();
    set_has_vector3_list();
    type_.vector3_list_ = CreateMaybeMessage< ::ubii::dataStructure::Vector3List >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector3_list)
  return type_.vector3_list_;
}

// .ubii.dataStructure.Vector4 vector4 = 8;
inline bool TopicDataRecord::has_vector4() const {
  return type_case() == kVector4;
}
inline void TopicDataRecord::set_has_vector4() {
  _oneof_case_[0] = kVector4;
}
inline const ::ubii::dataStructure::Vector4& TopicDataRecord::_internal_vector4() const {
  return *type_.vector4_;
}
inline ::ubii::dataStructure::Vector4* TopicDataRecord::release_vector4() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector4)
  if (has_vector4()) {
    clear_has_type();
      ::ubii::dataStructure::Vector4* temp = type_.vector4_;
    type_.vector4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector4& TopicDataRecord::vector4() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector4)
  return has_vector4()
      ? *type_.vector4_
      : *reinterpret_cast< ::ubii::dataStructure::Vector4*>(&::ubii::dataStructure::_Vector4_default_instance_);
}
inline ::ubii::dataStructure::Vector4* TopicDataRecord::mutable_vector4() {
  if (!has_vector4()) {
    clear_type();
    set_has_vector4();
    type_.vector4_ = CreateMaybeMessage< ::ubii::dataStructure::Vector4 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector4)
  return type_.vector4_;
}

// .ubii.dataStructure.Vector4List vector4_list = 37;
inline bool TopicDataRecord::has_vector4_list() const {
  return type_case() == kVector4List;
}
inline void TopicDataRecord::set_has_vector4_list() {
  _oneof_case_[0] = kVector4List;
}
inline const ::ubii::dataStructure::Vector4List& TopicDataRecord::_internal_vector4_list() const {
  return *type_.vector4_list_;
}
inline ::ubii::dataStructure::Vector4List* TopicDataRecord::release_vector4_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector4_list)
  if (has_vector4_list()) {
    clear_has_type();
      ::ubii::dataStructure::Vector4List* temp = type_.vector4_list_;
    type_.vector4_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector4List& TopicDataRecord::vector4_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector4_list)
  return has_vector4_list()
      ? *type_.vector4_list_
      : *reinterpret_cast< ::ubii::dataStructure::Vector4List*>(&::ubii::dataStructure::_Vector4List_default_instance_);
}
inline ::ubii::dataStructure::Vector4List* TopicDataRecord::mutable_vector4_list() {
  if (!has_vector4_list()) {
    clear_type();
    set_has_vector4_list();
    type_.vector4_list_ = CreateMaybeMessage< ::ubii::dataStructure::Vector4List >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector4_list)
  return type_.vector4_list_;
}

// .ubii.dataStructure.Quaternion quaternion = 9;
inline bool TopicDataRecord::has_quaternion() const {
  return type_case() == kQuaternion;
}
inline void TopicDataRecord::set_has_quaternion() {
  _oneof_case_[0] = kQuaternion;
}
inline const ::ubii::dataStructure::Quaternion& TopicDataRecord::_internal_quaternion() const {
  return *type_.quaternion_;
}
inline ::ubii::dataStructure::Quaternion* TopicDataRecord::release_quaternion() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.quaternion)
  if (has_quaternion()) {
    clear_has_type();
      ::ubii::dataStructure::Quaternion* temp = type_.quaternion_;
    type_.quaternion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Quaternion& TopicDataRecord::quaternion() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.quaternion)
  return has_quaternion()
      ? *type_.quaternion_
      : *reinterpret_cast< ::ubii::dataStructure::Quaternion*>(&::ubii::dataStructure::_Quaternion_default_instance_);
}
inline ::ubii::dataStructure::Quaternion* TopicDataRecord::mutable_quaternion() {
  if (!has_quaternion()) {
    clear_type();
    set_has_quaternion();
    type_.quaternion_ = CreateMaybeMessage< ::ubii::dataStructure::Quaternion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.quaternion)
  return type_.quaternion_;
}

// .ubii.dataStructure.Quaternion quaternion_list = 38;
inline bool TopicDataRecord::has_quaternion_list() const {
  return type_case() == kQuaternionList;
}
inline void TopicDataRecord::set_has_quaternion_list() {
  _oneof_case_[0] = kQuaternionList;
}
inline const ::ubii::dataStructure::Quaternion& TopicDataRecord::_internal_quaternion_list() const {
  return *type_.quaternion_list_;
}
inline ::ubii::dataStructure::Quaternion* TopicDataRecord::release_quaternion_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.quaternion_list)
  if (has_quaternion_list()) {
    clear_has_type();
      ::ubii::dataStructure::Quaternion* temp = type_.quaternion_list_;
    type_.quaternion_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Quaternion& TopicDataRecord::quaternion_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.quaternion_list)
  return has_quaternion_list()
      ? *type_.quaternion_list_
      : *reinterpret_cast< ::ubii::dataStructure::Quaternion*>(&::ubii::dataStructure::_Quaternion_default_instance_);
}
inline ::ubii::dataStructure::Quaternion* TopicDataRecord::mutable_quaternion_list() {
  if (!has_quaternion_list()) {
    clear_type();
    set_has_quaternion_list();
    type_.quaternion_list_ = CreateMaybeMessage< ::ubii::dataStructure::Quaternion >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.quaternion_list)
  return type_.quaternion_list_;
}

// .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
inline bool TopicDataRecord::has_matrix3x2() const {
  return type_case() == kMatrix3X2;
}
inline void TopicDataRecord::set_has_matrix3x2() {
  _oneof_case_[0] = kMatrix3X2;
}
inline const ::ubii::dataStructure::Matrix3x2& TopicDataRecord::_internal_matrix3x2() const {
  return *type_.matrix3x2_;
}
inline ::ubii::dataStructure::Matrix3x2* TopicDataRecord::release_matrix3x2() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.matrix3x2)
  if (has_matrix3x2()) {
    clear_has_type();
      ::ubii::dataStructure::Matrix3x2* temp = type_.matrix3x2_;
    type_.matrix3x2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Matrix3x2& TopicDataRecord::matrix3x2() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.matrix3x2)
  return has_matrix3x2()
      ? *type_.matrix3x2_
      : *reinterpret_cast< ::ubii::dataStructure::Matrix3x2*>(&::ubii::dataStructure::_Matrix3x2_default_instance_);
}
inline ::ubii::dataStructure::Matrix3x2* TopicDataRecord::mutable_matrix3x2() {
  if (!has_matrix3x2()) {
    clear_type();
    set_has_matrix3x2();
    type_.matrix3x2_ = CreateMaybeMessage< ::ubii::dataStructure::Matrix3x2 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.matrix3x2)
  return type_.matrix3x2_;
}

// .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
inline bool TopicDataRecord::has_matrix4x4() const {
  return type_case() == kMatrix4X4;
}
inline void TopicDataRecord::set_has_matrix4x4() {
  _oneof_case_[0] = kMatrix4X4;
}
inline const ::ubii::dataStructure::Matrix4x4& TopicDataRecord::_internal_matrix4x4() const {
  return *type_.matrix4x4_;
}
inline ::ubii::dataStructure::Matrix4x4* TopicDataRecord::release_matrix4x4() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.matrix4x4)
  if (has_matrix4x4()) {
    clear_has_type();
      ::ubii::dataStructure::Matrix4x4* temp = type_.matrix4x4_;
    type_.matrix4x4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Matrix4x4& TopicDataRecord::matrix4x4() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.matrix4x4)
  return has_matrix4x4()
      ? *type_.matrix4x4_
      : *reinterpret_cast< ::ubii::dataStructure::Matrix4x4*>(&::ubii::dataStructure::_Matrix4x4_default_instance_);
}
inline ::ubii::dataStructure::Matrix4x4* TopicDataRecord::mutable_matrix4x4() {
  if (!has_matrix4x4()) {
    clear_type();
    set_has_matrix4x4();
    type_.matrix4x4_ = CreateMaybeMessage< ::ubii::dataStructure::Matrix4x4 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.matrix4x4)
  return type_.matrix4x4_;
}

// .ubii.dataStructure.Color color = 12;
inline bool TopicDataRecord::has_color() const {
  return type_case() == kColor;
}
inline void TopicDataRecord::set_has_color() {
  _oneof_case_[0] = kColor;
}
inline const ::ubii::dataStructure::Color& TopicDataRecord::_internal_color() const {
  return *type_.color_;
}
inline ::ubii::dataStructure::Color* TopicDataRecord::release_color() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.color)
  if (has_color()) {
    clear_has_type();
      ::ubii::dataStructure::Color* temp = type_.color_;
    type_.color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Color& TopicDataRecord::color() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.color)
  return has_color()
      ? *type_.color_
      : *reinterpret_cast< ::ubii::dataStructure::Color*>(&::ubii::dataStructure::_Color_default_instance_);
}
inline ::ubii::dataStructure::Color* TopicDataRecord::mutable_color() {
  if (!has_color()) {
    clear_type();
    set_has_color();
    type_.color_ = CreateMaybeMessage< ::ubii::dataStructure::Color >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.color)
  return type_.color_;
}

// .ubii.dataStructure.TouchEvent touch_event = 13;
inline bool TopicDataRecord::has_touch_event() const {
  return type_case() == kTouchEvent;
}
inline void TopicDataRecord::set_has_touch_event() {
  _oneof_case_[0] = kTouchEvent;
}
inline const ::ubii::dataStructure::TouchEvent& TopicDataRecord::_internal_touch_event() const {
  return *type_.touch_event_;
}
inline ::ubii::dataStructure::TouchEvent* TopicDataRecord::release_touch_event() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.touch_event)
  if (has_touch_event()) {
    clear_has_type();
      ::ubii::dataStructure::TouchEvent* temp = type_.touch_event_;
    type_.touch_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::TouchEvent& TopicDataRecord::touch_event() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.touch_event)
  return has_touch_event()
      ? *type_.touch_event_
      : *reinterpret_cast< ::ubii::dataStructure::TouchEvent*>(&::ubii::dataStructure::_TouchEvent_default_instance_);
}
inline ::ubii::dataStructure::TouchEvent* TopicDataRecord::mutable_touch_event() {
  if (!has_touch_event()) {
    clear_type();
    set_has_touch_event();
    type_.touch_event_ = CreateMaybeMessage< ::ubii::dataStructure::TouchEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.touch_event)
  return type_.touch_event_;
}

// .ubii.dataStructure.TouchEventList touch_event_list = 34;
inline bool TopicDataRecord::has_touch_event_list() const {
  return type_case() == kTouchEventList;
}
inline void TopicDataRecord::set_has_touch_event_list() {
  _oneof_case_[0] = kTouchEventList;
}
inline const ::ubii::dataStructure::TouchEventList& TopicDataRecord::_internal_touch_event_list() const {
  return *type_.touch_event_list_;
}
inline ::ubii::dataStructure::TouchEventList* TopicDataRecord::release_touch_event_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.touch_event_list)
  if (has_touch_event_list()) {
    clear_has_type();
      ::ubii::dataStructure::TouchEventList* temp = type_.touch_event_list_;
    type_.touch_event_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::TouchEventList& TopicDataRecord::touch_event_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.touch_event_list)
  return has_touch_event_list()
      ? *type_.touch_event_list_
      : *reinterpret_cast< ::ubii::dataStructure::TouchEventList*>(&::ubii::dataStructure::_TouchEventList_default_instance_);
}
inline ::ubii::dataStructure::TouchEventList* TopicDataRecord::mutable_touch_event_list() {
  if (!has_touch_event_list()) {
    clear_type();
    set_has_touch_event_list();
    type_.touch_event_list_ = CreateMaybeMessage< ::ubii::dataStructure::TouchEventList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.touch_event_list)
  return type_.touch_event_list_;
}

// .ubii.dataStructure.KeyEvent key_event = 14;
inline bool TopicDataRecord::has_key_event() const {
  return type_case() == kKeyEvent;
}
inline void TopicDataRecord::set_has_key_event() {
  _oneof_case_[0] = kKeyEvent;
}
inline const ::ubii::dataStructure::KeyEvent& TopicDataRecord::_internal_key_event() const {
  return *type_.key_event_;
}
inline ::ubii::dataStructure::KeyEvent* TopicDataRecord::release_key_event() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.key_event)
  if (has_key_event()) {
    clear_has_type();
      ::ubii::dataStructure::KeyEvent* temp = type_.key_event_;
    type_.key_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::KeyEvent& TopicDataRecord::key_event() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.key_event)
  return has_key_event()
      ? *type_.key_event_
      : *reinterpret_cast< ::ubii::dataStructure::KeyEvent*>(&::ubii::dataStructure::_KeyEvent_default_instance_);
}
inline ::ubii::dataStructure::KeyEvent* TopicDataRecord::mutable_key_event() {
  if (!has_key_event()) {
    clear_type();
    set_has_key_event();
    type_.key_event_ = CreateMaybeMessage< ::ubii::dataStructure::KeyEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.key_event)
  return type_.key_event_;
}

// .ubii.dataStructure.MouseEvent mouse_event = 15;
inline bool TopicDataRecord::has_mouse_event() const {
  return type_case() == kMouseEvent;
}
inline void TopicDataRecord::set_has_mouse_event() {
  _oneof_case_[0] = kMouseEvent;
}
inline const ::ubii::dataStructure::MouseEvent& TopicDataRecord::_internal_mouse_event() const {
  return *type_.mouse_event_;
}
inline ::ubii::dataStructure::MouseEvent* TopicDataRecord::release_mouse_event() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.mouse_event)
  if (has_mouse_event()) {
    clear_has_type();
      ::ubii::dataStructure::MouseEvent* temp = type_.mouse_event_;
    type_.mouse_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::MouseEvent& TopicDataRecord::mouse_event() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.mouse_event)
  return has_mouse_event()
      ? *type_.mouse_event_
      : *reinterpret_cast< ::ubii::dataStructure::MouseEvent*>(&::ubii::dataStructure::_MouseEvent_default_instance_);
}
inline ::ubii::dataStructure::MouseEvent* TopicDataRecord::mutable_mouse_event() {
  if (!has_mouse_event()) {
    clear_type();
    set_has_mouse_event();
    type_.mouse_event_ = CreateMaybeMessage< ::ubii::dataStructure::MouseEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.mouse_event)
  return type_.mouse_event_;
}

// .ubii.dataStructure.MyoEvent myo_event = 16;
inline bool TopicDataRecord::has_myo_event() const {
  return type_case() == kMyoEvent;
}
inline void TopicDataRecord::set_has_myo_event() {
  _oneof_case_[0] = kMyoEvent;
}
inline const ::ubii::dataStructure::MyoEvent& TopicDataRecord::_internal_myo_event() const {
  return *type_.myo_event_;
}
inline ::ubii::dataStructure::MyoEvent* TopicDataRecord::release_myo_event() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.myo_event)
  if (has_myo_event()) {
    clear_has_type();
      ::ubii::dataStructure::MyoEvent* temp = type_.myo_event_;
    type_.myo_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::MyoEvent& TopicDataRecord::myo_event() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.myo_event)
  return has_myo_event()
      ? *type_.myo_event_
      : *reinterpret_cast< ::ubii::dataStructure::MyoEvent*>(&::ubii::dataStructure::_MyoEvent_default_instance_);
}
inline ::ubii::dataStructure::MyoEvent* TopicDataRecord::mutable_myo_event() {
  if (!has_myo_event()) {
    clear_type();
    set_has_myo_event();
    type_.myo_event_ = CreateMaybeMessage< ::ubii::dataStructure::MyoEvent >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.myo_event)
  return type_.myo_event_;
}

// .ubii.dataStructure.Pose2D pose2D = 17;
inline bool TopicDataRecord::has_pose2d() const {
  return type_case() == kPose2D;
}
inline void TopicDataRecord::set_has_pose2d() {
  _oneof_case_[0] = kPose2D;
}
inline const ::ubii::dataStructure::Pose2D& TopicDataRecord::_internal_pose2d() const {
  return *type_.pose2d_;
}
inline ::ubii::dataStructure::Pose2D* TopicDataRecord::release_pose2d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.pose2D)
  if (has_pose2d()) {
    clear_has_type();
      ::ubii::dataStructure::Pose2D* temp = type_.pose2d_;
    type_.pose2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Pose2D& TopicDataRecord::pose2d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.pose2D)
  return has_pose2d()
      ? *type_.pose2d_
      : *reinterpret_cast< ::ubii::dataStructure::Pose2D*>(&::ubii::dataStructure::_Pose2D_default_instance_);
}
inline ::ubii::dataStructure::Pose2D* TopicDataRecord::mutable_pose2d() {
  if (!has_pose2d()) {
    clear_type();
    set_has_pose2d();
    type_.pose2d_ = CreateMaybeMessage< ::ubii::dataStructure::Pose2D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.pose2D)
  return type_.pose2d_;
}

// .ubii.dataStructure.Pose3D pose3D = 18;
inline bool TopicDataRecord::has_pose3d() const {
  return type_case() == kPose3D;
}
inline void TopicDataRecord::set_has_pose3d() {
  _oneof_case_[0] = kPose3D;
}
inline const ::ubii::dataStructure::Pose3D& TopicDataRecord::_internal_pose3d() const {
  return *type_.pose3d_;
}
inline ::ubii::dataStructure::Pose3D* TopicDataRecord::release_pose3d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.pose3D)
  if (has_pose3d()) {
    clear_has_type();
      ::ubii::dataStructure::Pose3D* temp = type_.pose3d_;
    type_.pose3d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Pose3D& TopicDataRecord::pose3d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.pose3D)
  return has_pose3d()
      ? *type_.pose3d_
      : *reinterpret_cast< ::ubii::dataStructure::Pose3D*>(&::ubii::dataStructure::_Pose3D_default_instance_);
}
inline ::ubii::dataStructure::Pose3D* TopicDataRecord::mutable_pose3d() {
  if (!has_pose3d()) {
    clear_type();
    set_has_pose3d();
    type_.pose3d_ = CreateMaybeMessage< ::ubii::dataStructure::Pose3D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.pose3D)
  return type_.pose3d_;
}

// .ubii.dataStructure.Object2D object2D = 19;
inline bool TopicDataRecord::has_object2d() const {
  return type_case() == kObject2D;
}
inline void TopicDataRecord::set_has_object2d() {
  _oneof_case_[0] = kObject2D;
}
inline const ::ubii::dataStructure::Object2D& TopicDataRecord::_internal_object2d() const {
  return *type_.object2d_;
}
inline ::ubii::dataStructure::Object2D* TopicDataRecord::release_object2d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.object2D)
  if (has_object2d()) {
    clear_has_type();
      ::ubii::dataStructure::Object2D* temp = type_.object2d_;
    type_.object2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Object2D& TopicDataRecord::object2d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.object2D)
  return has_object2d()
      ? *type_.object2d_
      : *reinterpret_cast< ::ubii::dataStructure::Object2D*>(&::ubii::dataStructure::_Object2D_default_instance_);
}
inline ::ubii::dataStructure::Object2D* TopicDataRecord::mutable_object2d() {
  if (!has_object2d()) {
    clear_type();
    set_has_object2d();
    type_.object2d_ = CreateMaybeMessage< ::ubii::dataStructure::Object2D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.object2D)
  return type_.object2d_;
}

// .ubii.dataStructure.Object3D object3D = 20;
inline bool TopicDataRecord::has_object3d() const {
  return type_case() == kObject3D;
}
inline void TopicDataRecord::set_has_object3d() {
  _oneof_case_[0] = kObject3D;
}
inline const ::ubii::dataStructure::Object3D& TopicDataRecord::_internal_object3d() const {
  return *type_.object3d_;
}
inline ::ubii::dataStructure::Object3D* TopicDataRecord::release_object3d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.object3D)
  if (has_object3d()) {
    clear_has_type();
      ::ubii::dataStructure::Object3D* temp = type_.object3d_;
    type_.object3d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Object3D& TopicDataRecord::object3d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.object3D)
  return has_object3d()
      ? *type_.object3d_
      : *reinterpret_cast< ::ubii::dataStructure::Object3D*>(&::ubii::dataStructure::_Object3D_default_instance_);
}
inline ::ubii::dataStructure::Object3D* TopicDataRecord::mutable_object3d() {
  if (!has_object3d()) {
    clear_type();
    set_has_object3d();
    type_.object3d_ = CreateMaybeMessage< ::ubii::dataStructure::Object3D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.object3D)
  return type_.object3d_;
}

// .ubii.dataStructure.Object2DList object2D_list = 21;
inline bool TopicDataRecord::has_object2d_list() const {
  return type_case() == kObject2DList;
}
inline void TopicDataRecord::set_has_object2d_list() {
  _oneof_case_[0] = kObject2DList;
}
inline const ::ubii::dataStructure::Object2DList& TopicDataRecord::_internal_object2d_list() const {
  return *type_.object2d_list_;
}
inline ::ubii::dataStructure::Object2DList* TopicDataRecord::release_object2d_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.object2D_list)
  if (has_object2d_list()) {
    clear_has_type();
      ::ubii::dataStructure::Object2DList* temp = type_.object2d_list_;
    type_.object2d_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Object2DList& TopicDataRecord::object2d_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.object2D_list)
  return has_object2d_list()
      ? *type_.object2d_list_
      : *reinterpret_cast< ::ubii::dataStructure::Object2DList*>(&::ubii::dataStructure::_Object2DList_default_instance_);
}
inline ::ubii::dataStructure::Object2DList* TopicDataRecord::mutable_object2d_list() {
  if (!has_object2d_list()) {
    clear_type();
    set_has_object2d_list();
    type_.object2d_list_ = CreateMaybeMessage< ::ubii::dataStructure::Object2DList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.object2D_list)
  return type_.object2d_list_;
}

// .ubii.dataStructure.Object3DList object3D_list = 22;
inline bool TopicDataRecord::has_object3d_list() const {
  return type_case() == kObject3DList;
}
inline void TopicDataRecord::set_has_object3d_list() {
  _oneof_case_[0] = kObject3DList;
}
inline const ::ubii::dataStructure::Object3DList& TopicDataRecord::_internal_object3d_list() const {
  return *type_.object3d_list_;
}
inline ::ubii::dataStructure::Object3DList* TopicDataRecord::release_object3d_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.object3D_list)
  if (has_object3d_list()) {
    clear_has_type();
      ::ubii::dataStructure::Object3DList* temp = type_.object3d_list_;
    type_.object3d_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Object3DList& TopicDataRecord::object3d_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.object3D_list)
  return has_object3d_list()
      ? *type_.object3d_list_
      : *reinterpret_cast< ::ubii::dataStructure::Object3DList*>(&::ubii::dataStructure::_Object3DList_default_instance_);
}
inline ::ubii::dataStructure::Object3DList* TopicDataRecord::mutable_object3d_list() {
  if (!has_object3d_list()) {
    clear_type();
    set_has_object3d_list();
    type_.object3d_list_ = CreateMaybeMessage< ::ubii::dataStructure::Object3DList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.object3D_list)
  return type_.object3d_list_;
}

// .ubii.dataStructure.Int32List int32_list = 25;
inline bool TopicDataRecord::has_int32_list() const {
  return type_case() == kInt32List;
}
inline void TopicDataRecord::set_has_int32_list() {
  _oneof_case_[0] = kInt32List;
}
inline const ::ubii::dataStructure::Int32List& TopicDataRecord::_internal_int32_list() const {
  return *type_.int32_list_;
}
inline ::ubii::dataStructure::Int32List* TopicDataRecord::release_int32_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.int32_list)
  if (has_int32_list()) {
    clear_has_type();
      ::ubii::dataStructure::Int32List* temp = type_.int32_list_;
    type_.int32_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Int32List& TopicDataRecord::int32_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.int32_list)
  return has_int32_list()
      ? *type_.int32_list_
      : *reinterpret_cast< ::ubii::dataStructure::Int32List*>(&::ubii::dataStructure::_Int32List_default_instance_);
}
inline ::ubii::dataStructure::Int32List* TopicDataRecord::mutable_int32_list() {
  if (!has_int32_list()) {
    clear_type();
    set_has_int32_list();
    type_.int32_list_ = CreateMaybeMessage< ::ubii::dataStructure::Int32List >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.int32_list)
  return type_.int32_list_;
}

// .ubii.dataStructure.FloatList float_list = 26;
inline bool TopicDataRecord::has_float_list() const {
  return type_case() == kFloatList;
}
inline void TopicDataRecord::set_has_float_list() {
  _oneof_case_[0] = kFloatList;
}
inline const ::ubii::dataStructure::FloatList& TopicDataRecord::_internal_float_list() const {
  return *type_.float_list_;
}
inline ::ubii::dataStructure::FloatList* TopicDataRecord::release_float_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.float_list)
  if (has_float_list()) {
    clear_has_type();
      ::ubii::dataStructure::FloatList* temp = type_.float_list_;
    type_.float_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::FloatList& TopicDataRecord::float_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.float_list)
  return has_float_list()
      ? *type_.float_list_
      : *reinterpret_cast< ::ubii::dataStructure::FloatList*>(&::ubii::dataStructure::_FloatList_default_instance_);
}
inline ::ubii::dataStructure::FloatList* TopicDataRecord::mutable_float_list() {
  if (!has_float_list()) {
    clear_type();
    set_has_float_list();
    type_.float_list_ = CreateMaybeMessage< ::ubii::dataStructure::FloatList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.float_list)
  return type_.float_list_;
}

// .ubii.dataStructure.DoubleList double_list = 27;
inline bool TopicDataRecord::has_double_list() const {
  return type_case() == kDoubleList;
}
inline void TopicDataRecord::set_has_double_list() {
  _oneof_case_[0] = kDoubleList;
}
inline const ::ubii::dataStructure::DoubleList& TopicDataRecord::_internal_double_list() const {
  return *type_.double_list_;
}
inline ::ubii::dataStructure::DoubleList* TopicDataRecord::release_double_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.double_list)
  if (has_double_list()) {
    clear_has_type();
      ::ubii::dataStructure::DoubleList* temp = type_.double_list_;
    type_.double_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::DoubleList& TopicDataRecord::double_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.double_list)
  return has_double_list()
      ? *type_.double_list_
      : *reinterpret_cast< ::ubii::dataStructure::DoubleList*>(&::ubii::dataStructure::_DoubleList_default_instance_);
}
inline ::ubii::dataStructure::DoubleList* TopicDataRecord::mutable_double_list() {
  if (!has_double_list()) {
    clear_type();
    set_has_double_list();
    type_.double_list_ = CreateMaybeMessage< ::ubii::dataStructure::DoubleList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.double_list)
  return type_.double_list_;
}

// .ubii.dataStructure.StringList string_list = 28;
inline bool TopicDataRecord::has_string_list() const {
  return type_case() == kStringList;
}
inline void TopicDataRecord::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
inline const ::ubii::dataStructure::StringList& TopicDataRecord::_internal_string_list() const {
  return *type_.string_list_;
}
inline ::ubii::dataStructure::StringList* TopicDataRecord::release_string_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.string_list)
  if (has_string_list()) {
    clear_has_type();
      ::ubii::dataStructure::StringList* temp = type_.string_list_;
    type_.string_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::StringList& TopicDataRecord::string_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.string_list)
  return has_string_list()
      ? *type_.string_list_
      : *reinterpret_cast< ::ubii::dataStructure::StringList*>(&::ubii::dataStructure::_StringList_default_instance_);
}
inline ::ubii::dataStructure::StringList* TopicDataRecord::mutable_string_list() {
  if (!has_string_list()) {
    clear_type();
    set_has_string_list();
    type_.string_list_ = CreateMaybeMessage< ::ubii::dataStructure::StringList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.string_list)
  return type_.string_list_;
}

// .ubii.dataStructure.BoolList bool_list = 29;
inline bool TopicDataRecord::has_bool_list() const {
  return type_case() == kBoolList;
}
inline void TopicDataRecord::set_has_bool_list() {
  _oneof_case_[0] = kBoolList;
}
inline const ::ubii::dataStructure::BoolList& TopicDataRecord::_internal_bool_list() const {
  return *type_.bool_list_;
}
inline ::ubii::dataStructure::BoolList* TopicDataRecord::release_bool_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.bool_list)
  if (has_bool_list()) {
    clear_has_type();
      ::ubii::dataStructure::BoolList* temp = type_.bool_list_;
    type_.bool_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::BoolList& TopicDataRecord::bool_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.bool_list)
  return has_bool_list()
      ? *type_.bool_list_
      : *reinterpret_cast< ::ubii::dataStructure::BoolList*>(&::ubii::dataStructure::_BoolList_default_instance_);
}
inline ::ubii::dataStructure::BoolList* TopicDataRecord::mutable_bool_list() {
  if (!has_bool_list()) {
    clear_type();
    set_has_bool_list();
    type_.bool_list_ = CreateMaybeMessage< ::ubii::dataStructure::BoolList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.bool_list)
  return type_.bool_list_;
}

// .ubii.dataStructure.Image2D image2D = 30;
inline bool TopicDataRecord::has_image2d() const {
  return type_case() == kImage2D;
}
inline void TopicDataRecord::set_has_image2d() {
  _oneof_case_[0] = kImage2D;
}
inline const ::ubii::dataStructure::Image2D& TopicDataRecord::_internal_image2d() const {
  return *type_.image2d_;
}
inline ::ubii::dataStructure::Image2D* TopicDataRecord::release_image2d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.image2D)
  if (has_image2d()) {
    clear_has_type();
      ::ubii::dataStructure::Image2D* temp = type_.image2d_;
    type_.image2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Image2D& TopicDataRecord::image2d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.image2D)
  return has_image2d()
      ? *type_.image2d_
      : *reinterpret_cast< ::ubii::dataStructure::Image2D*>(&::ubii::dataStructure::_Image2D_default_instance_);
}
inline ::ubii::dataStructure::Image2D* TopicDataRecord::mutable_image2d() {
  if (!has_image2d()) {
    clear_type();
    set_has_image2d();
    type_.image2d_ = CreateMaybeMessage< ::ubii::dataStructure::Image2D >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.image2D)
  return type_.image2d_;
}

// .ubii.dataStructure.Image2DList image2D_list = 31;
inline bool TopicDataRecord::has_image2d_list() const {
  return type_case() == kImage2DList;
}
inline void TopicDataRecord::set_has_image2d_list() {
  _oneof_case_[0] = kImage2DList;
}
inline const ::ubii::dataStructure::Image2DList& TopicDataRecord::_internal_image2d_list() const {
  return *type_.image2d_list_;
}
inline ::ubii::dataStructure::Image2DList* TopicDataRecord::release_image2d_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.image2D_list)
  if (has_image2d_list()) {
    clear_has_type();
      ::ubii::dataStructure::Image2DList* temp = type_.image2d_list_;
    type_.image2d_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Image2DList& TopicDataRecord::image2d_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.image2D_list)
  return has_image2d_list()
      ? *type_.image2d_list_
      : *reinterpret_cast< ::ubii::dataStructure::Image2DList*>(&::ubii::dataStructure::_Image2DList_default_instance_);
}
inline ::ubii::dataStructure::Image2DList* TopicDataRecord::mutable_image2d_list() {
  if (!has_image2d_list()) {
    clear_type();
    set_has_image2d_list();
    type_.image2d_list_ = CreateMaybeMessage< ::ubii::dataStructure::Image2DList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.image2D_list)
  return type_.image2d_list_;
}

// .ubii.sessions.Session session = 32;
inline bool TopicDataRecord::has_session() const {
  return type_case() == kSession;
}
inline void TopicDataRecord::set_has_session() {
  _oneof_case_[0] = kSession;
}
inline const ::ubii::sessions::Session& TopicDataRecord::_internal_session() const {
  return *type_.session_;
}
inline ::ubii::sessions::Session* TopicDataRecord::release_session() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.session)
  if (has_session()) {
    clear_has_type();
      ::ubii::sessions::Session* temp = type_.session_;
    type_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::sessions::Session& TopicDataRecord::session() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.session)
  return has_session()
      ? *type_.session_
      : *reinterpret_cast< ::ubii::sessions::Session*>(&::ubii::sessions::_Session_default_instance_);
}
inline ::ubii::sessions::Session* TopicDataRecord::mutable_session() {
  if (!has_session()) {
    clear_type();
    set_has_session();
    type_.session_ = CreateMaybeMessage< ::ubii::sessions::Session >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.session)
  return type_.session_;
}

inline bool TopicDataRecord::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TopicDataRecord::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline TopicDataRecord::TypeCase TopicDataRecord::type_case() const {
  return TopicDataRecord::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TopicDataRecordList

// repeated .ubii.topicData.TopicDataRecord elements = 1;
inline int TopicDataRecordList::elements_size() const {
  return elements_.size();
}
inline void TopicDataRecordList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::topicData::TopicDataRecord* TopicDataRecordList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
TopicDataRecordList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.topicData.TopicDataRecordList.elements)
  return &elements_;
}
inline const ::ubii::topicData::TopicDataRecord& TopicDataRecordList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Get(index);
}
inline ::ubii::topicData::TopicDataRecord* TopicDataRecordList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
TopicDataRecordList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.topicData.TopicDataRecordList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace topicData
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto
