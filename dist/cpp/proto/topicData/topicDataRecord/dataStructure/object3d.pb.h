// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/dataStructure/object3d.proto

#ifndef PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto
#define PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/dataStructure/pose.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto 

namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto
namespace ubii {
namespace dataStructure {
class Object3D;
class Object3DDefaultTypeInternal;
extern Object3DDefaultTypeInternal _Object3D_default_instance_;
}  // namespace dataStructure
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::dataStructure::Object3D* Arena::CreateMaybeMessage<::ubii::dataStructure::Object3D>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace dataStructure {

// ===================================================================

class Object3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.dataStructure.Object3D) */ {
 public:
  Object3D();
  virtual ~Object3D();

  Object3D(const Object3D& from);

  inline Object3D& operator=(const Object3D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Object3D(Object3D&& from) noexcept
    : Object3D() {
    *this = ::std::move(from);
  }

  inline Object3D& operator=(Object3D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Object3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Object3D* internal_default_instance() {
    return reinterpret_cast<const Object3D*>(
               &_Object3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Object3D* other);
  friend void swap(Object3D& a, Object3D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Object3D* New() const final {
    return CreateMaybeMessage<Object3D>(NULL);
  }

  Object3D* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Object3D>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Object3D& from);
  void MergeFrom(const Object3D& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Object3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string id = 1;
  void clear_id();
  static const int kIdFieldNumber = 1;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .ubii.dataStructure.Pose pose = 2;
  bool has_pose() const;
  void clear_pose();
  static const int kPoseFieldNumber = 2;
  private:
  const ::ubii::dataStructure::Pose& _internal_pose() const;
  public:
  const ::ubii::dataStructure::Pose& pose() const;
  ::ubii::dataStructure::Pose* release_pose();
  ::ubii::dataStructure::Pose* mutable_pose();
  void set_allocated_pose(::ubii::dataStructure::Pose* pose);

  // @@protoc_insertion_point(class_scope:ubii.dataStructure.Object3D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::ubii::dataStructure::Pose* pose_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Object3D

// string id = 1;
inline void Object3D::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Object3D::id() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Object3D.id)
  return id_.GetNoArena();
}
inline void Object3D::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.dataStructure.Object3D.id)
}
#if LANG_CXX11
inline void Object3D::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.dataStructure.Object3D.id)
}
#endif
inline void Object3D::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.dataStructure.Object3D.id)
}
inline void Object3D::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.dataStructure.Object3D.id)
}
inline ::std::string* Object3D::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Object3D.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Object3D::release_id() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Object3D.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Object3D::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Object3D.id)
}

// .ubii.dataStructure.Pose pose = 2;
inline bool Object3D::has_pose() const {
  return this != internal_default_instance() && pose_ != NULL;
}
inline const ::ubii::dataStructure::Pose& Object3D::_internal_pose() const {
  return *pose_;
}
inline const ::ubii::dataStructure::Pose& Object3D::pose() const {
  const ::ubii::dataStructure::Pose* p = pose_;
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Object3D.pose)
  return p != NULL ? *p : *reinterpret_cast<const ::ubii::dataStructure::Pose*>(
      &::ubii::dataStructure::_Pose_default_instance_);
}
inline ::ubii::dataStructure::Pose* Object3D::release_pose() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Object3D.pose)
  
  ::ubii::dataStructure::Pose* temp = pose_;
  pose_ = NULL;
  return temp;
}
inline ::ubii::dataStructure::Pose* Object3D::mutable_pose() {
  
  if (pose_ == NULL) {
    auto* p = CreateMaybeMessage<::ubii::dataStructure::Pose>(GetArenaNoVirtual());
    pose_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Object3D.pose)
  return pose_;
}
inline void Object3D::set_allocated_pose(::ubii::dataStructure::Pose* pose) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(pose_);
  }
  if (pose) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      pose = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, pose, submessage_arena);
    }
    
  } else {
    
  }
  pose_ = pose;
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Object3D.pose)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto
