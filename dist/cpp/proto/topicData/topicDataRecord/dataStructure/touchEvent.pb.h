// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/dataStructure/touchEvent.proto

#ifndef PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto
#define PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/dataStructure/buttonEventType.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/vector2.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto 

namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto
namespace ubii {
namespace dataStructure {
class TouchEvent;
class TouchEventDefaultTypeInternal;
extern TouchEventDefaultTypeInternal _TouchEvent_default_instance_;
class TouchEventList;
class TouchEventListDefaultTypeInternal;
extern TouchEventListDefaultTypeInternal _TouchEventList_default_instance_;
}  // namespace dataStructure
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::dataStructure::TouchEvent* Arena::CreateMaybeMessage<::ubii::dataStructure::TouchEvent>(Arena*);
template<> ::ubii::dataStructure::TouchEventList* Arena::CreateMaybeMessage<::ubii::dataStructure::TouchEventList>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace dataStructure {

enum TouchEvent_TouchEventType {
  TouchEvent_TouchEventType_TOUCH_START = 0,
  TouchEvent_TouchEventType_TOUCH_MOVE = 1,
  TouchEvent_TouchEventType_TOUCH_END = 2,
  TouchEvent_TouchEventType_TouchEvent_TouchEventType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  TouchEvent_TouchEventType_TouchEvent_TouchEventType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool TouchEvent_TouchEventType_IsValid(int value);
const TouchEvent_TouchEventType TouchEvent_TouchEventType_TouchEventType_MIN = TouchEvent_TouchEventType_TOUCH_START;
const TouchEvent_TouchEventType TouchEvent_TouchEventType_TouchEventType_MAX = TouchEvent_TouchEventType_TOUCH_END;
const int TouchEvent_TouchEventType_TouchEventType_ARRAYSIZE = TouchEvent_TouchEventType_TouchEventType_MAX + 1;

const ::google::protobuf::EnumDescriptor* TouchEvent_TouchEventType_descriptor();
inline const ::std::string& TouchEvent_TouchEventType_Name(TouchEvent_TouchEventType value) {
  return ::google::protobuf::internal::NameOfEnum(
    TouchEvent_TouchEventType_descriptor(), value);
}
inline bool TouchEvent_TouchEventType_Parse(
    const ::std::string& name, TouchEvent_TouchEventType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TouchEvent_TouchEventType>(
    TouchEvent_TouchEventType_descriptor(), name, value);
}
// ===================================================================

class TouchEvent : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.dataStructure.TouchEvent) */ {
 public:
  TouchEvent();
  virtual ~TouchEvent();

  TouchEvent(const TouchEvent& from);

  inline TouchEvent& operator=(const TouchEvent& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TouchEvent(TouchEvent&& from) noexcept
    : TouchEvent() {
    *this = ::std::move(from);
  }

  inline TouchEvent& operator=(TouchEvent&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TouchEvent& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TouchEvent* internal_default_instance() {
    return reinterpret_cast<const TouchEvent*>(
               &_TouchEvent_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TouchEvent* other);
  friend void swap(TouchEvent& a, TouchEvent& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TouchEvent* New() const final {
    return CreateMaybeMessage<TouchEvent>(NULL);
  }

  TouchEvent* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TouchEvent>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TouchEvent& from);
  void MergeFrom(const TouchEvent& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TouchEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TouchEvent_TouchEventType TouchEventType;
  static const TouchEventType TOUCH_START =
    TouchEvent_TouchEventType_TOUCH_START;
  static const TouchEventType TOUCH_MOVE =
    TouchEvent_TouchEventType_TOUCH_MOVE;
  static const TouchEventType TOUCH_END =
    TouchEvent_TouchEventType_TOUCH_END;
  static inline bool TouchEventType_IsValid(int value) {
    return TouchEvent_TouchEventType_IsValid(value);
  }
  static const TouchEventType TouchEventType_MIN =
    TouchEvent_TouchEventType_TouchEventType_MIN;
  static const TouchEventType TouchEventType_MAX =
    TouchEvent_TouchEventType_TouchEventType_MAX;
  static const int TouchEventType_ARRAYSIZE =
    TouchEvent_TouchEventType_TouchEventType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  TouchEventType_descriptor() {
    return TouchEvent_TouchEventType_descriptor();
  }
  static inline const ::std::string& TouchEventType_Name(TouchEventType value) {
    return TouchEvent_TouchEventType_Name(value);
  }
  static inline bool TouchEventType_Parse(const ::std::string& name,
      TouchEventType* value) {
    return TouchEvent_TouchEventType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // string id = 3;
  void clear_id();
  static const int kIdFieldNumber = 3;
  const ::std::string& id() const;
  void set_id(const ::std::string& value);
  #if LANG_CXX11
  void set_id(::std::string&& value);
  #endif
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  ::std::string* mutable_id();
  ::std::string* release_id();
  void set_allocated_id(::std::string* id);

  // .ubii.dataStructure.Vector2 position = 2;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 2;
  private:
  const ::ubii::dataStructure::Vector2& _internal_position() const;
  public:
  const ::ubii::dataStructure::Vector2& position() const;
  ::ubii::dataStructure::Vector2* release_position();
  ::ubii::dataStructure::Vector2* mutable_position();
  void set_allocated_position(::ubii::dataStructure::Vector2* position);

  // .ubii.dataStructure.TouchEvent.TouchEventType type = 1;
  void clear_type();
  static const int kTypeFieldNumber = 1;
  ::ubii::dataStructure::TouchEvent_TouchEventType type() const;
  void set_type(::ubii::dataStructure::TouchEvent_TouchEventType value);

  // float force = 4;
  void clear_force();
  static const int kForceFieldNumber = 4;
  float force() const;
  void set_force(float value);

  // @@protoc_insertion_point(class_scope:ubii.dataStructure.TouchEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr id_;
  ::ubii::dataStructure::Vector2* position_;
  int type_;
  float force_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class TouchEventList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.dataStructure.TouchEventList) */ {
 public:
  TouchEventList();
  virtual ~TouchEventList();

  TouchEventList(const TouchEventList& from);

  inline TouchEventList& operator=(const TouchEventList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TouchEventList(TouchEventList&& from) noexcept
    : TouchEventList() {
    *this = ::std::move(from);
  }

  inline TouchEventList& operator=(TouchEventList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TouchEventList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TouchEventList* internal_default_instance() {
    return reinterpret_cast<const TouchEventList*>(
               &_TouchEventList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(TouchEventList* other);
  friend void swap(TouchEventList& a, TouchEventList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TouchEventList* New() const final {
    return CreateMaybeMessage<TouchEventList>(NULL);
  }

  TouchEventList* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TouchEventList>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TouchEventList& from);
  void MergeFrom(const TouchEventList& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TouchEventList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ubii.dataStructure.TouchEvent elements = 1;
  int elements_size() const;
  void clear_elements();
  static const int kElementsFieldNumber = 1;
  ::ubii::dataStructure::TouchEvent* mutable_elements(int index);
  ::google::protobuf::RepeatedPtrField< ::ubii::dataStructure::TouchEvent >*
      mutable_elements();
  const ::ubii::dataStructure::TouchEvent& elements(int index) const;
  ::ubii::dataStructure::TouchEvent* add_elements();
  const ::google::protobuf::RepeatedPtrField< ::ubii::dataStructure::TouchEvent >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.dataStructure.TouchEventList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ubii::dataStructure::TouchEvent > elements_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TouchEvent

// .ubii.dataStructure.TouchEvent.TouchEventType type = 1;
inline void TouchEvent::clear_type() {
  type_ = 0;
}
inline ::ubii::dataStructure::TouchEvent_TouchEventType TouchEvent::type() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.TouchEvent.type)
  return static_cast< ::ubii::dataStructure::TouchEvent_TouchEventType >(type_);
}
inline void TouchEvent::set_type(::ubii::dataStructure::TouchEvent_TouchEventType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ubii.dataStructure.TouchEvent.type)
}

// .ubii.dataStructure.Vector2 position = 2;
inline bool TouchEvent::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::ubii::dataStructure::Vector2& TouchEvent::_internal_position() const {
  return *position_;
}
inline const ::ubii::dataStructure::Vector2& TouchEvent::position() const {
  const ::ubii::dataStructure::Vector2* p = position_;
  // @@protoc_insertion_point(field_get:ubii.dataStructure.TouchEvent.position)
  return p != NULL ? *p : *reinterpret_cast<const ::ubii::dataStructure::Vector2*>(
      &::ubii::dataStructure::_Vector2_default_instance_);
}
inline ::ubii::dataStructure::Vector2* TouchEvent::release_position() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.TouchEvent.position)
  
  ::ubii::dataStructure::Vector2* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::ubii::dataStructure::Vector2* TouchEvent::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::ubii::dataStructure::Vector2>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.TouchEvent.position)
  return position_;
}
inline void TouchEvent::set_allocated_position(::ubii::dataStructure::Vector2* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.TouchEvent.position)
}

// string id = 3;
inline void TouchEvent::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& TouchEvent::id() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.TouchEvent.id)
  return id_.GetNoArena();
}
inline void TouchEvent::set_id(const ::std::string& value) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.dataStructure.TouchEvent.id)
}
#if LANG_CXX11
inline void TouchEvent::set_id(::std::string&& value) {
  
  id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.dataStructure.TouchEvent.id)
}
#endif
inline void TouchEvent::set_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.dataStructure.TouchEvent.id)
}
inline void TouchEvent::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.dataStructure.TouchEvent.id)
}
inline ::std::string* TouchEvent::mutable_id() {
  
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.TouchEvent.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* TouchEvent::release_id() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.TouchEvent.id)
  
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void TouchEvent::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.TouchEvent.id)
}

// float force = 4;
inline void TouchEvent::clear_force() {
  force_ = 0;
}
inline float TouchEvent::force() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.TouchEvent.force)
  return force_;
}
inline void TouchEvent::set_force(float value) {
  
  force_ = value;
  // @@protoc_insertion_point(field_set:ubii.dataStructure.TouchEvent.force)
}

// -------------------------------------------------------------------

// TouchEventList

// repeated .ubii.dataStructure.TouchEvent elements = 1;
inline int TouchEventList::elements_size() const {
  return elements_.size();
}
inline void TouchEventList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::dataStructure::TouchEvent* TouchEventList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.TouchEventList.elements)
  return elements_.Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::dataStructure::TouchEvent >*
TouchEventList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.dataStructure.TouchEventList.elements)
  return &elements_;
}
inline const ::ubii::dataStructure::TouchEvent& TouchEventList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.TouchEventList.elements)
  return elements_.Get(index);
}
inline ::ubii::dataStructure::TouchEvent* TouchEventList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.dataStructure.TouchEventList.elements)
  return elements_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::dataStructure::TouchEvent >&
TouchEventList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.dataStructure.TouchEventList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ubii::dataStructure::TouchEvent_TouchEventType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ubii::dataStructure::TouchEvent_TouchEventType>() {
  return ::ubii::dataStructure::TouchEvent_TouchEventType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto
