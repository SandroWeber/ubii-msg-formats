// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/dataStructure/pose2d.proto

#ifndef PROTOBUF_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto__INCLUDED
#define PROTOBUF_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/dataStructure/vector2.pb.h"
// @@protoc_insertion_point(includes)

namespace ubii {
namespace dataStructure {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto();
void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto();
void protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto();

class Pose2D;

// ===================================================================

class Pose2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.dataStructure.Pose2D) */ {
 public:
  Pose2D();
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2D& default_instance();

  enum OrientationCase {
    kDirection = 2,
    kAngle = 3,
    ORIENTATION_NOT_SET = 0,
  };

  void Swap(Pose2D* other);

  // implements Message ----------------------------------------------

  inline Pose2D* New() const { return New(NULL); }

  Pose2D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pose2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ubii.dataStructure.Vector2 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::ubii::dataStructure::Vector2& position() const;
  ::ubii::dataStructure::Vector2* mutable_position();
  ::ubii::dataStructure::Vector2* release_position();
  void set_allocated_position(::ubii::dataStructure::Vector2* position);

  // optional .ubii.dataStructure.Vector2 direction = 2;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  const ::ubii::dataStructure::Vector2& direction() const;
  ::ubii::dataStructure::Vector2* mutable_direction();
  ::ubii::dataStructure::Vector2* release_direction();
  void set_allocated_direction(::ubii::dataStructure::Vector2* direction);

  // optional float angle = 3;
  private:
  bool has_angle() const;
  public:
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  OrientationCase orientation_case() const;
  // @@protoc_insertion_point(class_scope:ubii.dataStructure.Pose2D)
 private:
  inline void set_has_direction();
  inline void set_has_angle();

  inline bool has_orientation() const;
  void clear_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ubii::dataStructure::Vector2* position_;
  union OrientationUnion {
    OrientationUnion() {}
    ::ubii::dataStructure::Vector2* direction_;
    float angle_;
  } orientation_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto();
  friend void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto();

  void InitAsDefaultInstance();
  static Pose2D* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose2D

// optional .ubii.dataStructure.Vector2 position = 1;
inline bool Pose2D::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void Pose2D::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::ubii::dataStructure::Vector2& Pose2D::position() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::ubii::dataStructure::Vector2* Pose2D::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::ubii::dataStructure::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose2D.position)
  return position_;
}
inline ::ubii::dataStructure::Vector2* Pose2D::release_position() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose2D.position)
  
  ::ubii::dataStructure::Vector2* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pose2D::set_allocated_position(::ubii::dataStructure::Vector2* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose2D.position)
}

// optional .ubii.dataStructure.Vector2 direction = 2;
inline bool Pose2D::has_direction() const {
  return orientation_case() == kDirection;
}
inline void Pose2D::set_has_direction() {
  _oneof_case_[0] = kDirection;
}
inline void Pose2D::clear_direction() {
  if (has_direction()) {
    delete orientation_.direction_;
    clear_has_orientation();
  }
}
inline  const ::ubii::dataStructure::Vector2& Pose2D::direction() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.direction)
  return has_direction()
      ? *orientation_.direction_
      : ::ubii::dataStructure::Vector2::default_instance();
}
inline ::ubii::dataStructure::Vector2* Pose2D::mutable_direction() {
  if (!has_direction()) {
    clear_orientation();
    set_has_direction();
    orientation_.direction_ = new ::ubii::dataStructure::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose2D.direction)
  return orientation_.direction_;
}
inline ::ubii::dataStructure::Vector2* Pose2D::release_direction() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose2D.direction)
  if (has_direction()) {
    clear_has_orientation();
    ::ubii::dataStructure::Vector2* temp = orientation_.direction_;
    orientation_.direction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Pose2D::set_allocated_direction(::ubii::dataStructure::Vector2* direction) {
  clear_orientation();
  if (direction) {
    set_has_direction();
    orientation_.direction_ = direction;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose2D.direction)
}

// optional float angle = 3;
inline bool Pose2D::has_angle() const {
  return orientation_case() == kAngle;
}
inline void Pose2D::set_has_angle() {
  _oneof_case_[0] = kAngle;
}
inline void Pose2D::clear_angle() {
  if (has_angle()) {
    orientation_.angle_ = 0;
    clear_has_orientation();
  }
}
inline float Pose2D::angle() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.angle)
  if (has_angle()) {
    return orientation_.angle_;
  }
  return 0;
}
inline void Pose2D::set_angle(float value) {
  if (!has_angle()) {
    clear_orientation();
    set_has_angle();
  }
  orientation_.angle_ = value;
  // @@protoc_insertion_point(field_set:ubii.dataStructure.Pose2D.angle)
}

inline bool Pose2D::has_orientation() const {
  return orientation_case() != ORIENTATION_NOT_SET;
}
inline void Pose2D::clear_has_orientation() {
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}
inline Pose2D::OrientationCase Pose2D::orientation_case() const {
  return Pose2D::OrientationCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto__INCLUDED
