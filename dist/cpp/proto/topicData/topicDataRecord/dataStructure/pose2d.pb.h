// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/dataStructure/pose2d.proto

#ifndef PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto
#define PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/dataStructure/vector2.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto 

namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto
namespace ubii {
namespace dataStructure {
class Pose2D;
class Pose2DDefaultTypeInternal;
extern Pose2DDefaultTypeInternal _Pose2D_default_instance_;
}  // namespace dataStructure
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::dataStructure::Pose2D* Arena::CreateMaybeMessage<::ubii::dataStructure::Pose2D>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace dataStructure {

// ===================================================================

class Pose2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.dataStructure.Pose2D) */ {
 public:
  Pose2D();
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Pose2D(Pose2D&& from) noexcept
    : Pose2D() {
    *this = ::std::move(from);
  }

  inline Pose2D& operator=(Pose2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose2D& default_instance();

  enum OrientationCase {
    kDirection = 2,
    kAngle = 3,
    ORIENTATION_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Pose2D* internal_default_instance() {
    return reinterpret_cast<const Pose2D*>(
               &_Pose2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Pose2D* other);
  friend void swap(Pose2D& a, Pose2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Pose2D* New() const final {
    return CreateMaybeMessage<Pose2D>(NULL);
  }

  Pose2D* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Pose2D>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ubii.dataStructure.Vector2 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  private:
  const ::ubii::dataStructure::Vector2& _internal_position() const;
  public:
  const ::ubii::dataStructure::Vector2& position() const;
  ::ubii::dataStructure::Vector2* release_position();
  ::ubii::dataStructure::Vector2* mutable_position();
  void set_allocated_position(::ubii::dataStructure::Vector2* position);

  // .ubii.dataStructure.Vector2 direction = 2;
  bool has_direction() const;
  void clear_direction();
  static const int kDirectionFieldNumber = 2;
  private:
  const ::ubii::dataStructure::Vector2& _internal_direction() const;
  public:
  const ::ubii::dataStructure::Vector2& direction() const;
  ::ubii::dataStructure::Vector2* release_direction();
  ::ubii::dataStructure::Vector2* mutable_direction();
  void set_allocated_direction(::ubii::dataStructure::Vector2* direction);

  // float angle = 3;
  private:
  bool has_angle() const;
  public:
  void clear_angle();
  static const int kAngleFieldNumber = 3;
  float angle() const;
  void set_angle(float value);

  void clear_orientation();
  OrientationCase orientation_case() const;
  // @@protoc_insertion_point(class_scope:ubii.dataStructure.Pose2D)
 private:
  void set_has_direction();
  void set_has_angle();

  inline bool has_orientation() const;
  inline void clear_has_orientation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ubii::dataStructure::Vector2* position_;
  union OrientationUnion {
    OrientationUnion() {}
    ::ubii::dataStructure::Vector2* direction_;
    float angle_;
  } orientation_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose2D

// .ubii.dataStructure.Vector2 position = 1;
inline bool Pose2D::has_position() const {
  return this != internal_default_instance() && position_ != NULL;
}
inline const ::ubii::dataStructure::Vector2& Pose2D::_internal_position() const {
  return *position_;
}
inline const ::ubii::dataStructure::Vector2& Pose2D::position() const {
  const ::ubii::dataStructure::Vector2* p = position_;
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.position)
  return p != NULL ? *p : *reinterpret_cast<const ::ubii::dataStructure::Vector2*>(
      &::ubii::dataStructure::_Vector2_default_instance_);
}
inline ::ubii::dataStructure::Vector2* Pose2D::release_position() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose2D.position)
  
  ::ubii::dataStructure::Vector2* temp = position_;
  position_ = NULL;
  return temp;
}
inline ::ubii::dataStructure::Vector2* Pose2D::mutable_position() {
  
  if (position_ == NULL) {
    auto* p = CreateMaybeMessage<::ubii::dataStructure::Vector2>(GetArenaNoVirtual());
    position_ = p;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose2D.position)
  return position_;
}
inline void Pose2D::set_allocated_position(::ubii::dataStructure::Vector2* position) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete reinterpret_cast< ::google::protobuf::MessageLite*>(position_);
  }
  if (position) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      position = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose2D.position)
}

// .ubii.dataStructure.Vector2 direction = 2;
inline bool Pose2D::has_direction() const {
  return orientation_case() == kDirection;
}
inline void Pose2D::set_has_direction() {
  _oneof_case_[0] = kDirection;
}
inline const ::ubii::dataStructure::Vector2& Pose2D::_internal_direction() const {
  return *orientation_.direction_;
}
inline ::ubii::dataStructure::Vector2* Pose2D::release_direction() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose2D.direction)
  if (has_direction()) {
    clear_has_orientation();
      ::ubii::dataStructure::Vector2* temp = orientation_.direction_;
    orientation_.direction_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::dataStructure::Vector2& Pose2D::direction() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.direction)
  return has_direction()
      ? *orientation_.direction_
      : *reinterpret_cast< ::ubii::dataStructure::Vector2*>(&::ubii::dataStructure::_Vector2_default_instance_);
}
inline ::ubii::dataStructure::Vector2* Pose2D::mutable_direction() {
  if (!has_direction()) {
    clear_orientation();
    set_has_direction();
    orientation_.direction_ = CreateMaybeMessage< ::ubii::dataStructure::Vector2 >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose2D.direction)
  return orientation_.direction_;
}

// float angle = 3;
inline bool Pose2D::has_angle() const {
  return orientation_case() == kAngle;
}
inline void Pose2D::set_has_angle() {
  _oneof_case_[0] = kAngle;
}
inline void Pose2D::clear_angle() {
  if (has_angle()) {
    orientation_.angle_ = 0;
    clear_has_orientation();
  }
}
inline float Pose2D::angle() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.angle)
  if (has_angle()) {
    return orientation_.angle_;
  }
  return 0;
}
inline void Pose2D::set_angle(float value) {
  if (!has_angle()) {
    clear_orientation();
    set_has_angle();
  }
  orientation_.angle_ = value;
  // @@protoc_insertion_point(field_set:ubii.dataStructure.Pose2D.angle)
}

inline bool Pose2D::has_orientation() const {
  return orientation_case() != ORIENTATION_NOT_SET;
}
inline void Pose2D::clear_has_orientation() {
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}
inline Pose2D::OrientationCase Pose2D::orientation_case() const {
  return Pose2D::OrientationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto
