// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/dataStructure/pose2d.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3014000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3014000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/dataStructure/vector2.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto;
namespace ubii {
namespace dataStructure {
class Pose2D;
class Pose2DDefaultTypeInternal;
extern Pose2DDefaultTypeInternal _Pose2D_default_instance_;
}  // namespace dataStructure
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::dataStructure::Pose2D* Arena::CreateMaybeMessage<::ubii::dataStructure::Pose2D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace dataStructure {

// ===================================================================

class Pose2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.dataStructure.Pose2D) */ {
 public:
  inline Pose2D() : Pose2D(nullptr) {}
  virtual ~Pose2D();

  Pose2D(const Pose2D& from);
  Pose2D(Pose2D&& from) noexcept
    : Pose2D() {
    *this = ::std::move(from);
  }

  inline Pose2D& operator=(const Pose2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Pose2D& operator=(Pose2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Pose2D& default_instance();

  enum OrientationCase {
    kDirection = 2,
    kAngle = 3,
    ORIENTATION_NOT_SET = 0,
  };

  static inline const Pose2D* internal_default_instance() {
    return reinterpret_cast<const Pose2D*>(
               &_Pose2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Pose2D& a, Pose2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Pose2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Pose2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Pose2D* New() const final {
    return CreateMaybeMessage<Pose2D>(nullptr);
  }

  Pose2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Pose2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Pose2D& from);
  void MergeFrom(const Pose2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Pose2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.dataStructure.Pose2D";
  }
  protected:
  explicit Pose2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto);
    return ::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPositionFieldNumber = 1,
    kDirectionFieldNumber = 2,
    kAngleFieldNumber = 3,
  };
  // .ubii.dataStructure.Vector2 position = 1;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::ubii::dataStructure::Vector2& position() const;
  ::ubii::dataStructure::Vector2* release_position();
  ::ubii::dataStructure::Vector2* mutable_position();
  void set_allocated_position(::ubii::dataStructure::Vector2* position);
  private:
  const ::ubii::dataStructure::Vector2& _internal_position() const;
  ::ubii::dataStructure::Vector2* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::ubii::dataStructure::Vector2* position);
  ::ubii::dataStructure::Vector2* unsafe_arena_release_position();

  // .ubii.dataStructure.Vector2 direction = 2;
  bool has_direction() const;
  private:
  bool _internal_has_direction() const;
  public:
  void clear_direction();
  const ::ubii::dataStructure::Vector2& direction() const;
  ::ubii::dataStructure::Vector2* release_direction();
  ::ubii::dataStructure::Vector2* mutable_direction();
  void set_allocated_direction(::ubii::dataStructure::Vector2* direction);
  private:
  const ::ubii::dataStructure::Vector2& _internal_direction() const;
  ::ubii::dataStructure::Vector2* _internal_mutable_direction();
  public:
  void unsafe_arena_set_allocated_direction(
      ::ubii::dataStructure::Vector2* direction);
  ::ubii::dataStructure::Vector2* unsafe_arena_release_direction();

  // float angle = 3;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  float angle() const;
  void set_angle(float value);
  private:
  float _internal_angle() const;
  void _internal_set_angle(float value);
  public:

  void clear_orientation();
  OrientationCase orientation_case() const;
  // @@protoc_insertion_point(class_scope:ubii.dataStructure.Pose2D)
 private:
  class _Internal;
  void set_has_direction();
  void set_has_angle();

  inline bool has_orientation() const;
  inline void clear_has_orientation();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::ubii::dataStructure::Vector2* position_;
  union OrientationUnion {
    OrientationUnion() {}
    ::ubii::dataStructure::Vector2* direction_;
    float angle_;
  } orientation_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Pose2D

// .ubii.dataStructure.Vector2 position = 1;
inline bool Pose2D::_internal_has_position() const {
  return this != internal_default_instance() && position_ != nullptr;
}
inline bool Pose2D::has_position() const {
  return _internal_has_position();
}
inline const ::ubii::dataStructure::Vector2& Pose2D::_internal_position() const {
  const ::ubii::dataStructure::Vector2* p = position_;
  return p != nullptr ? *p : reinterpret_cast<const ::ubii::dataStructure::Vector2&>(
      ::ubii::dataStructure::_Vector2_default_instance_);
}
inline const ::ubii::dataStructure::Vector2& Pose2D::position() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.position)
  return _internal_position();
}
inline void Pose2D::unsafe_arena_set_allocated_position(
    ::ubii::dataStructure::Vector2* position) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ubii.dataStructure.Pose2D.position)
}
inline ::ubii::dataStructure::Vector2* Pose2D::release_position() {
  
  ::ubii::dataStructure::Vector2* temp = position_;
  position_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::ubii::dataStructure::Vector2* Pose2D::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose2D.position)
  
  ::ubii::dataStructure::Vector2* temp = position_;
  position_ = nullptr;
  return temp;
}
inline ::ubii::dataStructure::Vector2* Pose2D::_internal_mutable_position() {
  
  if (position_ == nullptr) {
    auto* p = CreateMaybeMessage<::ubii::dataStructure::Vector2>(GetArena());
    position_ = p;
  }
  return position_;
}
inline ::ubii::dataStructure::Vector2* Pose2D::mutable_position() {
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose2D.position)
  return _internal_mutable_position();
}
inline void Pose2D::set_allocated_position(::ubii::dataStructure::Vector2* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position)->GetArena();
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    
  } else {
    
  }
  position_ = position;
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose2D.position)
}

// .ubii.dataStructure.Vector2 direction = 2;
inline bool Pose2D::_internal_has_direction() const {
  return orientation_case() == kDirection;
}
inline bool Pose2D::has_direction() const {
  return _internal_has_direction();
}
inline void Pose2D::set_has_direction() {
  _oneof_case_[0] = kDirection;
}
inline ::ubii::dataStructure::Vector2* Pose2D::release_direction() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose2D.direction)
  if (_internal_has_direction()) {
    clear_has_orientation();
      ::ubii::dataStructure::Vector2* temp = orientation_.direction_;
    if (GetArena() != nullptr) {
      temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
    }
    orientation_.direction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::dataStructure::Vector2& Pose2D::_internal_direction() const {
  return _internal_has_direction()
      ? *orientation_.direction_
      : reinterpret_cast< ::ubii::dataStructure::Vector2&>(::ubii::dataStructure::_Vector2_default_instance_);
}
inline const ::ubii::dataStructure::Vector2& Pose2D::direction() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.direction)
  return _internal_direction();
}
inline ::ubii::dataStructure::Vector2* Pose2D::unsafe_arena_release_direction() {
  // @@protoc_insertion_point(field_unsafe_arena_release:ubii.dataStructure.Pose2D.direction)
  if (_internal_has_direction()) {
    clear_has_orientation();
    ::ubii::dataStructure::Vector2* temp = orientation_.direction_;
    orientation_.direction_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void Pose2D::unsafe_arena_set_allocated_direction(::ubii::dataStructure::Vector2* direction) {
  clear_orientation();
  if (direction) {
    set_has_direction();
    orientation_.direction_ = direction;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:ubii.dataStructure.Pose2D.direction)
}
inline ::ubii::dataStructure::Vector2* Pose2D::_internal_mutable_direction() {
  if (!_internal_has_direction()) {
    clear_orientation();
    set_has_direction();
    orientation_.direction_ = CreateMaybeMessage< ::ubii::dataStructure::Vector2 >(GetArena());
  }
  return orientation_.direction_;
}
inline ::ubii::dataStructure::Vector2* Pose2D::mutable_direction() {
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose2D.direction)
  return _internal_mutable_direction();
}

// float angle = 3;
inline bool Pose2D::_internal_has_angle() const {
  return orientation_case() == kAngle;
}
inline void Pose2D::set_has_angle() {
  _oneof_case_[0] = kAngle;
}
inline void Pose2D::clear_angle() {
  if (_internal_has_angle()) {
    orientation_.angle_ = 0;
    clear_has_orientation();
  }
}
inline float Pose2D::_internal_angle() const {
  if (_internal_has_angle()) {
    return orientation_.angle_;
  }
  return 0;
}
inline void Pose2D::_internal_set_angle(float value) {
  if (!_internal_has_angle()) {
    clear_orientation();
    set_has_angle();
  }
  orientation_.angle_ = value;
}
inline float Pose2D::angle() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose2D.angle)
  return _internal_angle();
}
inline void Pose2D::set_angle(float value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:ubii.dataStructure.Pose2D.angle)
}

inline bool Pose2D::has_orientation() const {
  return orientation_case() != ORIENTATION_NOT_SET;
}
inline void Pose2D::clear_has_orientation() {
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}
inline Pose2D::OrientationCase Pose2D::orientation_case() const {
  return Pose2D::OrientationCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto
