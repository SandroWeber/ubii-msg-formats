// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/dataStructure/pose3d.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/topicData/topicDataRecord/dataStructure/pose3d.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace dataStructure {

namespace {

const ::google::protobuf::Descriptor* Pose3D_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Pose3D_reflection_ = NULL;
struct Pose3DOneofInstance {
  const ::ubii::dataStructure::Quaternion* quaternion_;
  const ::ubii::dataStructure::Vector3* euler_;
}* Pose3D_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto() {
  protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/topicData/topicDataRecord/dataStructure/pose3d.proto");
  GOOGLE_CHECK(file != NULL);
  Pose3D_descriptor_ = file->message_type(0);
  static const int Pose3D_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, position_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Pose3D_default_oneof_instance_, quaternion_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(Pose3D_default_oneof_instance_, euler_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, orientation_),
  };
  Pose3D_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Pose3D_descriptor_,
      Pose3D::default_instance_,
      Pose3D_offsets_,
      -1,
      -1,
      -1,
      Pose3D_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, _oneof_case_[0]),
      sizeof(Pose3D),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Pose3D, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Pose3D_descriptor_, &Pose3D::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto() {
  delete Pose3D::default_instance_;
  delete Pose3D_default_oneof_instance_;
  delete Pose3D_reflection_;
}

void protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector3_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fquaternion_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n:proto/topicData/topicDataRecord/dataSt"
    "ructure/pose3d.proto\022\022ubii.dataStructure"
    "\032;proto/topicData/topicDataRecord/dataSt"
    "ructure/vector3.proto\032>proto/topicData/t"
    "opicDataRecord/dataStructure/quaternion."
    "proto\"\252\001\n\006Pose3D\022-\n\010position\030\001 \001(\0132\033.ubi"
    "i.dataStructure.Vector3\0224\n\nquaternion\030\002 "
    "\001(\0132\036.ubii.dataStructure.QuaternionH\000\022,\n"
    "\005euler\030\003 \001(\0132\033.ubii.dataStructure.Vector"
    "3H\000B\r\n\013orientationb\006proto3", 386);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/topicData/topicDataRecord/dataStructure/pose3d.proto", &protobuf_RegisterTypes);
  Pose3D::default_instance_ = new Pose3D();
  Pose3D_default_oneof_instance_ = new Pose3DOneofInstance();
  Pose3D::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto {
  StaticDescriptorInitializer_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto() {
    protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();
  }
} static_descriptor_initializer_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Pose3D::kPositionFieldNumber;
const int Pose3D::kQuaternionFieldNumber;
const int Pose3D::kEulerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Pose3D::Pose3D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.dataStructure.Pose3D)
}

void Pose3D::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  position_ = const_cast< ::ubii::dataStructure::Vector3*>(&::ubii::dataStructure::Vector3::default_instance());
  Pose3D_default_oneof_instance_->quaternion_ = const_cast< ::ubii::dataStructure::Quaternion*>(&::ubii::dataStructure::Quaternion::default_instance());
  Pose3D_default_oneof_instance_->euler_ = const_cast< ::ubii::dataStructure::Vector3*>(&::ubii::dataStructure::Vector3::default_instance());
}

Pose3D::Pose3D(const Pose3D& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.dataStructure.Pose3D)
}

void Pose3D::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  position_ = NULL;
  clear_has_orientation();
}

Pose3D::~Pose3D() {
  // @@protoc_insertion_point(destructor:ubii.dataStructure.Pose3D)
  SharedDtor();
}

void Pose3D::SharedDtor() {
  if (has_orientation()) {
    clear_orientation();
  }
  if (this != default_instance_) {
    delete position_;
  }
}

void Pose3D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Pose3D::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Pose3D_descriptor_;
}

const Pose3D& Pose3D::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();
  return *default_instance_;
}

Pose3D* Pose3D::default_instance_ = NULL;

Pose3D* Pose3D::New(::google::protobuf::Arena* arena) const {
  Pose3D* n = new Pose3D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Pose3D::clear_orientation() {
// @@protoc_insertion_point(one_of_clear_start:ubii.dataStructure.Pose3D)
  switch(orientation_case()) {
    case kQuaternion: {
      delete orientation_.quaternion_;
      break;
    }
    case kEuler: {
      delete orientation_.euler_;
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}


void Pose3D::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.dataStructure.Pose3D)
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
  clear_orientation();
}

bool Pose3D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.dataStructure.Pose3D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ubii.dataStructure.Vector3 position = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_quaternion;
        break;
      }

      // optional .ubii.dataStructure.Quaternion quaternion = 2;
      case 2: {
        if (tag == 18) {
         parse_quaternion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quaternion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_euler;
        break;
      }

      // optional .ubii.dataStructure.Vector3 euler = 3;
      case 3: {
        if (tag == 26) {
         parse_euler:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_euler()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.dataStructure.Pose3D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.dataStructure.Pose3D)
  return false;
#undef DO_
}

void Pose3D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.dataStructure.Pose3D)
  // optional .ubii.dataStructure.Vector3 position = 1;
  if (this->has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->position_, output);
  }

  // optional .ubii.dataStructure.Quaternion quaternion = 2;
  if (has_quaternion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *orientation_.quaternion_, output);
  }

  // optional .ubii.dataStructure.Vector3 euler = 3;
  if (has_euler()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *orientation_.euler_, output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.dataStructure.Pose3D)
}

::google::protobuf::uint8* Pose3D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.dataStructure.Pose3D)
  // optional .ubii.dataStructure.Vector3 position = 1;
  if (this->has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->position_, false, target);
  }

  // optional .ubii.dataStructure.Quaternion quaternion = 2;
  if (has_quaternion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *orientation_.quaternion_, false, target);
  }

  // optional .ubii.dataStructure.Vector3 euler = 3;
  if (has_euler()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *orientation_.euler_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.dataStructure.Pose3D)
  return target;
}

int Pose3D::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.dataStructure.Pose3D)
  int total_size = 0;

  // optional .ubii.dataStructure.Vector3 position = 1;
  if (this->has_position()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  switch (orientation_case()) {
    // optional .ubii.dataStructure.Quaternion quaternion = 2;
    case kQuaternion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *orientation_.quaternion_);
      break;
    }
    // optional .ubii.dataStructure.Vector3 euler = 3;
    case kEuler: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *orientation_.euler_);
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Pose3D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.dataStructure.Pose3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Pose3D* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Pose3D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.dataStructure.Pose3D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.dataStructure.Pose3D)
    MergeFrom(*source);
  }
}

void Pose3D::MergeFrom(const Pose3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.dataStructure.Pose3D)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.orientation_case()) {
    case kQuaternion: {
      mutable_quaternion()->::ubii::dataStructure::Quaternion::MergeFrom(from.quaternion());
      break;
    }
    case kEuler: {
      mutable_euler()->::ubii::dataStructure::Vector3::MergeFrom(from.euler());
      break;
    }
    case ORIENTATION_NOT_SET: {
      break;
    }
  }
  if (from.has_position()) {
    mutable_position()->::ubii::dataStructure::Vector3::MergeFrom(from.position());
  }
}

void Pose3D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.dataStructure.Pose3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Pose3D::CopyFrom(const Pose3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.dataStructure.Pose3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Pose3D::IsInitialized() const {

  return true;
}

void Pose3D::Swap(Pose3D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Pose3D::InternalSwap(Pose3D* other) {
  std::swap(position_, other->position_);
  std::swap(orientation_, other->orientation_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Pose3D::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Pose3D_descriptor_;
  metadata.reflection = Pose3D_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose3D

// optional .ubii.dataStructure.Vector3 position = 1;
bool Pose3D::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
void Pose3D::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
const ::ubii::dataStructure::Vector3& Pose3D::position() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose3D.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::ubii::dataStructure::Vector3* Pose3D::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::ubii::dataStructure::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose3D.position)
  return position_;
}
::ubii::dataStructure::Vector3* Pose3D::release_position() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose3D.position)
  
  ::ubii::dataStructure::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
void Pose3D::set_allocated_position(::ubii::dataStructure::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose3D.position)
}

// optional .ubii.dataStructure.Quaternion quaternion = 2;
bool Pose3D::has_quaternion() const {
  return orientation_case() == kQuaternion;
}
void Pose3D::set_has_quaternion() {
  _oneof_case_[0] = kQuaternion;
}
void Pose3D::clear_quaternion() {
  if (has_quaternion()) {
    delete orientation_.quaternion_;
    clear_has_orientation();
  }
}
 const ::ubii::dataStructure::Quaternion& Pose3D::quaternion() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose3D.quaternion)
  return has_quaternion()
      ? *orientation_.quaternion_
      : ::ubii::dataStructure::Quaternion::default_instance();
}
::ubii::dataStructure::Quaternion* Pose3D::mutable_quaternion() {
  if (!has_quaternion()) {
    clear_orientation();
    set_has_quaternion();
    orientation_.quaternion_ = new ::ubii::dataStructure::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose3D.quaternion)
  return orientation_.quaternion_;
}
::ubii::dataStructure::Quaternion* Pose3D::release_quaternion() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose3D.quaternion)
  if (has_quaternion()) {
    clear_has_orientation();
    ::ubii::dataStructure::Quaternion* temp = orientation_.quaternion_;
    orientation_.quaternion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Pose3D::set_allocated_quaternion(::ubii::dataStructure::Quaternion* quaternion) {
  clear_orientation();
  if (quaternion) {
    set_has_quaternion();
    orientation_.quaternion_ = quaternion;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose3D.quaternion)
}

// optional .ubii.dataStructure.Vector3 euler = 3;
bool Pose3D::has_euler() const {
  return orientation_case() == kEuler;
}
void Pose3D::set_has_euler() {
  _oneof_case_[0] = kEuler;
}
void Pose3D::clear_euler() {
  if (has_euler()) {
    delete orientation_.euler_;
    clear_has_orientation();
  }
}
 const ::ubii::dataStructure::Vector3& Pose3D::euler() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose3D.euler)
  return has_euler()
      ? *orientation_.euler_
      : ::ubii::dataStructure::Vector3::default_instance();
}
::ubii::dataStructure::Vector3* Pose3D::mutable_euler() {
  if (!has_euler()) {
    clear_orientation();
    set_has_euler();
    orientation_.euler_ = new ::ubii::dataStructure::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose3D.euler)
  return orientation_.euler_;
}
::ubii::dataStructure::Vector3* Pose3D::release_euler() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose3D.euler)
  if (has_euler()) {
    clear_has_orientation();
    ::ubii::dataStructure::Vector3* temp = orientation_.euler_;
    orientation_.euler_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void Pose3D::set_allocated_euler(::ubii::dataStructure::Vector3* euler) {
  clear_orientation();
  if (euler) {
    set_has_euler();
    orientation_.euler_ = euler;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose3D.euler)
}

bool Pose3D::has_orientation() const {
  return orientation_case() != ORIENTATION_NOT_SET;
}
void Pose3D::clear_has_orientation() {
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}
Pose3D::OrientationCase Pose3D::orientation_case() const {
  return Pose3D::OrientationCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
