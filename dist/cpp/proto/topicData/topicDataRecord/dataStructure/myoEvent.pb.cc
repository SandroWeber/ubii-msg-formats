// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/dataStructure/myoEvent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/topicData/topicDataRecord/dataStructure/myoEvent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace dataStructure {

namespace {

const ::google::protobuf::Descriptor* MyoEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MyoEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto() {
  protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/topicData/topicDataRecord/dataStructure/myoEvent.proto");
  GOOGLE_CHECK(file != NULL);
  MyoEvent_descriptor_ = file->message_type(0);
  static const int MyoEvent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyoEvent, emg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyoEvent, orientation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyoEvent, gyroscope_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyoEvent, accelerometer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyoEvent, gesture_),
  };
  MyoEvent_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MyoEvent_descriptor_,
      MyoEvent::default_instance_,
      MyoEvent_offsets_,
      -1,
      -1,
      -1,
      sizeof(MyoEvent),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyoEvent, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MyoEvent, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MyoEvent_descriptor_, &MyoEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto() {
  delete MyoEvent::default_instance_;
  delete MyoEvent_reflection_;
}

void protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector8_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector3_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fquaternion_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fhandGestureType_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n<proto/topicData/topicDataRecord/dataSt"
    "ructure/myoEvent.proto\022\022ubii.dataStructu"
    "re\032;proto/topicData/topicDataRecord/data"
    "Structure/vector8.proto\032;proto/topicData"
    "/topicDataRecord/dataStructure/vector3.p"
    "roto\032>proto/topicData/topicDataRecord/da"
    "taStructure/quaternion.proto\032Cproto/topi"
    "cData/topicDataRecord/dataStructure/hand"
    "GestureType.proto\"\203\002\n\010MyoEvent\022(\n\003emg\030\001 "
    "\001(\0132\033.ubii.dataStructure.Vector8\0223\n\013orie"
    "ntation\030\002 \001(\0132\036.ubii.dataStructure.Quate"
    "rnion\022.\n\tgyroscope\030\003 \001(\0132\033.ubii.dataStru"
    "cture.Vector3\0222\n\raccelerometer\030\004 \001(\0132\033.u"
    "bii.dataStructure.Vector3\0224\n\007gesture\030\005 \001"
    "(\0162#.ubii.dataStructure.HandGestureTypeb"
    "\006proto3", 607);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/topicData/topicDataRecord/dataStructure/myoEvent.proto", &protobuf_RegisterTypes);
  MyoEvent::default_instance_ = new MyoEvent();
  MyoEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto {
  StaticDescriptorInitializer_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto() {
    protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto();
  }
} static_descriptor_initializer_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MyoEvent::kEmgFieldNumber;
const int MyoEvent::kOrientationFieldNumber;
const int MyoEvent::kGyroscopeFieldNumber;
const int MyoEvent::kAccelerometerFieldNumber;
const int MyoEvent::kGestureFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MyoEvent::MyoEvent()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.dataStructure.MyoEvent)
}

void MyoEvent::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  emg_ = const_cast< ::ubii::dataStructure::Vector8*>(&::ubii::dataStructure::Vector8::default_instance());
  orientation_ = const_cast< ::ubii::dataStructure::Quaternion*>(&::ubii::dataStructure::Quaternion::default_instance());
  gyroscope_ = const_cast< ::ubii::dataStructure::Vector3*>(&::ubii::dataStructure::Vector3::default_instance());
  accelerometer_ = const_cast< ::ubii::dataStructure::Vector3*>(&::ubii::dataStructure::Vector3::default_instance());
}

MyoEvent::MyoEvent(const MyoEvent& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.dataStructure.MyoEvent)
}

void MyoEvent::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  emg_ = NULL;
  orientation_ = NULL;
  gyroscope_ = NULL;
  accelerometer_ = NULL;
  gesture_ = 0;
}

MyoEvent::~MyoEvent() {
  // @@protoc_insertion_point(destructor:ubii.dataStructure.MyoEvent)
  SharedDtor();
}

void MyoEvent::SharedDtor() {
  if (this != default_instance_) {
    delete emg_;
    delete orientation_;
    delete gyroscope_;
    delete accelerometer_;
  }
}

void MyoEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MyoEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MyoEvent_descriptor_;
}

const MyoEvent& MyoEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto();
  return *default_instance_;
}

MyoEvent* MyoEvent::default_instance_ = NULL;

MyoEvent* MyoEvent::New(::google::protobuf::Arena* arena) const {
  MyoEvent* n = new MyoEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MyoEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.dataStructure.MyoEvent)
  if (GetArenaNoVirtual() == NULL && emg_ != NULL) delete emg_;
  emg_ = NULL;
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
  if (GetArenaNoVirtual() == NULL && gyroscope_ != NULL) delete gyroscope_;
  gyroscope_ = NULL;
  if (GetArenaNoVirtual() == NULL && accelerometer_ != NULL) delete accelerometer_;
  accelerometer_ = NULL;
  gesture_ = 0;
}

bool MyoEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.dataStructure.MyoEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ubii.dataStructure.Vector8 emg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_emg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_orientation;
        break;
      }

      // optional .ubii.dataStructure.Quaternion orientation = 2;
      case 2: {
        if (tag == 18) {
         parse_orientation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orientation()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gyroscope;
        break;
      }

      // optional .ubii.dataStructure.Vector3 gyroscope = 3;
      case 3: {
        if (tag == 26) {
         parse_gyroscope:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gyroscope()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_accelerometer;
        break;
      }

      // optional .ubii.dataStructure.Vector3 accelerometer = 4;
      case 4: {
        if (tag == 34) {
         parse_accelerometer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_accelerometer()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gesture;
        break;
      }

      // optional .ubii.dataStructure.HandGestureType gesture = 5;
      case 5: {
        if (tag == 40) {
         parse_gesture:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_gesture(static_cast< ::ubii::dataStructure::HandGestureType >(value));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.dataStructure.MyoEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.dataStructure.MyoEvent)
  return false;
#undef DO_
}

void MyoEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.dataStructure.MyoEvent)
  // optional .ubii.dataStructure.Vector8 emg = 1;
  if (this->has_emg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->emg_, output);
  }

  // optional .ubii.dataStructure.Quaternion orientation = 2;
  if (this->has_orientation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->orientation_, output);
  }

  // optional .ubii.dataStructure.Vector3 gyroscope = 3;
  if (this->has_gyroscope()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->gyroscope_, output);
  }

  // optional .ubii.dataStructure.Vector3 accelerometer = 4;
  if (this->has_accelerometer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->accelerometer_, output);
  }

  // optional .ubii.dataStructure.HandGestureType gesture = 5;
  if (this->gesture() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->gesture(), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.dataStructure.MyoEvent)
}

::google::protobuf::uint8* MyoEvent::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.dataStructure.MyoEvent)
  // optional .ubii.dataStructure.Vector8 emg = 1;
  if (this->has_emg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->emg_, false, target);
  }

  // optional .ubii.dataStructure.Quaternion orientation = 2;
  if (this->has_orientation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->orientation_, false, target);
  }

  // optional .ubii.dataStructure.Vector3 gyroscope = 3;
  if (this->has_gyroscope()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->gyroscope_, false, target);
  }

  // optional .ubii.dataStructure.Vector3 accelerometer = 4;
  if (this->has_accelerometer()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->accelerometer_, false, target);
  }

  // optional .ubii.dataStructure.HandGestureType gesture = 5;
  if (this->gesture() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      5, this->gesture(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.dataStructure.MyoEvent)
  return target;
}

int MyoEvent::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.dataStructure.MyoEvent)
  int total_size = 0;

  // optional .ubii.dataStructure.Vector8 emg = 1;
  if (this->has_emg()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->emg_);
  }

  // optional .ubii.dataStructure.Quaternion orientation = 2;
  if (this->has_orientation()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->orientation_);
  }

  // optional .ubii.dataStructure.Vector3 gyroscope = 3;
  if (this->has_gyroscope()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->gyroscope_);
  }

  // optional .ubii.dataStructure.Vector3 accelerometer = 4;
  if (this->has_accelerometer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->accelerometer_);
  }

  // optional .ubii.dataStructure.HandGestureType gesture = 5;
  if (this->gesture() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->gesture());
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MyoEvent::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.dataStructure.MyoEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MyoEvent* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MyoEvent>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.dataStructure.MyoEvent)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.dataStructure.MyoEvent)
    MergeFrom(*source);
  }
}

void MyoEvent::MergeFrom(const MyoEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.dataStructure.MyoEvent)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from.has_emg()) {
    mutable_emg()->::ubii::dataStructure::Vector8::MergeFrom(from.emg());
  }
  if (from.has_orientation()) {
    mutable_orientation()->::ubii::dataStructure::Quaternion::MergeFrom(from.orientation());
  }
  if (from.has_gyroscope()) {
    mutable_gyroscope()->::ubii::dataStructure::Vector3::MergeFrom(from.gyroscope());
  }
  if (from.has_accelerometer()) {
    mutable_accelerometer()->::ubii::dataStructure::Vector3::MergeFrom(from.accelerometer());
  }
  if (from.gesture() != 0) {
    set_gesture(from.gesture());
  }
}

void MyoEvent::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.dataStructure.MyoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MyoEvent::CopyFrom(const MyoEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.dataStructure.MyoEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MyoEvent::IsInitialized() const {

  return true;
}

void MyoEvent::Swap(MyoEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MyoEvent::InternalSwap(MyoEvent* other) {
  std::swap(emg_, other->emg_);
  std::swap(orientation_, other->orientation_);
  std::swap(gyroscope_, other->gyroscope_);
  std::swap(accelerometer_, other->accelerometer_);
  std::swap(gesture_, other->gesture_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MyoEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MyoEvent_descriptor_;
  metadata.reflection = MyoEvent_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MyoEvent

// optional .ubii.dataStructure.Vector8 emg = 1;
bool MyoEvent::has_emg() const {
  return !_is_default_instance_ && emg_ != NULL;
}
void MyoEvent::clear_emg() {
  if (GetArenaNoVirtual() == NULL && emg_ != NULL) delete emg_;
  emg_ = NULL;
}
const ::ubii::dataStructure::Vector8& MyoEvent::emg() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.emg)
  return emg_ != NULL ? *emg_ : *default_instance_->emg_;
}
::ubii::dataStructure::Vector8* MyoEvent::mutable_emg() {
  
  if (emg_ == NULL) {
    emg_ = new ::ubii::dataStructure::Vector8;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.MyoEvent.emg)
  return emg_;
}
::ubii::dataStructure::Vector8* MyoEvent::release_emg() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.MyoEvent.emg)
  
  ::ubii::dataStructure::Vector8* temp = emg_;
  emg_ = NULL;
  return temp;
}
void MyoEvent::set_allocated_emg(::ubii::dataStructure::Vector8* emg) {
  delete emg_;
  emg_ = emg;
  if (emg) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.MyoEvent.emg)
}

// optional .ubii.dataStructure.Quaternion orientation = 2;
bool MyoEvent::has_orientation() const {
  return !_is_default_instance_ && orientation_ != NULL;
}
void MyoEvent::clear_orientation() {
  if (GetArenaNoVirtual() == NULL && orientation_ != NULL) delete orientation_;
  orientation_ = NULL;
}
const ::ubii::dataStructure::Quaternion& MyoEvent::orientation() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.orientation)
  return orientation_ != NULL ? *orientation_ : *default_instance_->orientation_;
}
::ubii::dataStructure::Quaternion* MyoEvent::mutable_orientation() {
  
  if (orientation_ == NULL) {
    orientation_ = new ::ubii::dataStructure::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.MyoEvent.orientation)
  return orientation_;
}
::ubii::dataStructure::Quaternion* MyoEvent::release_orientation() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.MyoEvent.orientation)
  
  ::ubii::dataStructure::Quaternion* temp = orientation_;
  orientation_ = NULL;
  return temp;
}
void MyoEvent::set_allocated_orientation(::ubii::dataStructure::Quaternion* orientation) {
  delete orientation_;
  orientation_ = orientation;
  if (orientation) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.MyoEvent.orientation)
}

// optional .ubii.dataStructure.Vector3 gyroscope = 3;
bool MyoEvent::has_gyroscope() const {
  return !_is_default_instance_ && gyroscope_ != NULL;
}
void MyoEvent::clear_gyroscope() {
  if (GetArenaNoVirtual() == NULL && gyroscope_ != NULL) delete gyroscope_;
  gyroscope_ = NULL;
}
const ::ubii::dataStructure::Vector3& MyoEvent::gyroscope() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.gyroscope)
  return gyroscope_ != NULL ? *gyroscope_ : *default_instance_->gyroscope_;
}
::ubii::dataStructure::Vector3* MyoEvent::mutable_gyroscope() {
  
  if (gyroscope_ == NULL) {
    gyroscope_ = new ::ubii::dataStructure::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.MyoEvent.gyroscope)
  return gyroscope_;
}
::ubii::dataStructure::Vector3* MyoEvent::release_gyroscope() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.MyoEvent.gyroscope)
  
  ::ubii::dataStructure::Vector3* temp = gyroscope_;
  gyroscope_ = NULL;
  return temp;
}
void MyoEvent::set_allocated_gyroscope(::ubii::dataStructure::Vector3* gyroscope) {
  delete gyroscope_;
  gyroscope_ = gyroscope;
  if (gyroscope) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.MyoEvent.gyroscope)
}

// optional .ubii.dataStructure.Vector3 accelerometer = 4;
bool MyoEvent::has_accelerometer() const {
  return !_is_default_instance_ && accelerometer_ != NULL;
}
void MyoEvent::clear_accelerometer() {
  if (GetArenaNoVirtual() == NULL && accelerometer_ != NULL) delete accelerometer_;
  accelerometer_ = NULL;
}
const ::ubii::dataStructure::Vector3& MyoEvent::accelerometer() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.accelerometer)
  return accelerometer_ != NULL ? *accelerometer_ : *default_instance_->accelerometer_;
}
::ubii::dataStructure::Vector3* MyoEvent::mutable_accelerometer() {
  
  if (accelerometer_ == NULL) {
    accelerometer_ = new ::ubii::dataStructure::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.MyoEvent.accelerometer)
  return accelerometer_;
}
::ubii::dataStructure::Vector3* MyoEvent::release_accelerometer() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.MyoEvent.accelerometer)
  
  ::ubii::dataStructure::Vector3* temp = accelerometer_;
  accelerometer_ = NULL;
  return temp;
}
void MyoEvent::set_allocated_accelerometer(::ubii::dataStructure::Vector3* accelerometer) {
  delete accelerometer_;
  accelerometer_ = accelerometer;
  if (accelerometer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.MyoEvent.accelerometer)
}

// optional .ubii.dataStructure.HandGestureType gesture = 5;
void MyoEvent::clear_gesture() {
  gesture_ = 0;
}
 ::ubii::dataStructure::HandGestureType MyoEvent::gesture() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.MyoEvent.gesture)
  return static_cast< ::ubii::dataStructure::HandGestureType >(gesture_);
}
 void MyoEvent::set_gesture(::ubii::dataStructure::HandGestureType value) {
  
  gesture_ = value;
  // @@protoc_insertion_point(field_set:ubii.dataStructure.MyoEvent.gesture)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
