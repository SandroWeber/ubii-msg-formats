// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/dataStructure/pose3d.proto

#ifndef PROTOBUF_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto__INCLUDED
#define PROTOBUF_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/dataStructure/vector3.pb.h"
#include "proto/topicData/topicDataRecord/dataStructure/quaternion.pb.h"
// @@protoc_insertion_point(includes)

namespace ubii {
namespace dataStructure {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();
void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();
void protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();

class Pose3D;

// ===================================================================

class Pose3D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.dataStructure.Pose3D) */ {
 public:
  Pose3D();
  virtual ~Pose3D();

  Pose3D(const Pose3D& from);

  inline Pose3D& operator=(const Pose3D& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Pose3D& default_instance();

  enum OrientationCase {
    kQuaternion = 2,
    kEuler = 3,
    ORIENTATION_NOT_SET = 0,
  };

  void Swap(Pose3D* other);

  // implements Message ----------------------------------------------

  inline Pose3D* New() const { return New(NULL); }

  Pose3D* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Pose3D& from);
  void MergeFrom(const Pose3D& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Pose3D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ubii.dataStructure.Vector3 position = 1;
  bool has_position() const;
  void clear_position();
  static const int kPositionFieldNumber = 1;
  const ::ubii::dataStructure::Vector3& position() const;
  ::ubii::dataStructure::Vector3* mutable_position();
  ::ubii::dataStructure::Vector3* release_position();
  void set_allocated_position(::ubii::dataStructure::Vector3* position);

  // optional .ubii.dataStructure.Quaternion quaternion = 2;
  bool has_quaternion() const;
  void clear_quaternion();
  static const int kQuaternionFieldNumber = 2;
  const ::ubii::dataStructure::Quaternion& quaternion() const;
  ::ubii::dataStructure::Quaternion* mutable_quaternion();
  ::ubii::dataStructure::Quaternion* release_quaternion();
  void set_allocated_quaternion(::ubii::dataStructure::Quaternion* quaternion);

  // optional .ubii.dataStructure.Vector3 euler = 3;
  bool has_euler() const;
  void clear_euler();
  static const int kEulerFieldNumber = 3;
  const ::ubii::dataStructure::Vector3& euler() const;
  ::ubii::dataStructure::Vector3* mutable_euler();
  ::ubii::dataStructure::Vector3* release_euler();
  void set_allocated_euler(::ubii::dataStructure::Vector3* euler);

  OrientationCase orientation_case() const;
  // @@protoc_insertion_point(class_scope:ubii.dataStructure.Pose3D)
 private:
  inline void set_has_quaternion();
  inline void set_has_euler();

  inline bool has_orientation() const;
  void clear_orientation();
  inline void clear_has_orientation();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::ubii::dataStructure::Vector3* position_;
  union OrientationUnion {
    OrientationUnion() {}
    ::ubii::dataStructure::Quaternion* quaternion_;
    ::ubii::dataStructure::Vector3* euler_;
  } orientation_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();
  friend void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();

  void InitAsDefaultInstance();
  static Pose3D* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Pose3D

// optional .ubii.dataStructure.Vector3 position = 1;
inline bool Pose3D::has_position() const {
  return !_is_default_instance_ && position_ != NULL;
}
inline void Pose3D::clear_position() {
  if (GetArenaNoVirtual() == NULL && position_ != NULL) delete position_;
  position_ = NULL;
}
inline const ::ubii::dataStructure::Vector3& Pose3D::position() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose3D.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::ubii::dataStructure::Vector3* Pose3D::mutable_position() {
  
  if (position_ == NULL) {
    position_ = new ::ubii::dataStructure::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose3D.position)
  return position_;
}
inline ::ubii::dataStructure::Vector3* Pose3D::release_position() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose3D.position)
  
  ::ubii::dataStructure::Vector3* temp = position_;
  position_ = NULL;
  return temp;
}
inline void Pose3D::set_allocated_position(::ubii::dataStructure::Vector3* position) {
  delete position_;
  position_ = position;
  if (position) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose3D.position)
}

// optional .ubii.dataStructure.Quaternion quaternion = 2;
inline bool Pose3D::has_quaternion() const {
  return orientation_case() == kQuaternion;
}
inline void Pose3D::set_has_quaternion() {
  _oneof_case_[0] = kQuaternion;
}
inline void Pose3D::clear_quaternion() {
  if (has_quaternion()) {
    delete orientation_.quaternion_;
    clear_has_orientation();
  }
}
inline  const ::ubii::dataStructure::Quaternion& Pose3D::quaternion() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose3D.quaternion)
  return has_quaternion()
      ? *orientation_.quaternion_
      : ::ubii::dataStructure::Quaternion::default_instance();
}
inline ::ubii::dataStructure::Quaternion* Pose3D::mutable_quaternion() {
  if (!has_quaternion()) {
    clear_orientation();
    set_has_quaternion();
    orientation_.quaternion_ = new ::ubii::dataStructure::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose3D.quaternion)
  return orientation_.quaternion_;
}
inline ::ubii::dataStructure::Quaternion* Pose3D::release_quaternion() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose3D.quaternion)
  if (has_quaternion()) {
    clear_has_orientation();
    ::ubii::dataStructure::Quaternion* temp = orientation_.quaternion_;
    orientation_.quaternion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Pose3D::set_allocated_quaternion(::ubii::dataStructure::Quaternion* quaternion) {
  clear_orientation();
  if (quaternion) {
    set_has_quaternion();
    orientation_.quaternion_ = quaternion;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose3D.quaternion)
}

// optional .ubii.dataStructure.Vector3 euler = 3;
inline bool Pose3D::has_euler() const {
  return orientation_case() == kEuler;
}
inline void Pose3D::set_has_euler() {
  _oneof_case_[0] = kEuler;
}
inline void Pose3D::clear_euler() {
  if (has_euler()) {
    delete orientation_.euler_;
    clear_has_orientation();
  }
}
inline  const ::ubii::dataStructure::Vector3& Pose3D::euler() const {
  // @@protoc_insertion_point(field_get:ubii.dataStructure.Pose3D.euler)
  return has_euler()
      ? *orientation_.euler_
      : ::ubii::dataStructure::Vector3::default_instance();
}
inline ::ubii::dataStructure::Vector3* Pose3D::mutable_euler() {
  if (!has_euler()) {
    clear_orientation();
    set_has_euler();
    orientation_.euler_ = new ::ubii::dataStructure::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ubii.dataStructure.Pose3D.euler)
  return orientation_.euler_;
}
inline ::ubii::dataStructure::Vector3* Pose3D::release_euler() {
  // @@protoc_insertion_point(field_release:ubii.dataStructure.Pose3D.euler)
  if (has_euler()) {
    clear_has_orientation();
    ::ubii::dataStructure::Vector3* temp = orientation_.euler_;
    orientation_.euler_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void Pose3D::set_allocated_euler(::ubii::dataStructure::Vector3* euler) {
  clear_orientation();
  if (euler) {
    set_has_euler();
    orientation_.euler_ = euler;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.dataStructure.Pose3D.euler)
}

inline bool Pose3D::has_orientation() const {
  return orientation_case() != ORIENTATION_NOT_SET;
}
inline void Pose3D::clear_has_orientation() {
  _oneof_case_[0] = ORIENTATION_NOT_SET;
}
inline Pose3D::OrientationCase Pose3D::orientation_case() const {
  return Pose3D::OrientationCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dataStructure
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto__INCLUDED
