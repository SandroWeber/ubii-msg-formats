// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/topicDataRecord.proto

#include "proto/topicData/topicDataRecord/topicDataRecord.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BoolList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fcolor_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Color_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fcolor_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DoubleList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FloatList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Image2D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fimage_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Image2DList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fimage_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Int32List_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fkeyEvent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_KeyEvent_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fkeyEvent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix3x2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix3x2_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix3x2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix4x4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Matrix4x4_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix4x4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmouseEvent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MouseEvent_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmouseEvent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_MyoEvent_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Object2D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object2DList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Object3D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Object3DList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Pose2D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Pose3D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fquaternion_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Quaternion_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fquaternion_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StringList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TouchEvent_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector2_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector2_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector3_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector3_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector4_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector4_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector4_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fprocessing_2fprocessingModule_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_ProcessingModuleList_proto_2fprocessing_2fprocessingModule_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2fsessions_2fsession_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Session_proto_2fsessions_2fsession_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2ftimestamp_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Timestamp_proto_2ftopicData_2ftopicDataRecord_2ftimestamp_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<27> scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto;
namespace ubii {
namespace topicData {
class TopicDataRecordDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicDataRecord> _instance;
  double double__;
  bool bool__;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr string_;
  const ::ubii::dataStructure::Vector2* vector2_;
  const ::ubii::dataStructure::Vector3* vector3_;
  const ::ubii::dataStructure::Vector4* vector4_;
  const ::ubii::dataStructure::Quaternion* quaternion_;
  const ::ubii::dataStructure::Matrix3x2* matrix3x2_;
  const ::ubii::dataStructure::Matrix4x4* matrix4x4_;
  const ::ubii::dataStructure::Color* color_;
  const ::ubii::dataStructure::TouchEvent* touch_event_;
  const ::ubii::dataStructure::KeyEvent* key_event_;
  const ::ubii::dataStructure::MouseEvent* mouse_event_;
  const ::ubii::dataStructure::MyoEvent* myo_event_;
  const ::ubii::dataStructure::Pose2D* pose2d_;
  const ::ubii::dataStructure::Pose3D* pose3d_;
  const ::ubii::dataStructure::Object2D* object2d_;
  const ::ubii::dataStructure::Object3D* object3d_;
  const ::ubii::dataStructure::Object2DList* object2d_list_;
  const ::ubii::dataStructure::Object3DList* object3d_list_;
  ::PROTOBUF_NAMESPACE_ID::int32 int32_;
  float float__;
  const ::ubii::dataStructure::Int32List* int32_list_;
  const ::ubii::dataStructure::FloatList* float_list_;
  const ::ubii::dataStructure::DoubleList* double_list_;
  const ::ubii::dataStructure::StringList* string_list_;
  const ::ubii::dataStructure::BoolList* bool_list_;
  const ::ubii::dataStructure::Image2D* image2d_;
  const ::ubii::dataStructure::Image2DList* image2d_list_;
  const ::ubii::sessions::Session* session_;
  const ::ubii::processing::ProcessingModuleList* processing_module_list_;
} _TopicDataRecord_default_instance_;
class TopicDataRecordListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicDataRecordList> _instance;
} _TopicDataRecordList_default_instance_;
}  // namespace topicData
}  // namespace ubii
static void InitDefaultsscc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::topicData::_TopicDataRecord_default_instance_;
    new (ptr) ::ubii::topicData::TopicDataRecord();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::topicData::TopicDataRecord::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<27> scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 27, 0, InitDefaultsscc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto}, {
      &scc_info_Timestamp_proto_2ftopicData_2ftopicDataRecord_2ftimestamp_2eproto.base,
      &scc_info_Vector2_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector2_2eproto.base,
      &scc_info_Vector3_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector3_2eproto.base,
      &scc_info_Vector4_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector4_2eproto.base,
      &scc_info_Quaternion_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fquaternion_2eproto.base,
      &scc_info_Matrix3x2_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix3x2_2eproto.base,
      &scc_info_Matrix4x4_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix4x4_2eproto.base,
      &scc_info_Color_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fcolor_2eproto.base,
      &scc_info_TouchEvent_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto.base,
      &scc_info_KeyEvent_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fkeyEvent_2eproto.base,
      &scc_info_MouseEvent_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmouseEvent_2eproto.base,
      &scc_info_MyoEvent_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto.base,
      &scc_info_Pose2D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto.base,
      &scc_info_Pose3D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto.base,
      &scc_info_Object2D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject2d_2eproto.base,
      &scc_info_Object3D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto.base,
      &scc_info_Object2DList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject2d_2eproto.base,
      &scc_info_Object3DList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto.base,
      &scc_info_Int32List_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto.base,
      &scc_info_FloatList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto.base,
      &scc_info_DoubleList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto.base,
      &scc_info_StringList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto.base,
      &scc_info_BoolList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto.base,
      &scc_info_Image2D_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fimage_2eproto.base,
      &scc_info_Image2DList_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fimage_2eproto.base,
      &scc_info_Session_proto_2fsessions_2fsession_2eproto.base,
      &scc_info_ProcessingModuleList_proto_2fprocessing_2fprocessingModule_2eproto.base,}};

static void InitDefaultsscc_info_TopicDataRecordList_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::topicData::_TopicDataRecordList_default_instance_;
    new (ptr) ::ubii::topicData::TopicDataRecordList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::topicData::TopicDataRecordList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicDataRecordList_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicDataRecordList_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto}, {
      &scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataRecord, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataRecord, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataRecord, topic_),
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataRecord, timestamp_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, double__),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, bool__),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, string_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, vector2_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, vector3_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, vector4_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, quaternion_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, matrix3x2_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, matrix4x4_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, color_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, touch_event_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, key_event_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, mouse_event_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, myo_event_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, pose2d_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, pose3d_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, object2d_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, object3d_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, object2d_list_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, object3d_list_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, int32_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, float__),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, int32_list_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, float_list_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, double_list_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, string_list_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, bool_list_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, image2d_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, image2d_list_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, session_),
  offsetof(::ubii::topicData::TopicDataRecordDefaultTypeInternal, processing_module_list_),
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataRecord, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataRecordList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataRecordList, elements_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ubii::topicData::TopicDataRecord)},
  { 39, -1, sizeof(::ubii::topicData::TopicDataRecordList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::topicData::_TopicDataRecord_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::topicData::_TopicDataRecordList_default_instance_),
};

const char descriptor_table_protodef_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n5proto/topicData/topicDataRecord/topicD"
  "ataRecord.proto\022\016ubii.topicData\032/proto/t"
  "opicData/topicDataRecord/timestamp.proto"
  "\0329proto/topicData/topicDataRecord/dataSt"
  "ructure/lists.proto\032;proto/topicData/top"
  "icDataRecord/dataStructure/vector2.proto"
  "\032;proto/topicData/topicDataRecord/dataSt"
  "ructure/vector3.proto\032;proto/topicData/t"
  "opicDataRecord/dataStructure/vector4.pro"
  "to\032>proto/topicData/topicDataRecord/data"
  "Structure/quaternion.proto\032=proto/topicD"
  "ata/topicDataRecord/dataStructure/matrix"
  "3x2.proto\032=proto/topicData/topicDataReco"
  "rd/dataStructure/matrix4x4.proto\0329proto/"
  "topicData/topicDataRecord/dataStructure/"
  "color.proto\032>proto/topicData/topicDataRe"
  "cord/dataStructure/touchEvent.proto\032<pro"
  "to/topicData/topicDataRecord/dataStructu"
  "re/keyEvent.proto\032>proto/topicData/topic"
  "DataRecord/dataStructure/mouseEvent.prot"
  "o\032<proto/topicData/topicDataRecord/dataS"
  "tructure/myoEvent.proto\032:proto/topicData"
  "/topicDataRecord/dataStructure/pose2d.pr"
  "oto\032:proto/topicData/topicDataRecord/dat"
  "aStructure/pose3d.proto\032<proto/topicData"
  "/topicDataRecord/dataStructure/object2d."
  "proto\032<proto/topicData/topicDataRecord/d"
  "ataStructure/object3d.proto\0329proto/topic"
  "Data/topicDataRecord/dataStructure/image"
  ".proto\032\034proto/sessions/session.proto\032\'pr"
  "oto/processing/processingModule.proto\"\370\013"
  "\n\017TopicDataRecord\022\r\n\005topic\030\001 \001(\t\022,\n\ttime"
  "stamp\030\002 \001(\0132\031.ubii.topicData.Timestamp\022\020"
  "\n\006double\030\003 \001(\001H\000\022\016\n\004bool\030\004 \001(\010H\000\022\020\n\006stri"
  "ng\030\005 \001(\tH\000\022.\n\007vector2\030\006 \001(\0132\033.ubii.dataS"
  "tructure.Vector2H\000\022.\n\007vector3\030\007 \001(\0132\033.ub"
  "ii.dataStructure.Vector3H\000\022.\n\007vector4\030\010 "
  "\001(\0132\033.ubii.dataStructure.Vector4H\000\0224\n\nqu"
  "aternion\030\t \001(\0132\036.ubii.dataStructure.Quat"
  "ernionH\000\0222\n\tmatrix3x2\030\n \001(\0132\035.ubii.dataS"
  "tructure.Matrix3x2H\000\0222\n\tmatrix4x4\030\013 \001(\0132"
  "\035.ubii.dataStructure.Matrix4x4H\000\022*\n\005colo"
  "r\030\014 \001(\0132\031.ubii.dataStructure.ColorH\000\0225\n\013"
  "touch_event\030\r \001(\0132\036.ubii.dataStructure.T"
  "ouchEventH\000\0221\n\tkey_event\030\016 \001(\0132\034.ubii.da"
  "taStructure.KeyEventH\000\0225\n\013mouse_event\030\017 "
  "\001(\0132\036.ubii.dataStructure.MouseEventH\000\0221\n"
  "\tmyo_event\030\020 \001(\0132\034.ubii.dataStructure.My"
  "oEventH\000\022,\n\006pose2D\030\021 \001(\0132\032.ubii.dataStru"
  "cture.Pose2DH\000\022,\n\006pose3D\030\022 \001(\0132\032.ubii.da"
  "taStructure.Pose3DH\000\0220\n\010object2D\030\023 \001(\0132\034"
  ".ubii.dataStructure.Object2DH\000\0220\n\010object"
  "3D\030\024 \001(\0132\034.ubii.dataStructure.Object3DH\000"
  "\0229\n\robject2D_list\030\025 \001(\0132 .ubii.dataStruc"
  "ture.Object2DListH\000\0229\n\robject3D_list\030\026 \001"
  "(\0132 .ubii.dataStructure.Object3DListH\000\022\017"
  "\n\005int32\030\027 \001(\005H\000\022\017\n\005float\030\030 \001(\002H\000\0223\n\nint3"
  "2_list\030\031 \001(\0132\035.ubii.dataStructure.Int32L"
  "istH\000\0223\n\nfloat_list\030\032 \001(\0132\035.ubii.dataStr"
  "ucture.FloatListH\000\0225\n\013double_list\030\033 \001(\0132"
  "\036.ubii.dataStructure.DoubleListH\000\0225\n\013str"
  "ing_list\030\034 \001(\0132\036.ubii.dataStructure.Stri"
  "ngListH\000\0221\n\tbool_list\030\035 \001(\0132\034.ubii.dataS"
  "tructure.BoolListH\000\022.\n\007image2D\030\036 \001(\0132\033.u"
  "bii.dataStructure.Image2DH\000\0227\n\014image2D_l"
  "ist\030\037 \001(\0132\037.ubii.dataStructure.Image2DLi"
  "stH\000\022)\n\007session\030  \001(\0132\026.ubii.sessions.Se"
  "ssionH\000\022G\n\026processing_module_list\030! \001(\0132"
  "%.ubii.processing.ProcessingModuleListH\000"
  "B\006\n\004type\"H\n\023TopicDataRecordList\0221\n\010eleme"
  "nts\030\001 \003(\0132\037.ubii.topicData.TopicDataReco"
  "rdb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_deps[20] = {
  &::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto,
  &::descriptor_table_proto_2fsessions_2fsession_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fcolor_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fimage_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fkeyEvent_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix3x2_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix4x4_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmouseEvent_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject2d_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fquaternion_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector2_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector3_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector4_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftimestamp_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_sccs[2] = {
  &scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base,
  &scc_info_TopicDataRecordList_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_once;
static bool descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto = {
  &descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_initialized, descriptor_table_protodef_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto, "proto/topicData/topicDataRecord/topicDataRecord.proto", 2850,
  &descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_once, descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_sccs, descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_deps, 2, 20,
  schemas, file_default_instances, TableStruct_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto::offsets,
  file_level_metadata_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto, 2, file_level_enum_descriptors_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto, file_level_service_descriptors_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto), true);
namespace ubii {
namespace topicData {

// ===================================================================

void TopicDataRecord::InitAsDefaultInstance() {
  ::ubii::topicData::_TopicDataRecord_default_instance_._instance.get_mutable()->timestamp_ = const_cast< ::ubii::topicData::Timestamp*>(
      ::ubii::topicData::Timestamp::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.double__ = 0;
  ::ubii::topicData::_TopicDataRecord_default_instance_.bool__ = false;
  ::ubii::topicData::_TopicDataRecord_default_instance_.string_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::ubii::topicData::_TopicDataRecord_default_instance_.vector2_ = const_cast< ::ubii::dataStructure::Vector2*>(
      ::ubii::dataStructure::Vector2::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.vector3_ = const_cast< ::ubii::dataStructure::Vector3*>(
      ::ubii::dataStructure::Vector3::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.vector4_ = const_cast< ::ubii::dataStructure::Vector4*>(
      ::ubii::dataStructure::Vector4::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.quaternion_ = const_cast< ::ubii::dataStructure::Quaternion*>(
      ::ubii::dataStructure::Quaternion::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.matrix3x2_ = const_cast< ::ubii::dataStructure::Matrix3x2*>(
      ::ubii::dataStructure::Matrix3x2::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.matrix4x4_ = const_cast< ::ubii::dataStructure::Matrix4x4*>(
      ::ubii::dataStructure::Matrix4x4::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.color_ = const_cast< ::ubii::dataStructure::Color*>(
      ::ubii::dataStructure::Color::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.touch_event_ = const_cast< ::ubii::dataStructure::TouchEvent*>(
      ::ubii::dataStructure::TouchEvent::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.key_event_ = const_cast< ::ubii::dataStructure::KeyEvent*>(
      ::ubii::dataStructure::KeyEvent::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.mouse_event_ = const_cast< ::ubii::dataStructure::MouseEvent*>(
      ::ubii::dataStructure::MouseEvent::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.myo_event_ = const_cast< ::ubii::dataStructure::MyoEvent*>(
      ::ubii::dataStructure::MyoEvent::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.pose2d_ = const_cast< ::ubii::dataStructure::Pose2D*>(
      ::ubii::dataStructure::Pose2D::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.pose3d_ = const_cast< ::ubii::dataStructure::Pose3D*>(
      ::ubii::dataStructure::Pose3D::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.object2d_ = const_cast< ::ubii::dataStructure::Object2D*>(
      ::ubii::dataStructure::Object2D::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.object3d_ = const_cast< ::ubii::dataStructure::Object3D*>(
      ::ubii::dataStructure::Object3D::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.object2d_list_ = const_cast< ::ubii::dataStructure::Object2DList*>(
      ::ubii::dataStructure::Object2DList::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.object3d_list_ = const_cast< ::ubii::dataStructure::Object3DList*>(
      ::ubii::dataStructure::Object3DList::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.int32_ = 0;
  ::ubii::topicData::_TopicDataRecord_default_instance_.float__ = 0;
  ::ubii::topicData::_TopicDataRecord_default_instance_.int32_list_ = const_cast< ::ubii::dataStructure::Int32List*>(
      ::ubii::dataStructure::Int32List::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.float_list_ = const_cast< ::ubii::dataStructure::FloatList*>(
      ::ubii::dataStructure::FloatList::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.double_list_ = const_cast< ::ubii::dataStructure::DoubleList*>(
      ::ubii::dataStructure::DoubleList::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.string_list_ = const_cast< ::ubii::dataStructure::StringList*>(
      ::ubii::dataStructure::StringList::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.bool_list_ = const_cast< ::ubii::dataStructure::BoolList*>(
      ::ubii::dataStructure::BoolList::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.image2d_ = const_cast< ::ubii::dataStructure::Image2D*>(
      ::ubii::dataStructure::Image2D::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.image2d_list_ = const_cast< ::ubii::dataStructure::Image2DList*>(
      ::ubii::dataStructure::Image2DList::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.session_ = const_cast< ::ubii::sessions::Session*>(
      ::ubii::sessions::Session::internal_default_instance());
  ::ubii::topicData::_TopicDataRecord_default_instance_.processing_module_list_ = const_cast< ::ubii::processing::ProcessingModuleList*>(
      ::ubii::processing::ProcessingModuleList::internal_default_instance());
}
class TopicDataRecord::_Internal {
 public:
  static const ::ubii::topicData::Timestamp& timestamp(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Vector2& vector2(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Vector3& vector3(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Vector4& vector4(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Quaternion& quaternion(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Matrix3x2& matrix3x2(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Matrix4x4& matrix4x4(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Color& color(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::TouchEvent& touch_event(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::KeyEvent& key_event(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::MouseEvent& mouse_event(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::MyoEvent& myo_event(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Pose2D& pose2d(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Pose3D& pose3d(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Object2D& object2d(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Object3D& object3d(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Object2DList& object2d_list(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Object3DList& object3d_list(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Int32List& int32_list(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::FloatList& float_list(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::DoubleList& double_list(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::StringList& string_list(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::BoolList& bool_list(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Image2D& image2d(const TopicDataRecord* msg);
  static const ::ubii::dataStructure::Image2DList& image2d_list(const TopicDataRecord* msg);
  static const ::ubii::sessions::Session& session(const TopicDataRecord* msg);
  static const ::ubii::processing::ProcessingModuleList& processing_module_list(const TopicDataRecord* msg);
};

const ::ubii::topicData::Timestamp&
TopicDataRecord::_Internal::timestamp(const TopicDataRecord* msg) {
  return *msg->timestamp_;
}
const ::ubii::dataStructure::Vector2&
TopicDataRecord::_Internal::vector2(const TopicDataRecord* msg) {
  return *msg->type_.vector2_;
}
const ::ubii::dataStructure::Vector3&
TopicDataRecord::_Internal::vector3(const TopicDataRecord* msg) {
  return *msg->type_.vector3_;
}
const ::ubii::dataStructure::Vector4&
TopicDataRecord::_Internal::vector4(const TopicDataRecord* msg) {
  return *msg->type_.vector4_;
}
const ::ubii::dataStructure::Quaternion&
TopicDataRecord::_Internal::quaternion(const TopicDataRecord* msg) {
  return *msg->type_.quaternion_;
}
const ::ubii::dataStructure::Matrix3x2&
TopicDataRecord::_Internal::matrix3x2(const TopicDataRecord* msg) {
  return *msg->type_.matrix3x2_;
}
const ::ubii::dataStructure::Matrix4x4&
TopicDataRecord::_Internal::matrix4x4(const TopicDataRecord* msg) {
  return *msg->type_.matrix4x4_;
}
const ::ubii::dataStructure::Color&
TopicDataRecord::_Internal::color(const TopicDataRecord* msg) {
  return *msg->type_.color_;
}
const ::ubii::dataStructure::TouchEvent&
TopicDataRecord::_Internal::touch_event(const TopicDataRecord* msg) {
  return *msg->type_.touch_event_;
}
const ::ubii::dataStructure::KeyEvent&
TopicDataRecord::_Internal::key_event(const TopicDataRecord* msg) {
  return *msg->type_.key_event_;
}
const ::ubii::dataStructure::MouseEvent&
TopicDataRecord::_Internal::mouse_event(const TopicDataRecord* msg) {
  return *msg->type_.mouse_event_;
}
const ::ubii::dataStructure::MyoEvent&
TopicDataRecord::_Internal::myo_event(const TopicDataRecord* msg) {
  return *msg->type_.myo_event_;
}
const ::ubii::dataStructure::Pose2D&
TopicDataRecord::_Internal::pose2d(const TopicDataRecord* msg) {
  return *msg->type_.pose2d_;
}
const ::ubii::dataStructure::Pose3D&
TopicDataRecord::_Internal::pose3d(const TopicDataRecord* msg) {
  return *msg->type_.pose3d_;
}
const ::ubii::dataStructure::Object2D&
TopicDataRecord::_Internal::object2d(const TopicDataRecord* msg) {
  return *msg->type_.object2d_;
}
const ::ubii::dataStructure::Object3D&
TopicDataRecord::_Internal::object3d(const TopicDataRecord* msg) {
  return *msg->type_.object3d_;
}
const ::ubii::dataStructure::Object2DList&
TopicDataRecord::_Internal::object2d_list(const TopicDataRecord* msg) {
  return *msg->type_.object2d_list_;
}
const ::ubii::dataStructure::Object3DList&
TopicDataRecord::_Internal::object3d_list(const TopicDataRecord* msg) {
  return *msg->type_.object3d_list_;
}
const ::ubii::dataStructure::Int32List&
TopicDataRecord::_Internal::int32_list(const TopicDataRecord* msg) {
  return *msg->type_.int32_list_;
}
const ::ubii::dataStructure::FloatList&
TopicDataRecord::_Internal::float_list(const TopicDataRecord* msg) {
  return *msg->type_.float_list_;
}
const ::ubii::dataStructure::DoubleList&
TopicDataRecord::_Internal::double_list(const TopicDataRecord* msg) {
  return *msg->type_.double_list_;
}
const ::ubii::dataStructure::StringList&
TopicDataRecord::_Internal::string_list(const TopicDataRecord* msg) {
  return *msg->type_.string_list_;
}
const ::ubii::dataStructure::BoolList&
TopicDataRecord::_Internal::bool_list(const TopicDataRecord* msg) {
  return *msg->type_.bool_list_;
}
const ::ubii::dataStructure::Image2D&
TopicDataRecord::_Internal::image2d(const TopicDataRecord* msg) {
  return *msg->type_.image2d_;
}
const ::ubii::dataStructure::Image2DList&
TopicDataRecord::_Internal::image2d_list(const TopicDataRecord* msg) {
  return *msg->type_.image2d_list_;
}
const ::ubii::sessions::Session&
TopicDataRecord::_Internal::session(const TopicDataRecord* msg) {
  return *msg->type_.session_;
}
const ::ubii::processing::ProcessingModuleList&
TopicDataRecord::_Internal::processing_module_list(const TopicDataRecord* msg) {
  return *msg->type_.processing_module_list_;
}
void TopicDataRecord::clear_timestamp() {
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
}
void TopicDataRecord::set_allocated_vector2(::ubii::dataStructure::Vector2* vector2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (vector2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector2, submessage_arena);
    }
    set_has_vector2();
    type_.vector2_ = vector2;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.vector2)
}
void TopicDataRecord::clear_vector2() {
  if (_internal_has_vector2()) {
    delete type_.vector2_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_vector3(::ubii::dataStructure::Vector3* vector3) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (vector3) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector3 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector3, submessage_arena);
    }
    set_has_vector3();
    type_.vector3_ = vector3;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.vector3)
}
void TopicDataRecord::clear_vector3() {
  if (_internal_has_vector3()) {
    delete type_.vector3_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_vector4(::ubii::dataStructure::Vector4* vector4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (vector4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      vector4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vector4, submessage_arena);
    }
    set_has_vector4();
    type_.vector4_ = vector4;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.vector4)
}
void TopicDataRecord::clear_vector4() {
  if (_internal_has_vector4()) {
    delete type_.vector4_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_quaternion(::ubii::dataStructure::Quaternion* quaternion) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (quaternion) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      quaternion = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, quaternion, submessage_arena);
    }
    set_has_quaternion();
    type_.quaternion_ = quaternion;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.quaternion)
}
void TopicDataRecord::clear_quaternion() {
  if (_internal_has_quaternion()) {
    delete type_.quaternion_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_matrix3x2(::ubii::dataStructure::Matrix3x2* matrix3x2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (matrix3x2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matrix3x2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrix3x2, submessage_arena);
    }
    set_has_matrix3x2();
    type_.matrix3x2_ = matrix3x2;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.matrix3x2)
}
void TopicDataRecord::clear_matrix3x2() {
  if (_internal_has_matrix3x2()) {
    delete type_.matrix3x2_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_matrix4x4(::ubii::dataStructure::Matrix4x4* matrix4x4) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (matrix4x4) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      matrix4x4 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrix4x4, submessage_arena);
    }
    set_has_matrix4x4();
    type_.matrix4x4_ = matrix4x4;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.matrix4x4)
}
void TopicDataRecord::clear_matrix4x4() {
  if (_internal_has_matrix4x4()) {
    delete type_.matrix4x4_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_color(::ubii::dataStructure::Color* color) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (color) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      color = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, color, submessage_arena);
    }
    set_has_color();
    type_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.color)
}
void TopicDataRecord::clear_color() {
  if (_internal_has_color()) {
    delete type_.color_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_touch_event(::ubii::dataStructure::TouchEvent* touch_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (touch_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      touch_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touch_event, submessage_arena);
    }
    set_has_touch_event();
    type_.touch_event_ = touch_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.touch_event)
}
void TopicDataRecord::clear_touch_event() {
  if (_internal_has_touch_event()) {
    delete type_.touch_event_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_key_event(::ubii::dataStructure::KeyEvent* key_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (key_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      key_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key_event, submessage_arena);
    }
    set_has_key_event();
    type_.key_event_ = key_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.key_event)
}
void TopicDataRecord::clear_key_event() {
  if (_internal_has_key_event()) {
    delete type_.key_event_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_mouse_event(::ubii::dataStructure::MouseEvent* mouse_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (mouse_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      mouse_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mouse_event, submessage_arena);
    }
    set_has_mouse_event();
    type_.mouse_event_ = mouse_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.mouse_event)
}
void TopicDataRecord::clear_mouse_event() {
  if (_internal_has_mouse_event()) {
    delete type_.mouse_event_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_myo_event(::ubii::dataStructure::MyoEvent* myo_event) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (myo_event) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      myo_event = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, myo_event, submessage_arena);
    }
    set_has_myo_event();
    type_.myo_event_ = myo_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.myo_event)
}
void TopicDataRecord::clear_myo_event() {
  if (_internal_has_myo_event()) {
    delete type_.myo_event_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_pose2d(::ubii::dataStructure::Pose2D* pose2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (pose2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose2d, submessage_arena);
    }
    set_has_pose2d();
    type_.pose2d_ = pose2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.pose2D)
}
void TopicDataRecord::clear_pose2d() {
  if (_internal_has_pose2d()) {
    delete type_.pose2d_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_pose3d(::ubii::dataStructure::Pose3D* pose3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (pose3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      pose3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pose3d, submessage_arena);
    }
    set_has_pose3d();
    type_.pose3d_ = pose3d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.pose3D)
}
void TopicDataRecord::clear_pose3d() {
  if (_internal_has_pose3d()) {
    delete type_.pose3d_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_object2d(::ubii::dataStructure::Object2D* object2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (object2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object2d, submessage_arena);
    }
    set_has_object2d();
    type_.object2d_ = object2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.object2D)
}
void TopicDataRecord::clear_object2d() {
  if (_internal_has_object2d()) {
    delete type_.object2d_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_object3d(::ubii::dataStructure::Object3D* object3d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (object3d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object3d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object3d, submessage_arena);
    }
    set_has_object3d();
    type_.object3d_ = object3d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.object3D)
}
void TopicDataRecord::clear_object3d() {
  if (_internal_has_object3d()) {
    delete type_.object3d_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_object2d_list(::ubii::dataStructure::Object2DList* object2d_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (object2d_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object2d_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object2d_list, submessage_arena);
    }
    set_has_object2d_list();
    type_.object2d_list_ = object2d_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.object2D_list)
}
void TopicDataRecord::clear_object2d_list() {
  if (_internal_has_object2d_list()) {
    delete type_.object2d_list_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_object3d_list(::ubii::dataStructure::Object3DList* object3d_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (object3d_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      object3d_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, object3d_list, submessage_arena);
    }
    set_has_object3d_list();
    type_.object3d_list_ = object3d_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.object3D_list)
}
void TopicDataRecord::clear_object3d_list() {
  if (_internal_has_object3d_list()) {
    delete type_.object3d_list_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_int32_list(::ubii::dataStructure::Int32List* int32_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (int32_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      int32_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, int32_list, submessage_arena);
    }
    set_has_int32_list();
    type_.int32_list_ = int32_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.int32_list)
}
void TopicDataRecord::clear_int32_list() {
  if (_internal_has_int32_list()) {
    delete type_.int32_list_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_float_list(::ubii::dataStructure::FloatList* float_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (float_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      float_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, float_list, submessage_arena);
    }
    set_has_float_list();
    type_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.float_list)
}
void TopicDataRecord::clear_float_list() {
  if (_internal_has_float_list()) {
    delete type_.float_list_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_double_list(::ubii::dataStructure::DoubleList* double_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (double_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      double_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, double_list, submessage_arena);
    }
    set_has_double_list();
    type_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.double_list)
}
void TopicDataRecord::clear_double_list() {
  if (_internal_has_double_list()) {
    delete type_.double_list_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_string_list(::ubii::dataStructure::StringList* string_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (string_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      string_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, string_list, submessage_arena);
    }
    set_has_string_list();
    type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.string_list)
}
void TopicDataRecord::clear_string_list() {
  if (_internal_has_string_list()) {
    delete type_.string_list_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_bool_list(::ubii::dataStructure::BoolList* bool_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (bool_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      bool_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bool_list, submessage_arena);
    }
    set_has_bool_list();
    type_.bool_list_ = bool_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.bool_list)
}
void TopicDataRecord::clear_bool_list() {
  if (_internal_has_bool_list()) {
    delete type_.bool_list_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_image2d(::ubii::dataStructure::Image2D* image2d) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (image2d) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image2d = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image2d, submessage_arena);
    }
    set_has_image2d();
    type_.image2d_ = image2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.image2D)
}
void TopicDataRecord::clear_image2d() {
  if (_internal_has_image2d()) {
    delete type_.image2d_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_image2d_list(::ubii::dataStructure::Image2DList* image2d_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (image2d_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      image2d_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, image2d_list, submessage_arena);
    }
    set_has_image2d_list();
    type_.image2d_list_ = image2d_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.image2D_list)
}
void TopicDataRecord::clear_image2d_list() {
  if (_internal_has_image2d_list()) {
    delete type_.image2d_list_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_session(::ubii::sessions::Session* session) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (session) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      session = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, session, submessage_arena);
    }
    set_has_session();
    type_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.session)
}
void TopicDataRecord::clear_session() {
  if (_internal_has_session()) {
    delete type_.session_;
    clear_has_type();
  }
}
void TopicDataRecord::set_allocated_processing_module_list(::ubii::processing::ProcessingModuleList* processing_module_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (processing_module_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processing_module_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_module_list, submessage_arena);
    }
    set_has_processing_module_list();
    type_.processing_module_list_ = processing_module_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.processing_module_list)
}
void TopicDataRecord::clear_processing_module_list() {
  if (_internal_has_processing_module_list()) {
    delete type_.processing_module_list_;
    clear_has_type();
  }
}
TopicDataRecord::TopicDataRecord()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.topicData.TopicDataRecord)
}
TopicDataRecord::TopicDataRecord(const TopicDataRecord& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_topic().empty()) {
    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from._internal_has_timestamp()) {
    timestamp_ = new ::ubii::topicData::Timestamp(*from.timestamp_);
  } else {
    timestamp_ = nullptr;
  }
  clear_has_type();
  switch (from.type_case()) {
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kVector2: {
      _internal_mutable_vector2()->::ubii::dataStructure::Vector2::MergeFrom(from._internal_vector2());
      break;
    }
    case kVector3: {
      _internal_mutable_vector3()->::ubii::dataStructure::Vector3::MergeFrom(from._internal_vector3());
      break;
    }
    case kVector4: {
      _internal_mutable_vector4()->::ubii::dataStructure::Vector4::MergeFrom(from._internal_vector4());
      break;
    }
    case kQuaternion: {
      _internal_mutable_quaternion()->::ubii::dataStructure::Quaternion::MergeFrom(from._internal_quaternion());
      break;
    }
    case kMatrix3X2: {
      _internal_mutable_matrix3x2()->::ubii::dataStructure::Matrix3x2::MergeFrom(from._internal_matrix3x2());
      break;
    }
    case kMatrix4X4: {
      _internal_mutable_matrix4x4()->::ubii::dataStructure::Matrix4x4::MergeFrom(from._internal_matrix4x4());
      break;
    }
    case kColor: {
      _internal_mutable_color()->::ubii::dataStructure::Color::MergeFrom(from._internal_color());
      break;
    }
    case kTouchEvent: {
      _internal_mutable_touch_event()->::ubii::dataStructure::TouchEvent::MergeFrom(from._internal_touch_event());
      break;
    }
    case kKeyEvent: {
      _internal_mutable_key_event()->::ubii::dataStructure::KeyEvent::MergeFrom(from._internal_key_event());
      break;
    }
    case kMouseEvent: {
      _internal_mutable_mouse_event()->::ubii::dataStructure::MouseEvent::MergeFrom(from._internal_mouse_event());
      break;
    }
    case kMyoEvent: {
      _internal_mutable_myo_event()->::ubii::dataStructure::MyoEvent::MergeFrom(from._internal_myo_event());
      break;
    }
    case kPose2D: {
      _internal_mutable_pose2d()->::ubii::dataStructure::Pose2D::MergeFrom(from._internal_pose2d());
      break;
    }
    case kPose3D: {
      _internal_mutable_pose3d()->::ubii::dataStructure::Pose3D::MergeFrom(from._internal_pose3d());
      break;
    }
    case kObject2D: {
      _internal_mutable_object2d()->::ubii::dataStructure::Object2D::MergeFrom(from._internal_object2d());
      break;
    }
    case kObject3D: {
      _internal_mutable_object3d()->::ubii::dataStructure::Object3D::MergeFrom(from._internal_object3d());
      break;
    }
    case kObject2DList: {
      _internal_mutable_object2d_list()->::ubii::dataStructure::Object2DList::MergeFrom(from._internal_object2d_list());
      break;
    }
    case kObject3DList: {
      _internal_mutable_object3d_list()->::ubii::dataStructure::Object3DList::MergeFrom(from._internal_object3d_list());
      break;
    }
    case kInt32: {
      _internal_set_int32(from._internal_int32());
      break;
    }
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kInt32List: {
      _internal_mutable_int32_list()->::ubii::dataStructure::Int32List::MergeFrom(from._internal_int32_list());
      break;
    }
    case kFloatList: {
      _internal_mutable_float_list()->::ubii::dataStructure::FloatList::MergeFrom(from._internal_float_list());
      break;
    }
    case kDoubleList: {
      _internal_mutable_double_list()->::ubii::dataStructure::DoubleList::MergeFrom(from._internal_double_list());
      break;
    }
    case kStringList: {
      _internal_mutable_string_list()->::ubii::dataStructure::StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kBoolList: {
      _internal_mutable_bool_list()->::ubii::dataStructure::BoolList::MergeFrom(from._internal_bool_list());
      break;
    }
    case kImage2D: {
      _internal_mutable_image2d()->::ubii::dataStructure::Image2D::MergeFrom(from._internal_image2d());
      break;
    }
    case kImage2DList: {
      _internal_mutable_image2d_list()->::ubii::dataStructure::Image2DList::MergeFrom(from._internal_image2d_list());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::ubii::sessions::Session::MergeFrom(from._internal_session());
      break;
    }
    case kProcessingModuleList: {
      _internal_mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from._internal_processing_module_list());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ubii.topicData.TopicDataRecord)
}

void TopicDataRecord::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base);
  topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  timestamp_ = nullptr;
  clear_has_type();
}

TopicDataRecord::~TopicDataRecord() {
  // @@protoc_insertion_point(destructor:ubii.topicData.TopicDataRecord)
  SharedDtor();
}

void TopicDataRecord::SharedDtor() {
  topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete timestamp_;
  if (has_type()) {
    clear_type();
  }
}

void TopicDataRecord::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicDataRecord& TopicDataRecord::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base);
  return *internal_default_instance();
}


void TopicDataRecord::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.topicData.TopicDataRecord)
  switch (type_case()) {
    case kDouble: {
      // No need to clear
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kString: {
      type_.string_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kVector2: {
      delete type_.vector2_;
      break;
    }
    case kVector3: {
      delete type_.vector3_;
      break;
    }
    case kVector4: {
      delete type_.vector4_;
      break;
    }
    case kQuaternion: {
      delete type_.quaternion_;
      break;
    }
    case kMatrix3X2: {
      delete type_.matrix3x2_;
      break;
    }
    case kMatrix4X4: {
      delete type_.matrix4x4_;
      break;
    }
    case kColor: {
      delete type_.color_;
      break;
    }
    case kTouchEvent: {
      delete type_.touch_event_;
      break;
    }
    case kKeyEvent: {
      delete type_.key_event_;
      break;
    }
    case kMouseEvent: {
      delete type_.mouse_event_;
      break;
    }
    case kMyoEvent: {
      delete type_.myo_event_;
      break;
    }
    case kPose2D: {
      delete type_.pose2d_;
      break;
    }
    case kPose3D: {
      delete type_.pose3d_;
      break;
    }
    case kObject2D: {
      delete type_.object2d_;
      break;
    }
    case kObject3D: {
      delete type_.object3d_;
      break;
    }
    case kObject2DList: {
      delete type_.object2d_list_;
      break;
    }
    case kObject3DList: {
      delete type_.object3d_list_;
      break;
    }
    case kInt32: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kInt32List: {
      delete type_.int32_list_;
      break;
    }
    case kFloatList: {
      delete type_.float_list_;
      break;
    }
    case kDoubleList: {
      delete type_.double_list_;
      break;
    }
    case kStringList: {
      delete type_.string_list_;
      break;
    }
    case kBoolList: {
      delete type_.bool_list_;
      break;
    }
    case kImage2D: {
      delete type_.image2d_;
      break;
    }
    case kImage2DList: {
      delete type_.image2d_list_;
      break;
    }
    case kSession: {
      delete type_.session_;
      break;
    }
    case kProcessingModuleList: {
      delete type_.processing_module_list_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TopicDataRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.topicData.TopicDataRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  topic_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && timestamp_ != nullptr) {
    delete timestamp_;
  }
  timestamp_ = nullptr;
  clear_type();
  _internal_metadata_.Clear();
}

const char* TopicDataRecord::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.topicData.TopicDataRecord.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.topicData.Timestamp timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_timestamp(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double double = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _internal_set_double_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr));
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _internal_set_bool_(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string string = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_string();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.topicData.TopicDataRecord.string"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Vector2 vector2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Vector3 vector3 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector3(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Vector4 vector4 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_vector4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Quaternion quaternion = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_quaternion(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix3x2(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr = ctx->ParseMessage(_internal_mutable_matrix4x4(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Color color = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_color(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.TouchEvent touch_event = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_touch_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.KeyEvent key_event = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_key_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.MouseEvent mouse_event = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr = ctx->ParseMessage(_internal_mutable_mouse_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.MyoEvent myo_event = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr = ctx->ParseMessage(_internal_mutable_myo_event(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Pose2D pose2D = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Pose3D pose3D = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr = ctx->ParseMessage(_internal_mutable_pose3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Object2D object2D = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr = ctx->ParseMessage(_internal_mutable_object2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Object3D object3D = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_object3d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Object2DList object2D_list = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr = ctx->ParseMessage(_internal_mutable_object2d_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Object3DList object3D_list = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr = ctx->ParseMessage(_internal_mutable_object3d_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 int32 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _internal_set_int32(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float float = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _internal_set_float_(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Int32List int32_list = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr = ctx->ParseMessage(_internal_mutable_int32_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.FloatList float_list = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr = ctx->ParseMessage(_internal_mutable_float_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.DoubleList double_list = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr = ctx->ParseMessage(_internal_mutable_double_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.StringList string_list = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_string_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.BoolList bool_list = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr = ctx->ParseMessage(_internal_mutable_bool_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Image2D image2D = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr = ctx->ParseMessage(_internal_mutable_image2d(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.dataStructure.Image2DList image2D_list = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr = ctx->ParseMessage(_internal_mutable_image2d_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.sessions.Session session = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr = ctx->ParseMessage(_internal_mutable_session(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.processing.ProcessingModuleList processing_module_list = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_processing_module_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicDataRecord::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.topicData.TopicDataRecord)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.topicData.TopicDataRecord.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // .ubii.topicData.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::timestamp(this), target, stream);
  }

  // double double = 3;
  if (_internal_has_double_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_double_(), target);
  }

  // bool bool = 4;
  if (_internal_has_bool_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_bool_(), target);
  }

  // string string = 5;
  if (_internal_has_string()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_string().data(), static_cast<int>(this->_internal_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.topicData.TopicDataRecord.string");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_string(), target);
  }

  // .ubii.dataStructure.Vector2 vector2 = 6;
  if (_internal_has_vector2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::vector2(this), target, stream);
  }

  // .ubii.dataStructure.Vector3 vector3 = 7;
  if (_internal_has_vector3()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::vector3(this), target, stream);
  }

  // .ubii.dataStructure.Vector4 vector4 = 8;
  if (_internal_has_vector4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::vector4(this), target, stream);
  }

  // .ubii.dataStructure.Quaternion quaternion = 9;
  if (_internal_has_quaternion()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::quaternion(this), target, stream);
  }

  // .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
  if (_internal_has_matrix3x2()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        10, _Internal::matrix3x2(this), target, stream);
  }

  // .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
  if (_internal_has_matrix4x4()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        11, _Internal::matrix4x4(this), target, stream);
  }

  // .ubii.dataStructure.Color color = 12;
  if (_internal_has_color()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        12, _Internal::color(this), target, stream);
  }

  // .ubii.dataStructure.TouchEvent touch_event = 13;
  if (_internal_has_touch_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        13, _Internal::touch_event(this), target, stream);
  }

  // .ubii.dataStructure.KeyEvent key_event = 14;
  if (_internal_has_key_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        14, _Internal::key_event(this), target, stream);
  }

  // .ubii.dataStructure.MouseEvent mouse_event = 15;
  if (_internal_has_mouse_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        15, _Internal::mouse_event(this), target, stream);
  }

  // .ubii.dataStructure.MyoEvent myo_event = 16;
  if (_internal_has_myo_event()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        16, _Internal::myo_event(this), target, stream);
  }

  // .ubii.dataStructure.Pose2D pose2D = 17;
  if (_internal_has_pose2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        17, _Internal::pose2d(this), target, stream);
  }

  // .ubii.dataStructure.Pose3D pose3D = 18;
  if (_internal_has_pose3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        18, _Internal::pose3d(this), target, stream);
  }

  // .ubii.dataStructure.Object2D object2D = 19;
  if (_internal_has_object2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        19, _Internal::object2d(this), target, stream);
  }

  // .ubii.dataStructure.Object3D object3D = 20;
  if (_internal_has_object3d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        20, _Internal::object3d(this), target, stream);
  }

  // .ubii.dataStructure.Object2DList object2D_list = 21;
  if (_internal_has_object2d_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        21, _Internal::object2d_list(this), target, stream);
  }

  // .ubii.dataStructure.Object3DList object3D_list = 22;
  if (_internal_has_object3d_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        22, _Internal::object3d_list(this), target, stream);
  }

  // int32 int32 = 23;
  if (_internal_has_int32()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_int32(), target);
  }

  // float float = 24;
  if (_internal_has_float_()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_float_(), target);
  }

  // .ubii.dataStructure.Int32List int32_list = 25;
  if (_internal_has_int32_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        25, _Internal::int32_list(this), target, stream);
  }

  // .ubii.dataStructure.FloatList float_list = 26;
  if (_internal_has_float_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        26, _Internal::float_list(this), target, stream);
  }

  // .ubii.dataStructure.DoubleList double_list = 27;
  if (_internal_has_double_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        27, _Internal::double_list(this), target, stream);
  }

  // .ubii.dataStructure.StringList string_list = 28;
  if (_internal_has_string_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::string_list(this), target, stream);
  }

  // .ubii.dataStructure.BoolList bool_list = 29;
  if (_internal_has_bool_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        29, _Internal::bool_list(this), target, stream);
  }

  // .ubii.dataStructure.Image2D image2D = 30;
  if (_internal_has_image2d()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        30, _Internal::image2d(this), target, stream);
  }

  // .ubii.dataStructure.Image2DList image2D_list = 31;
  if (_internal_has_image2d_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        31, _Internal::image2d_list(this), target, stream);
  }

  // .ubii.sessions.Session session = 32;
  if (_internal_has_session()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        32, _Internal::session(this), target, stream);
  }

  // .ubii.processing.ProcessingModuleList processing_module_list = 33;
  if (_internal_has_processing_module_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        33, _Internal::processing_module_list(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.topicData.TopicDataRecord)
  return target;
}

size_t TopicDataRecord::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.topicData.TopicDataRecord)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_topic());
  }

  // .ubii.topicData.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *timestamp_);
  }

  switch (type_case()) {
    // double double = 3;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // bool bool = 4;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // string string = 5;
    case kString: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_string());
      break;
    }
    // .ubii.dataStructure.Vector2 vector2 = 6;
    case kVector2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.vector2_);
      break;
    }
    // .ubii.dataStructure.Vector3 vector3 = 7;
    case kVector3: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.vector3_);
      break;
    }
    // .ubii.dataStructure.Vector4 vector4 = 8;
    case kVector4: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.vector4_);
      break;
    }
    // .ubii.dataStructure.Quaternion quaternion = 9;
    case kQuaternion: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.quaternion_);
      break;
    }
    // .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
    case kMatrix3X2: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.matrix3x2_);
      break;
    }
    // .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
    case kMatrix4X4: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.matrix4x4_);
      break;
    }
    // .ubii.dataStructure.Color color = 12;
    case kColor: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.color_);
      break;
    }
    // .ubii.dataStructure.TouchEvent touch_event = 13;
    case kTouchEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.touch_event_);
      break;
    }
    // .ubii.dataStructure.KeyEvent key_event = 14;
    case kKeyEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.key_event_);
      break;
    }
    // .ubii.dataStructure.MouseEvent mouse_event = 15;
    case kMouseEvent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.mouse_event_);
      break;
    }
    // .ubii.dataStructure.MyoEvent myo_event = 16;
    case kMyoEvent: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.myo_event_);
      break;
    }
    // .ubii.dataStructure.Pose2D pose2D = 17;
    case kPose2D: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.pose2d_);
      break;
    }
    // .ubii.dataStructure.Pose3D pose3D = 18;
    case kPose3D: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.pose3d_);
      break;
    }
    // .ubii.dataStructure.Object2D object2D = 19;
    case kObject2D: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.object2d_);
      break;
    }
    // .ubii.dataStructure.Object3D object3D = 20;
    case kObject3D: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.object3d_);
      break;
    }
    // .ubii.dataStructure.Object2DList object2D_list = 21;
    case kObject2DList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.object2d_list_);
      break;
    }
    // .ubii.dataStructure.Object3DList object3D_list = 22;
    case kObject3DList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.object3d_list_);
      break;
    }
    // int32 int32 = 23;
    case kInt32: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_int32());
      break;
    }
    // float float = 24;
    case kFloat: {
      total_size += 2 + 4;
      break;
    }
    // .ubii.dataStructure.Int32List int32_list = 25;
    case kInt32List: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.int32_list_);
      break;
    }
    // .ubii.dataStructure.FloatList float_list = 26;
    case kFloatList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.float_list_);
      break;
    }
    // .ubii.dataStructure.DoubleList double_list = 27;
    case kDoubleList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.double_list_);
      break;
    }
    // .ubii.dataStructure.StringList string_list = 28;
    case kStringList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.string_list_);
      break;
    }
    // .ubii.dataStructure.BoolList bool_list = 29;
    case kBoolList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.bool_list_);
      break;
    }
    // .ubii.dataStructure.Image2D image2D = 30;
    case kImage2D: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.image2d_);
      break;
    }
    // .ubii.dataStructure.Image2DList image2D_list = 31;
    case kImage2DList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.image2d_list_);
      break;
    }
    // .ubii.sessions.Session session = 32;
    case kSession: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.session_);
      break;
    }
    // .ubii.processing.ProcessingModuleList processing_module_list = 33;
    case kProcessingModuleList: {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.processing_module_list_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicDataRecord::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.topicData.TopicDataRecord)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicDataRecord* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicDataRecord>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.topicData.TopicDataRecord)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.topicData.TopicDataRecord)
    MergeFrom(*source);
  }
}

void TopicDataRecord::MergeFrom(const TopicDataRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.topicData.TopicDataRecord)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_timestamp()) {
    _internal_mutable_timestamp()->::ubii::topicData::Timestamp::MergeFrom(from._internal_timestamp());
  }
  switch (from.type_case()) {
    case kDouble: {
      _internal_set_double_(from._internal_double_());
      break;
    }
    case kBool: {
      _internal_set_bool_(from._internal_bool_());
      break;
    }
    case kString: {
      _internal_set_string(from._internal_string());
      break;
    }
    case kVector2: {
      _internal_mutable_vector2()->::ubii::dataStructure::Vector2::MergeFrom(from._internal_vector2());
      break;
    }
    case kVector3: {
      _internal_mutable_vector3()->::ubii::dataStructure::Vector3::MergeFrom(from._internal_vector3());
      break;
    }
    case kVector4: {
      _internal_mutable_vector4()->::ubii::dataStructure::Vector4::MergeFrom(from._internal_vector4());
      break;
    }
    case kQuaternion: {
      _internal_mutable_quaternion()->::ubii::dataStructure::Quaternion::MergeFrom(from._internal_quaternion());
      break;
    }
    case kMatrix3X2: {
      _internal_mutable_matrix3x2()->::ubii::dataStructure::Matrix3x2::MergeFrom(from._internal_matrix3x2());
      break;
    }
    case kMatrix4X4: {
      _internal_mutable_matrix4x4()->::ubii::dataStructure::Matrix4x4::MergeFrom(from._internal_matrix4x4());
      break;
    }
    case kColor: {
      _internal_mutable_color()->::ubii::dataStructure::Color::MergeFrom(from._internal_color());
      break;
    }
    case kTouchEvent: {
      _internal_mutable_touch_event()->::ubii::dataStructure::TouchEvent::MergeFrom(from._internal_touch_event());
      break;
    }
    case kKeyEvent: {
      _internal_mutable_key_event()->::ubii::dataStructure::KeyEvent::MergeFrom(from._internal_key_event());
      break;
    }
    case kMouseEvent: {
      _internal_mutable_mouse_event()->::ubii::dataStructure::MouseEvent::MergeFrom(from._internal_mouse_event());
      break;
    }
    case kMyoEvent: {
      _internal_mutable_myo_event()->::ubii::dataStructure::MyoEvent::MergeFrom(from._internal_myo_event());
      break;
    }
    case kPose2D: {
      _internal_mutable_pose2d()->::ubii::dataStructure::Pose2D::MergeFrom(from._internal_pose2d());
      break;
    }
    case kPose3D: {
      _internal_mutable_pose3d()->::ubii::dataStructure::Pose3D::MergeFrom(from._internal_pose3d());
      break;
    }
    case kObject2D: {
      _internal_mutable_object2d()->::ubii::dataStructure::Object2D::MergeFrom(from._internal_object2d());
      break;
    }
    case kObject3D: {
      _internal_mutable_object3d()->::ubii::dataStructure::Object3D::MergeFrom(from._internal_object3d());
      break;
    }
    case kObject2DList: {
      _internal_mutable_object2d_list()->::ubii::dataStructure::Object2DList::MergeFrom(from._internal_object2d_list());
      break;
    }
    case kObject3DList: {
      _internal_mutable_object3d_list()->::ubii::dataStructure::Object3DList::MergeFrom(from._internal_object3d_list());
      break;
    }
    case kInt32: {
      _internal_set_int32(from._internal_int32());
      break;
    }
    case kFloat: {
      _internal_set_float_(from._internal_float_());
      break;
    }
    case kInt32List: {
      _internal_mutable_int32_list()->::ubii::dataStructure::Int32List::MergeFrom(from._internal_int32_list());
      break;
    }
    case kFloatList: {
      _internal_mutable_float_list()->::ubii::dataStructure::FloatList::MergeFrom(from._internal_float_list());
      break;
    }
    case kDoubleList: {
      _internal_mutable_double_list()->::ubii::dataStructure::DoubleList::MergeFrom(from._internal_double_list());
      break;
    }
    case kStringList: {
      _internal_mutable_string_list()->::ubii::dataStructure::StringList::MergeFrom(from._internal_string_list());
      break;
    }
    case kBoolList: {
      _internal_mutable_bool_list()->::ubii::dataStructure::BoolList::MergeFrom(from._internal_bool_list());
      break;
    }
    case kImage2D: {
      _internal_mutable_image2d()->::ubii::dataStructure::Image2D::MergeFrom(from._internal_image2d());
      break;
    }
    case kImage2DList: {
      _internal_mutable_image2d_list()->::ubii::dataStructure::Image2DList::MergeFrom(from._internal_image2d_list());
      break;
    }
    case kSession: {
      _internal_mutable_session()->::ubii::sessions::Session::MergeFrom(from._internal_session());
      break;
    }
    case kProcessingModuleList: {
      _internal_mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from._internal_processing_module_list());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void TopicDataRecord::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.topicData.TopicDataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicDataRecord::CopyFrom(const TopicDataRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.topicData.TopicDataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicDataRecord::IsInitialized() const {
  return true;
}

void TopicDataRecord::InternalSwap(TopicDataRecord* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  topic_.Swap(&other->topic_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicDataRecord::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopicDataRecordList::InitAsDefaultInstance() {
}
class TopicDataRecordList::_Internal {
 public:
};

TopicDataRecordList::TopicDataRecordList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.topicData.TopicDataRecordList)
}
TopicDataRecordList::TopicDataRecordList(const TopicDataRecordList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ubii.topicData.TopicDataRecordList)
}

void TopicDataRecordList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicDataRecordList_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base);
}

TopicDataRecordList::~TopicDataRecordList() {
  // @@protoc_insertion_point(destructor:ubii.topicData.TopicDataRecordList)
  SharedDtor();
}

void TopicDataRecordList::SharedDtor() {
}

void TopicDataRecordList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicDataRecordList& TopicDataRecordList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicDataRecordList_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base);
  return *internal_default_instance();
}


void TopicDataRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.topicData.TopicDataRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

const char* TopicDataRecordList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ubii.topicData.TopicDataRecord elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicDataRecordList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.topicData.TopicDataRecordList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ubii.topicData.TopicDataRecord elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.topicData.TopicDataRecordList)
  return target;
}

size_t TopicDataRecordList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.topicData.TopicDataRecordList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ubii.topicData.TopicDataRecord elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicDataRecordList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.topicData.TopicDataRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicDataRecordList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicDataRecordList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.topicData.TopicDataRecordList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.topicData.TopicDataRecordList)
    MergeFrom(*source);
  }
}

void TopicDataRecordList::MergeFrom(const TopicDataRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.topicData.TopicDataRecordList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void TopicDataRecordList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.topicData.TopicDataRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicDataRecordList::CopyFrom(const TopicDataRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.topicData.TopicDataRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicDataRecordList::IsInitialized() const {
  return true;
}

void TopicDataRecordList::InternalSwap(TopicDataRecordList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicDataRecordList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace topicData
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ubii::topicData::TopicDataRecord* Arena::CreateMaybeMessage< ::ubii::topicData::TopicDataRecord >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::topicData::TopicDataRecord >(arena);
}
template<> PROTOBUF_NOINLINE ::ubii::topicData::TopicDataRecordList* Arena::CreateMaybeMessage< ::ubii::topicData::TopicDataRecordList >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::topicData::TopicDataRecordList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
