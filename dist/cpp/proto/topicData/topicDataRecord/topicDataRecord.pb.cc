// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataRecord/topicDataRecord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/topicData/topicDataRecord/topicDataRecord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace topicData {

namespace {

const ::google::protobuf::Descriptor* TopicDataRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicDataRecord_reflection_ = NULL;
struct TopicDataRecordOneofInstance {
  double double__;
  bool bool__;
  ::google::protobuf::internal::ArenaStringPtr string_;
  const ::ubii::dataStructure::Vector2* vector2_;
  const ::ubii::dataStructure::Vector3* vector3_;
  const ::ubii::dataStructure::Vector4* vector4_;
  const ::ubii::dataStructure::Quaternion* quaternion_;
  const ::ubii::dataStructure::Matrix3x2* matrix3x2_;
  const ::ubii::dataStructure::Matrix4x4* matrix4x4_;
  const ::ubii::dataStructure::Color* color_;
  const ::ubii::dataStructure::TouchEvent* touch_event_;
  const ::ubii::dataStructure::KeyEvent* key_event_;
  const ::ubii::dataStructure::MouseEvent* mouse_event_;
  const ::ubii::dataStructure::MyoEvent* myo_event_;
  const ::ubii::dataStructure::Pose2D* pose2d_;
  const ::ubii::dataStructure::Pose3D* pose3d_;
  const ::ubii::dataStructure::Object2D* object2d_;
  const ::ubii::dataStructure::Object3D* object3d_;
  const ::ubii::dataStructure::Object2DList* object2d_list_;
  const ::ubii::dataStructure::Object3DList* object3d_list_;
  ::google::protobuf::int32 int32_;
  float float__;
  const ::ubii::dataStructure::Int32List* int32_list_;
  const ::ubii::dataStructure::FloatList* float_list_;
  const ::ubii::dataStructure::DoubleList* double_list_;
  const ::ubii::dataStructure::StringList* string_list_;
  const ::ubii::dataStructure::BoolList* bool_list_;
  const ::ubii::dataStructure::Image2D* image2d_;
  const ::ubii::dataStructure::Image2DList* image2d_list_;
  const ::ubii::sessions::Session* session_;
  const ::ubii::processing::ProcessingModuleList* processing_module_list_;
}* TopicDataRecord_default_oneof_instance_ = NULL;
const ::google::protobuf::Descriptor* TopicDataRecordList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicDataRecordList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto() {
  protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/topicData/topicDataRecord/topicDataRecord.proto");
  GOOGLE_CHECK(file != NULL);
  TopicDataRecord_descriptor_ = file->message_type(0);
  static const int TopicDataRecord_offsets_[34] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecord, topic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecord, timestamp_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, double__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, bool__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, string_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, vector2_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, vector3_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, vector4_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, quaternion_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, matrix3x2_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, matrix4x4_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, color_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, touch_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, key_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, mouse_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, myo_event_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, pose2d_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, pose3d_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, object2d_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, object3d_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, object2d_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, object3d_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, int32_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, float__),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, int32_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, float_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, double_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, string_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, bool_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, image2d_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, image2d_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, session_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicDataRecord_default_oneof_instance_, processing_module_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecord, type_),
  };
  TopicDataRecord_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicDataRecord_descriptor_,
      TopicDataRecord::default_instance_,
      TopicDataRecord_offsets_,
      -1,
      -1,
      -1,
      TopicDataRecord_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecord, _oneof_case_[0]),
      sizeof(TopicDataRecord),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecord, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecord, _is_default_instance_));
  TopicDataRecordList_descriptor_ = file->message_type(1);
  static const int TopicDataRecordList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecordList, elements_),
  };
  TopicDataRecordList_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicDataRecordList_descriptor_,
      TopicDataRecordList::default_instance_,
      TopicDataRecordList_offsets_,
      -1,
      -1,
      -1,
      sizeof(TopicDataRecordList),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecordList, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicDataRecordList, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicDataRecord_descriptor_, &TopicDataRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicDataRecordList_descriptor_, &TopicDataRecordList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto() {
  delete TopicDataRecord::default_instance_;
  delete TopicDataRecord_default_oneof_instance_;
  delete TopicDataRecord_reflection_;
  delete TopicDataRecordList::default_instance_;
  delete TopicDataRecordList_reflection_;
}

void protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ubii::topicData::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2ftimestamp_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2flists_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector2_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector3_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fvector4_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fquaternion_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix3x2_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmatrix4x4_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fcolor_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2ftouchEvent_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fkeyEvent_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmouseEvent_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fmyoEvent_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose2d_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fpose3d_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject2d_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fobject3d_2eproto();
  ::ubii::dataStructure::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2fdataStructure_2fimage_2eproto();
  ::ubii::sessions::protobuf_AddDesc_proto_2fsessions_2fsession_2eproto();
  ::ubii::processing::protobuf_AddDesc_proto_2fprocessing_2fprocessingModule_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n5proto/topicData/topicDataRecord/topicD"
    "ataRecord.proto\022\016ubii.topicData\032/proto/t"
    "opicData/topicDataRecord/timestamp.proto"
    "\0329proto/topicData/topicDataRecord/dataSt"
    "ructure/lists.proto\032;proto/topicData/top"
    "icDataRecord/dataStructure/vector2.proto"
    "\032;proto/topicData/topicDataRecord/dataSt"
    "ructure/vector3.proto\032;proto/topicData/t"
    "opicDataRecord/dataStructure/vector4.pro"
    "to\032>proto/topicData/topicDataRecord/data"
    "Structure/quaternion.proto\032=proto/topicD"
    "ata/topicDataRecord/dataStructure/matrix"
    "3x2.proto\032=proto/topicData/topicDataReco"
    "rd/dataStructure/matrix4x4.proto\0329proto/"
    "topicData/topicDataRecord/dataStructure/"
    "color.proto\032>proto/topicData/topicDataRe"
    "cord/dataStructure/touchEvent.proto\032<pro"
    "to/topicData/topicDataRecord/dataStructu"
    "re/keyEvent.proto\032>proto/topicData/topic"
    "DataRecord/dataStructure/mouseEvent.prot"
    "o\032<proto/topicData/topicDataRecord/dataS"
    "tructure/myoEvent.proto\032:proto/topicData"
    "/topicDataRecord/dataStructure/pose2d.pr"
    "oto\032:proto/topicData/topicDataRecord/dat"
    "aStructure/pose3d.proto\032<proto/topicData"
    "/topicDataRecord/dataStructure/object2d."
    "proto\032<proto/topicData/topicDataRecord/d"
    "ataStructure/object3d.proto\0329proto/topic"
    "Data/topicDataRecord/dataStructure/image"
    ".proto\032\034proto/sessions/session.proto\032\'pr"
    "oto/processing/processingModule.proto\"\370\013"
    "\n\017TopicDataRecord\022\r\n\005topic\030\001 \001(\t\022,\n\ttime"
    "stamp\030\002 \001(\0132\031.ubii.topicData.Timestamp\022\020"
    "\n\006double\030\003 \001(\001H\000\022\016\n\004bool\030\004 \001(\010H\000\022\020\n\006stri"
    "ng\030\005 \001(\tH\000\022.\n\007vector2\030\006 \001(\0132\033.ubii.dataS"
    "tructure.Vector2H\000\022.\n\007vector3\030\007 \001(\0132\033.ub"
    "ii.dataStructure.Vector3H\000\022.\n\007vector4\030\010 "
    "\001(\0132\033.ubii.dataStructure.Vector4H\000\0224\n\nqu"
    "aternion\030\t \001(\0132\036.ubii.dataStructure.Quat"
    "ernionH\000\0222\n\tmatrix3x2\030\n \001(\0132\035.ubii.dataS"
    "tructure.Matrix3x2H\000\0222\n\tmatrix4x4\030\013 \001(\0132"
    "\035.ubii.dataStructure.Matrix4x4H\000\022*\n\005colo"
    "r\030\014 \001(\0132\031.ubii.dataStructure.ColorH\000\0225\n\013"
    "touch_event\030\r \001(\0132\036.ubii.dataStructure.T"
    "ouchEventH\000\0221\n\tkey_event\030\016 \001(\0132\034.ubii.da"
    "taStructure.KeyEventH\000\0225\n\013mouse_event\030\017 "
    "\001(\0132\036.ubii.dataStructure.MouseEventH\000\0221\n"
    "\tmyo_event\030\020 \001(\0132\034.ubii.dataStructure.My"
    "oEventH\000\022,\n\006pose2D\030\021 \001(\0132\032.ubii.dataStru"
    "cture.Pose2DH\000\022,\n\006pose3D\030\022 \001(\0132\032.ubii.da"
    "taStructure.Pose3DH\000\0220\n\010object2D\030\023 \001(\0132\034"
    ".ubii.dataStructure.Object2DH\000\0220\n\010object"
    "3D\030\024 \001(\0132\034.ubii.dataStructure.Object3DH\000"
    "\0229\n\robject2D_list\030\025 \001(\0132 .ubii.dataStruc"
    "ture.Object2DListH\000\0229\n\robject3D_list\030\026 \001"
    "(\0132 .ubii.dataStructure.Object3DListH\000\022\017"
    "\n\005int32\030\027 \001(\005H\000\022\017\n\005float\030\030 \001(\002H\000\0223\n\nint3"
    "2_list\030\031 \001(\0132\035.ubii.dataStructure.Int32L"
    "istH\000\0223\n\nfloat_list\030\032 \001(\0132\035.ubii.dataStr"
    "ucture.FloatListH\000\0225\n\013double_list\030\033 \001(\0132"
    "\036.ubii.dataStructure.DoubleListH\000\0225\n\013str"
    "ing_list\030\034 \001(\0132\036.ubii.dataStructure.Stri"
    "ngListH\000\0221\n\tbool_list\030\035 \001(\0132\034.ubii.dataS"
    "tructure.BoolListH\000\022.\n\007image2D\030\036 \001(\0132\033.u"
    "bii.dataStructure.Image2DH\000\0227\n\014image2D_l"
    "ist\030\037 \001(\0132\037.ubii.dataStructure.Image2DLi"
    "stH\000\022)\n\007session\030  \001(\0132\026.ubii.sessions.Se"
    "ssionH\000\022G\n\026processing_module_list\030! \001(\0132"
    "%.ubii.processing.ProcessingModuleListH\000"
    "B\006\n\004type\"H\n\023TopicDataRecordList\0221\n\010eleme"
    "nts\030\001 \003(\0132\037.ubii.topicData.TopicDataReco"
    "rdb\006proto3", 2850);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/topicData/topicDataRecord/topicDataRecord.proto", &protobuf_RegisterTypes);
  TopicDataRecord::default_instance_ = new TopicDataRecord();
  TopicDataRecord_default_oneof_instance_ = new TopicDataRecordOneofInstance();
  TopicDataRecordList::default_instance_ = new TopicDataRecordList();
  TopicDataRecord::default_instance_->InitAsDefaultInstance();
  TopicDataRecordList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto {
  StaticDescriptorInitializer_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto() {
    protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto();
  }
} static_descriptor_initializer_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicDataRecord::kTopicFieldNumber;
const int TopicDataRecord::kTimestampFieldNumber;
const int TopicDataRecord::kDoubleFieldNumber;
const int TopicDataRecord::kBoolFieldNumber;
const int TopicDataRecord::kStringFieldNumber;
const int TopicDataRecord::kVector2FieldNumber;
const int TopicDataRecord::kVector3FieldNumber;
const int TopicDataRecord::kVector4FieldNumber;
const int TopicDataRecord::kQuaternionFieldNumber;
const int TopicDataRecord::kMatrix3X2FieldNumber;
const int TopicDataRecord::kMatrix4X4FieldNumber;
const int TopicDataRecord::kColorFieldNumber;
const int TopicDataRecord::kTouchEventFieldNumber;
const int TopicDataRecord::kKeyEventFieldNumber;
const int TopicDataRecord::kMouseEventFieldNumber;
const int TopicDataRecord::kMyoEventFieldNumber;
const int TopicDataRecord::kPose2DFieldNumber;
const int TopicDataRecord::kPose3DFieldNumber;
const int TopicDataRecord::kObject2DFieldNumber;
const int TopicDataRecord::kObject3DFieldNumber;
const int TopicDataRecord::kObject2DListFieldNumber;
const int TopicDataRecord::kObject3DListFieldNumber;
const int TopicDataRecord::kInt32FieldNumber;
const int TopicDataRecord::kFloatFieldNumber;
const int TopicDataRecord::kInt32ListFieldNumber;
const int TopicDataRecord::kFloatListFieldNumber;
const int TopicDataRecord::kDoubleListFieldNumber;
const int TopicDataRecord::kStringListFieldNumber;
const int TopicDataRecord::kBoolListFieldNumber;
const int TopicDataRecord::kImage2DFieldNumber;
const int TopicDataRecord::kImage2DListFieldNumber;
const int TopicDataRecord::kSessionFieldNumber;
const int TopicDataRecord::kProcessingModuleListFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicDataRecord::TopicDataRecord()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.topicData.TopicDataRecord)
}

void TopicDataRecord::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  timestamp_ = const_cast< ::ubii::topicData::Timestamp*>(&::ubii::topicData::Timestamp::default_instance());
  TopicDataRecord_default_oneof_instance_->double__ = 0;
  TopicDataRecord_default_oneof_instance_->bool__ = false;
  TopicDataRecord_default_oneof_instance_->string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  TopicDataRecord_default_oneof_instance_->vector2_ = const_cast< ::ubii::dataStructure::Vector2*>(&::ubii::dataStructure::Vector2::default_instance());
  TopicDataRecord_default_oneof_instance_->vector3_ = const_cast< ::ubii::dataStructure::Vector3*>(&::ubii::dataStructure::Vector3::default_instance());
  TopicDataRecord_default_oneof_instance_->vector4_ = const_cast< ::ubii::dataStructure::Vector4*>(&::ubii::dataStructure::Vector4::default_instance());
  TopicDataRecord_default_oneof_instance_->quaternion_ = const_cast< ::ubii::dataStructure::Quaternion*>(&::ubii::dataStructure::Quaternion::default_instance());
  TopicDataRecord_default_oneof_instance_->matrix3x2_ = const_cast< ::ubii::dataStructure::Matrix3x2*>(&::ubii::dataStructure::Matrix3x2::default_instance());
  TopicDataRecord_default_oneof_instance_->matrix4x4_ = const_cast< ::ubii::dataStructure::Matrix4x4*>(&::ubii::dataStructure::Matrix4x4::default_instance());
  TopicDataRecord_default_oneof_instance_->color_ = const_cast< ::ubii::dataStructure::Color*>(&::ubii::dataStructure::Color::default_instance());
  TopicDataRecord_default_oneof_instance_->touch_event_ = const_cast< ::ubii::dataStructure::TouchEvent*>(&::ubii::dataStructure::TouchEvent::default_instance());
  TopicDataRecord_default_oneof_instance_->key_event_ = const_cast< ::ubii::dataStructure::KeyEvent*>(&::ubii::dataStructure::KeyEvent::default_instance());
  TopicDataRecord_default_oneof_instance_->mouse_event_ = const_cast< ::ubii::dataStructure::MouseEvent*>(&::ubii::dataStructure::MouseEvent::default_instance());
  TopicDataRecord_default_oneof_instance_->myo_event_ = const_cast< ::ubii::dataStructure::MyoEvent*>(&::ubii::dataStructure::MyoEvent::default_instance());
  TopicDataRecord_default_oneof_instance_->pose2d_ = const_cast< ::ubii::dataStructure::Pose2D*>(&::ubii::dataStructure::Pose2D::default_instance());
  TopicDataRecord_default_oneof_instance_->pose3d_ = const_cast< ::ubii::dataStructure::Pose3D*>(&::ubii::dataStructure::Pose3D::default_instance());
  TopicDataRecord_default_oneof_instance_->object2d_ = const_cast< ::ubii::dataStructure::Object2D*>(&::ubii::dataStructure::Object2D::default_instance());
  TopicDataRecord_default_oneof_instance_->object3d_ = const_cast< ::ubii::dataStructure::Object3D*>(&::ubii::dataStructure::Object3D::default_instance());
  TopicDataRecord_default_oneof_instance_->object2d_list_ = const_cast< ::ubii::dataStructure::Object2DList*>(&::ubii::dataStructure::Object2DList::default_instance());
  TopicDataRecord_default_oneof_instance_->object3d_list_ = const_cast< ::ubii::dataStructure::Object3DList*>(&::ubii::dataStructure::Object3DList::default_instance());
  TopicDataRecord_default_oneof_instance_->int32_ = 0;
  TopicDataRecord_default_oneof_instance_->float__ = 0;
  TopicDataRecord_default_oneof_instance_->int32_list_ = const_cast< ::ubii::dataStructure::Int32List*>(&::ubii::dataStructure::Int32List::default_instance());
  TopicDataRecord_default_oneof_instance_->float_list_ = const_cast< ::ubii::dataStructure::FloatList*>(&::ubii::dataStructure::FloatList::default_instance());
  TopicDataRecord_default_oneof_instance_->double_list_ = const_cast< ::ubii::dataStructure::DoubleList*>(&::ubii::dataStructure::DoubleList::default_instance());
  TopicDataRecord_default_oneof_instance_->string_list_ = const_cast< ::ubii::dataStructure::StringList*>(&::ubii::dataStructure::StringList::default_instance());
  TopicDataRecord_default_oneof_instance_->bool_list_ = const_cast< ::ubii::dataStructure::BoolList*>(&::ubii::dataStructure::BoolList::default_instance());
  TopicDataRecord_default_oneof_instance_->image2d_ = const_cast< ::ubii::dataStructure::Image2D*>(&::ubii::dataStructure::Image2D::default_instance());
  TopicDataRecord_default_oneof_instance_->image2d_list_ = const_cast< ::ubii::dataStructure::Image2DList*>(&::ubii::dataStructure::Image2DList::default_instance());
  TopicDataRecord_default_oneof_instance_->session_ = const_cast< ::ubii::sessions::Session*>(&::ubii::sessions::Session::default_instance());
  TopicDataRecord_default_oneof_instance_->processing_module_list_ = const_cast< ::ubii::processing::ProcessingModuleList*>(&::ubii::processing::ProcessingModuleList::default_instance());
}

TopicDataRecord::TopicDataRecord(const TopicDataRecord& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.topicData.TopicDataRecord)
}

void TopicDataRecord::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  topic_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  timestamp_ = NULL;
  clear_has_type();
}

TopicDataRecord::~TopicDataRecord() {
  // @@protoc_insertion_point(destructor:ubii.topicData.TopicDataRecord)
  SharedDtor();
}

void TopicDataRecord::SharedDtor() {
  topic_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (has_type()) {
    clear_type();
  }
  if (this != default_instance_) {
    delete timestamp_;
  }
}

void TopicDataRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicDataRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicDataRecord_descriptor_;
}

const TopicDataRecord& TopicDataRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto();
  return *default_instance_;
}

TopicDataRecord* TopicDataRecord::default_instance_ = NULL;

TopicDataRecord* TopicDataRecord::New(::google::protobuf::Arena* arena) const {
  TopicDataRecord* n = new TopicDataRecord;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicDataRecord::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.topicData.TopicDataRecord)
  switch(type_case()) {
    case kDouble: {
      // No need to clear
      break;
    }
    case kBool: {
      // No need to clear
      break;
    }
    case kString: {
      type_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kVector2: {
      delete type_.vector2_;
      break;
    }
    case kVector3: {
      delete type_.vector3_;
      break;
    }
    case kVector4: {
      delete type_.vector4_;
      break;
    }
    case kQuaternion: {
      delete type_.quaternion_;
      break;
    }
    case kMatrix3X2: {
      delete type_.matrix3x2_;
      break;
    }
    case kMatrix4X4: {
      delete type_.matrix4x4_;
      break;
    }
    case kColor: {
      delete type_.color_;
      break;
    }
    case kTouchEvent: {
      delete type_.touch_event_;
      break;
    }
    case kKeyEvent: {
      delete type_.key_event_;
      break;
    }
    case kMouseEvent: {
      delete type_.mouse_event_;
      break;
    }
    case kMyoEvent: {
      delete type_.myo_event_;
      break;
    }
    case kPose2D: {
      delete type_.pose2d_;
      break;
    }
    case kPose3D: {
      delete type_.pose3d_;
      break;
    }
    case kObject2D: {
      delete type_.object2d_;
      break;
    }
    case kObject3D: {
      delete type_.object3d_;
      break;
    }
    case kObject2DList: {
      delete type_.object2d_list_;
      break;
    }
    case kObject3DList: {
      delete type_.object3d_list_;
      break;
    }
    case kInt32: {
      // No need to clear
      break;
    }
    case kFloat: {
      // No need to clear
      break;
    }
    case kInt32List: {
      delete type_.int32_list_;
      break;
    }
    case kFloatList: {
      delete type_.float_list_;
      break;
    }
    case kDoubleList: {
      delete type_.double_list_;
      break;
    }
    case kStringList: {
      delete type_.string_list_;
      break;
    }
    case kBoolList: {
      delete type_.bool_list_;
      break;
    }
    case kImage2D: {
      delete type_.image2d_;
      break;
    }
    case kImage2DList: {
      delete type_.image2d_list_;
      break;
    }
    case kSession: {
      delete type_.session_;
      break;
    }
    case kProcessingModuleList: {
      delete type_.processing_module_list_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TopicDataRecord::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.topicData.TopicDataRecord)
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
  clear_type();
}

bool TopicDataRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.topicData.TopicDataRecord)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string topic = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_topic()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->topic().data(), this->topic().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.topicData.TopicDataRecord.topic"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_timestamp;
        break;
      }

      // optional .ubii.topicData.Timestamp timestamp = 2;
      case 2: {
        if (tag == 18) {
         parse_timestamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_timestamp()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_double;
        break;
      }

      // optional double double = 3;
      case 3: {
        if (tag == 25) {
         parse_double:
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &type_.double__)));
          set_has_double_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_bool;
        break;
      }

      // optional bool bool = 4;
      case 4: {
        if (tag == 32) {
         parse_bool:
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &type_.bool__)));
          set_has_bool_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_string;
        break;
      }

      // optional string string = 5;
      case 5: {
        if (tag == 42) {
         parse_string:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_string()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->string().data(), this->string().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ubii.topicData.TopicDataRecord.string"));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_vector2;
        break;
      }

      // optional .ubii.dataStructure.Vector2 vector2 = 6;
      case 6: {
        if (tag == 50) {
         parse_vector2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_vector3;
        break;
      }

      // optional .ubii.dataStructure.Vector3 vector3 = 7;
      case 7: {
        if (tag == 58) {
         parse_vector3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_vector4;
        break;
      }

      // optional .ubii.dataStructure.Vector4 vector4 = 8;
      case 8: {
        if (tag == 66) {
         parse_vector4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vector4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_quaternion;
        break;
      }

      // optional .ubii.dataStructure.Quaternion quaternion = 9;
      case 9: {
        if (tag == 74) {
         parse_quaternion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_quaternion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_matrix3x2;
        break;
      }

      // optional .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
      case 10: {
        if (tag == 82) {
         parse_matrix3x2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix3x2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_matrix4x4;
        break;
      }

      // optional .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
      case 11: {
        if (tag == 90) {
         parse_matrix4x4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_matrix4x4()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_color;
        break;
      }

      // optional .ubii.dataStructure.Color color = 12;
      case 12: {
        if (tag == 98) {
         parse_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_color()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_touch_event;
        break;
      }

      // optional .ubii.dataStructure.TouchEvent touch_event = 13;
      case 13: {
        if (tag == 106) {
         parse_touch_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_touch_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_key_event;
        break;
      }

      // optional .ubii.dataStructure.KeyEvent key_event = 14;
      case 14: {
        if (tag == 114) {
         parse_key_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_mouse_event;
        break;
      }

      // optional .ubii.dataStructure.MouseEvent mouse_event = 15;
      case 15: {
        if (tag == 122) {
         parse_mouse_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouse_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_myo_event;
        break;
      }

      // optional .ubii.dataStructure.MyoEvent myo_event = 16;
      case 16: {
        if (tag == 130) {
         parse_myo_event:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myo_event()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_pose2D;
        break;
      }

      // optional .ubii.dataStructure.Pose2D pose2D = 17;
      case 17: {
        if (tag == 138) {
         parse_pose2D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_pose3D;
        break;
      }

      // optional .ubii.dataStructure.Pose3D pose3D = 18;
      case 18: {
        if (tag == 146) {
         parse_pose3D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pose3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_object2D;
        break;
      }

      // optional .ubii.dataStructure.Object2D object2D = 19;
      case 19: {
        if (tag == 154) {
         parse_object2D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_object3D;
        break;
      }

      // optional .ubii.dataStructure.Object3D object3D = 20;
      case 20: {
        if (tag == 162) {
         parse_object3D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object3d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_object2D_list;
        break;
      }

      // optional .ubii.dataStructure.Object2DList object2D_list = 21;
      case 21: {
        if (tag == 170) {
         parse_object2D_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object2d_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_object3D_list;
        break;
      }

      // optional .ubii.dataStructure.Object3DList object3D_list = 22;
      case 22: {
        if (tag == 178) {
         parse_object3D_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_object3d_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_int32;
        break;
      }

      // optional int32 int32 = 23;
      case 23: {
        if (tag == 184) {
         parse_int32:
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_.int32_)));
          set_has_int32();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(197)) goto parse_float;
        break;
      }

      // optional float float = 24;
      case 24: {
        if (tag == 197) {
         parse_float:
          clear_type();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &type_.float__)));
          set_has_float_();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_int32_list;
        break;
      }

      // optional .ubii.dataStructure.Int32List int32_list = 25;
      case 25: {
        if (tag == 202) {
         parse_int32_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_int32_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_float_list;
        break;
      }

      // optional .ubii.dataStructure.FloatList float_list = 26;
      case 26: {
        if (tag == 210) {
         parse_float_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_float_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(218)) goto parse_double_list;
        break;
      }

      // optional .ubii.dataStructure.DoubleList double_list = 27;
      case 27: {
        if (tag == 218) {
         parse_double_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_double_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(226)) goto parse_string_list;
        break;
      }

      // optional .ubii.dataStructure.StringList string_list = 28;
      case 28: {
        if (tag == 226) {
         parse_string_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_string_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(234)) goto parse_bool_list;
        break;
      }

      // optional .ubii.dataStructure.BoolList bool_list = 29;
      case 29: {
        if (tag == 234) {
         parse_bool_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bool_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_image2D;
        break;
      }

      // optional .ubii.dataStructure.Image2D image2D = 30;
      case 30: {
        if (tag == 242) {
         parse_image2D:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image2d()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(250)) goto parse_image2D_list;
        break;
      }

      // optional .ubii.dataStructure.Image2DList image2D_list = 31;
      case 31: {
        if (tag == 250) {
         parse_image2D_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_image2d_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(258)) goto parse_session;
        break;
      }

      // optional .ubii.sessions.Session session = 32;
      case 32: {
        if (tag == 258) {
         parse_session:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_processing_module_list;
        break;
      }

      // optional .ubii.processing.ProcessingModuleList processing_module_list = 33;
      case 33: {
        if (tag == 266) {
         parse_processing_module_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processing_module_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.topicData.TopicDataRecord)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.topicData.TopicDataRecord)
  return false;
#undef DO_
}

void TopicDataRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.topicData.TopicDataRecord)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.topicData.TopicDataRecord.topic");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->topic(), output);
  }

  // optional .ubii.topicData.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->timestamp_, output);
  }

  // optional double double = 3;
  if (has_double_()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->double_(), output);
  }

  // optional bool bool = 4;
  if (has_bool_()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->bool_(), output);
  }

  // optional string string = 5;
  if (has_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.topicData.TopicDataRecord.string");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->string(), output);
  }

  // optional .ubii.dataStructure.Vector2 vector2 = 6;
  if (has_vector2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, *type_.vector2_, output);
  }

  // optional .ubii.dataStructure.Vector3 vector3 = 7;
  if (has_vector3()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, *type_.vector3_, output);
  }

  // optional .ubii.dataStructure.Vector4 vector4 = 8;
  if (has_vector4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, *type_.vector4_, output);
  }

  // optional .ubii.dataStructure.Quaternion quaternion = 9;
  if (has_quaternion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, *type_.quaternion_, output);
  }

  // optional .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
  if (has_matrix3x2()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, *type_.matrix3x2_, output);
  }

  // optional .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
  if (has_matrix4x4()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, *type_.matrix4x4_, output);
  }

  // optional .ubii.dataStructure.Color color = 12;
  if (has_color()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, *type_.color_, output);
  }

  // optional .ubii.dataStructure.TouchEvent touch_event = 13;
  if (has_touch_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, *type_.touch_event_, output);
  }

  // optional .ubii.dataStructure.KeyEvent key_event = 14;
  if (has_key_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, *type_.key_event_, output);
  }

  // optional .ubii.dataStructure.MouseEvent mouse_event = 15;
  if (has_mouse_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, *type_.mouse_event_, output);
  }

  // optional .ubii.dataStructure.MyoEvent myo_event = 16;
  if (has_myo_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, *type_.myo_event_, output);
  }

  // optional .ubii.dataStructure.Pose2D pose2D = 17;
  if (has_pose2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, *type_.pose2d_, output);
  }

  // optional .ubii.dataStructure.Pose3D pose3D = 18;
  if (has_pose3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, *type_.pose3d_, output);
  }

  // optional .ubii.dataStructure.Object2D object2D = 19;
  if (has_object2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, *type_.object2d_, output);
  }

  // optional .ubii.dataStructure.Object3D object3D = 20;
  if (has_object3d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, *type_.object3d_, output);
  }

  // optional .ubii.dataStructure.Object2DList object2D_list = 21;
  if (has_object2d_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, *type_.object2d_list_, output);
  }

  // optional .ubii.dataStructure.Object3DList object3D_list = 22;
  if (has_object3d_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, *type_.object3d_list_, output);
  }

  // optional int32 int32 = 23;
  if (has_int32()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->int32(), output);
  }

  // optional float float = 24;
  if (has_float_()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(24, this->float_(), output);
  }

  // optional .ubii.dataStructure.Int32List int32_list = 25;
  if (has_int32_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, *type_.int32_list_, output);
  }

  // optional .ubii.dataStructure.FloatList float_list = 26;
  if (has_float_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, *type_.float_list_, output);
  }

  // optional .ubii.dataStructure.DoubleList double_list = 27;
  if (has_double_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, *type_.double_list_, output);
  }

  // optional .ubii.dataStructure.StringList string_list = 28;
  if (has_string_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, *type_.string_list_, output);
  }

  // optional .ubii.dataStructure.BoolList bool_list = 29;
  if (has_bool_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, *type_.bool_list_, output);
  }

  // optional .ubii.dataStructure.Image2D image2D = 30;
  if (has_image2d()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, *type_.image2d_, output);
  }

  // optional .ubii.dataStructure.Image2DList image2D_list = 31;
  if (has_image2d_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, *type_.image2d_list_, output);
  }

  // optional .ubii.sessions.Session session = 32;
  if (has_session()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, *type_.session_, output);
  }

  // optional .ubii.processing.ProcessingModuleList processing_module_list = 33;
  if (has_processing_module_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, *type_.processing_module_list_, output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.topicData.TopicDataRecord)
}

::google::protobuf::uint8* TopicDataRecord::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.topicData.TopicDataRecord)
  // optional string topic = 1;
  if (this->topic().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->topic().data(), this->topic().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.topicData.TopicDataRecord.topic");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->topic(), target);
  }

  // optional .ubii.topicData.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->timestamp_, false, target);
  }

  // optional double double = 3;
  if (has_double_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->double_(), target);
  }

  // optional bool bool = 4;
  if (has_bool_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->bool_(), target);
  }

  // optional string string = 5;
  if (has_string()) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->string().data(), this->string().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ubii.topicData.TopicDataRecord.string");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->string(), target);
  }

  // optional .ubii.dataStructure.Vector2 vector2 = 6;
  if (has_vector2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, *type_.vector2_, false, target);
  }

  // optional .ubii.dataStructure.Vector3 vector3 = 7;
  if (has_vector3()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        7, *type_.vector3_, false, target);
  }

  // optional .ubii.dataStructure.Vector4 vector4 = 8;
  if (has_vector4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        8, *type_.vector4_, false, target);
  }

  // optional .ubii.dataStructure.Quaternion quaternion = 9;
  if (has_quaternion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        9, *type_.quaternion_, false, target);
  }

  // optional .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
  if (has_matrix3x2()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        10, *type_.matrix3x2_, false, target);
  }

  // optional .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
  if (has_matrix4x4()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        11, *type_.matrix4x4_, false, target);
  }

  // optional .ubii.dataStructure.Color color = 12;
  if (has_color()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        12, *type_.color_, false, target);
  }

  // optional .ubii.dataStructure.TouchEvent touch_event = 13;
  if (has_touch_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        13, *type_.touch_event_, false, target);
  }

  // optional .ubii.dataStructure.KeyEvent key_event = 14;
  if (has_key_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        14, *type_.key_event_, false, target);
  }

  // optional .ubii.dataStructure.MouseEvent mouse_event = 15;
  if (has_mouse_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        15, *type_.mouse_event_, false, target);
  }

  // optional .ubii.dataStructure.MyoEvent myo_event = 16;
  if (has_myo_event()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        16, *type_.myo_event_, false, target);
  }

  // optional .ubii.dataStructure.Pose2D pose2D = 17;
  if (has_pose2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        17, *type_.pose2d_, false, target);
  }

  // optional .ubii.dataStructure.Pose3D pose3D = 18;
  if (has_pose3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        18, *type_.pose3d_, false, target);
  }

  // optional .ubii.dataStructure.Object2D object2D = 19;
  if (has_object2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        19, *type_.object2d_, false, target);
  }

  // optional .ubii.dataStructure.Object3D object3D = 20;
  if (has_object3d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        20, *type_.object3d_, false, target);
  }

  // optional .ubii.dataStructure.Object2DList object2D_list = 21;
  if (has_object2d_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        21, *type_.object2d_list_, false, target);
  }

  // optional .ubii.dataStructure.Object3DList object3D_list = 22;
  if (has_object3d_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        22, *type_.object3d_list_, false, target);
  }

  // optional int32 int32 = 23;
  if (has_int32()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->int32(), target);
  }

  // optional float float = 24;
  if (has_float_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(24, this->float_(), target);
  }

  // optional .ubii.dataStructure.Int32List int32_list = 25;
  if (has_int32_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        25, *type_.int32_list_, false, target);
  }

  // optional .ubii.dataStructure.FloatList float_list = 26;
  if (has_float_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        26, *type_.float_list_, false, target);
  }

  // optional .ubii.dataStructure.DoubleList double_list = 27;
  if (has_double_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        27, *type_.double_list_, false, target);
  }

  // optional .ubii.dataStructure.StringList string_list = 28;
  if (has_string_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        28, *type_.string_list_, false, target);
  }

  // optional .ubii.dataStructure.BoolList bool_list = 29;
  if (has_bool_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        29, *type_.bool_list_, false, target);
  }

  // optional .ubii.dataStructure.Image2D image2D = 30;
  if (has_image2d()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        30, *type_.image2d_, false, target);
  }

  // optional .ubii.dataStructure.Image2DList image2D_list = 31;
  if (has_image2d_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        31, *type_.image2d_list_, false, target);
  }

  // optional .ubii.sessions.Session session = 32;
  if (has_session()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        32, *type_.session_, false, target);
  }

  // optional .ubii.processing.ProcessingModuleList processing_module_list = 33;
  if (has_processing_module_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        33, *type_.processing_module_list_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.topicData.TopicDataRecord)
  return target;
}

int TopicDataRecord::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.topicData.TopicDataRecord)
  int total_size = 0;

  // optional string topic = 1;
  if (this->topic().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->topic());
  }

  // optional .ubii.topicData.Timestamp timestamp = 2;
  if (this->has_timestamp()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->timestamp_);
  }

  switch (type_case()) {
    // optional double double = 3;
    case kDouble: {
      total_size += 1 + 8;
      break;
    }
    // optional bool bool = 4;
    case kBool: {
      total_size += 1 + 1;
      break;
    }
    // optional string string = 5;
    case kString: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->string());
      break;
    }
    // optional .ubii.dataStructure.Vector2 vector2 = 6;
    case kVector2: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.vector2_);
      break;
    }
    // optional .ubii.dataStructure.Vector3 vector3 = 7;
    case kVector3: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.vector3_);
      break;
    }
    // optional .ubii.dataStructure.Vector4 vector4 = 8;
    case kVector4: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.vector4_);
      break;
    }
    // optional .ubii.dataStructure.Quaternion quaternion = 9;
    case kQuaternion: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.quaternion_);
      break;
    }
    // optional .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
    case kMatrix3X2: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.matrix3x2_);
      break;
    }
    // optional .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
    case kMatrix4X4: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.matrix4x4_);
      break;
    }
    // optional .ubii.dataStructure.Color color = 12;
    case kColor: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.color_);
      break;
    }
    // optional .ubii.dataStructure.TouchEvent touch_event = 13;
    case kTouchEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.touch_event_);
      break;
    }
    // optional .ubii.dataStructure.KeyEvent key_event = 14;
    case kKeyEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.key_event_);
      break;
    }
    // optional .ubii.dataStructure.MouseEvent mouse_event = 15;
    case kMouseEvent: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.mouse_event_);
      break;
    }
    // optional .ubii.dataStructure.MyoEvent myo_event = 16;
    case kMyoEvent: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.myo_event_);
      break;
    }
    // optional .ubii.dataStructure.Pose2D pose2D = 17;
    case kPose2D: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.pose2d_);
      break;
    }
    // optional .ubii.dataStructure.Pose3D pose3D = 18;
    case kPose3D: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.pose3d_);
      break;
    }
    // optional .ubii.dataStructure.Object2D object2D = 19;
    case kObject2D: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.object2d_);
      break;
    }
    // optional .ubii.dataStructure.Object3D object3D = 20;
    case kObject3D: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.object3d_);
      break;
    }
    // optional .ubii.dataStructure.Object2DList object2D_list = 21;
    case kObject2DList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.object2d_list_);
      break;
    }
    // optional .ubii.dataStructure.Object3DList object3D_list = 22;
    case kObject3DList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.object3d_list_);
      break;
    }
    // optional int32 int32 = 23;
    case kInt32: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->int32());
      break;
    }
    // optional float float = 24;
    case kFloat: {
      total_size += 2 + 4;
      break;
    }
    // optional .ubii.dataStructure.Int32List int32_list = 25;
    case kInt32List: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.int32_list_);
      break;
    }
    // optional .ubii.dataStructure.FloatList float_list = 26;
    case kFloatList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.float_list_);
      break;
    }
    // optional .ubii.dataStructure.DoubleList double_list = 27;
    case kDoubleList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.double_list_);
      break;
    }
    // optional .ubii.dataStructure.StringList string_list = 28;
    case kStringList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.string_list_);
      break;
    }
    // optional .ubii.dataStructure.BoolList bool_list = 29;
    case kBoolList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.bool_list_);
      break;
    }
    // optional .ubii.dataStructure.Image2D image2D = 30;
    case kImage2D: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.image2d_);
      break;
    }
    // optional .ubii.dataStructure.Image2DList image2D_list = 31;
    case kImage2DList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.image2d_list_);
      break;
    }
    // optional .ubii.sessions.Session session = 32;
    case kSession: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.session_);
      break;
    }
    // optional .ubii.processing.ProcessingModuleList processing_module_list = 33;
    case kProcessingModuleList: {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.processing_module_list_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicDataRecord::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.topicData.TopicDataRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicDataRecord* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicDataRecord>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.topicData.TopicDataRecord)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.topicData.TopicDataRecord)
    MergeFrom(*source);
  }
}

void TopicDataRecord::MergeFrom(const TopicDataRecord& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.topicData.TopicDataRecord)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.type_case()) {
    case kDouble: {
      set_double_(from.double_());
      break;
    }
    case kBool: {
      set_bool_(from.bool_());
      break;
    }
    case kString: {
      set_string(from.string());
      break;
    }
    case kVector2: {
      mutable_vector2()->::ubii::dataStructure::Vector2::MergeFrom(from.vector2());
      break;
    }
    case kVector3: {
      mutable_vector3()->::ubii::dataStructure::Vector3::MergeFrom(from.vector3());
      break;
    }
    case kVector4: {
      mutable_vector4()->::ubii::dataStructure::Vector4::MergeFrom(from.vector4());
      break;
    }
    case kQuaternion: {
      mutable_quaternion()->::ubii::dataStructure::Quaternion::MergeFrom(from.quaternion());
      break;
    }
    case kMatrix3X2: {
      mutable_matrix3x2()->::ubii::dataStructure::Matrix3x2::MergeFrom(from.matrix3x2());
      break;
    }
    case kMatrix4X4: {
      mutable_matrix4x4()->::ubii::dataStructure::Matrix4x4::MergeFrom(from.matrix4x4());
      break;
    }
    case kColor: {
      mutable_color()->::ubii::dataStructure::Color::MergeFrom(from.color());
      break;
    }
    case kTouchEvent: {
      mutable_touch_event()->::ubii::dataStructure::TouchEvent::MergeFrom(from.touch_event());
      break;
    }
    case kKeyEvent: {
      mutable_key_event()->::ubii::dataStructure::KeyEvent::MergeFrom(from.key_event());
      break;
    }
    case kMouseEvent: {
      mutable_mouse_event()->::ubii::dataStructure::MouseEvent::MergeFrom(from.mouse_event());
      break;
    }
    case kMyoEvent: {
      mutable_myo_event()->::ubii::dataStructure::MyoEvent::MergeFrom(from.myo_event());
      break;
    }
    case kPose2D: {
      mutable_pose2d()->::ubii::dataStructure::Pose2D::MergeFrom(from.pose2d());
      break;
    }
    case kPose3D: {
      mutable_pose3d()->::ubii::dataStructure::Pose3D::MergeFrom(from.pose3d());
      break;
    }
    case kObject2D: {
      mutable_object2d()->::ubii::dataStructure::Object2D::MergeFrom(from.object2d());
      break;
    }
    case kObject3D: {
      mutable_object3d()->::ubii::dataStructure::Object3D::MergeFrom(from.object3d());
      break;
    }
    case kObject2DList: {
      mutable_object2d_list()->::ubii::dataStructure::Object2DList::MergeFrom(from.object2d_list());
      break;
    }
    case kObject3DList: {
      mutable_object3d_list()->::ubii::dataStructure::Object3DList::MergeFrom(from.object3d_list());
      break;
    }
    case kInt32: {
      set_int32(from.int32());
      break;
    }
    case kFloat: {
      set_float_(from.float_());
      break;
    }
    case kInt32List: {
      mutable_int32_list()->::ubii::dataStructure::Int32List::MergeFrom(from.int32_list());
      break;
    }
    case kFloatList: {
      mutable_float_list()->::ubii::dataStructure::FloatList::MergeFrom(from.float_list());
      break;
    }
    case kDoubleList: {
      mutable_double_list()->::ubii::dataStructure::DoubleList::MergeFrom(from.double_list());
      break;
    }
    case kStringList: {
      mutable_string_list()->::ubii::dataStructure::StringList::MergeFrom(from.string_list());
      break;
    }
    case kBoolList: {
      mutable_bool_list()->::ubii::dataStructure::BoolList::MergeFrom(from.bool_list());
      break;
    }
    case kImage2D: {
      mutable_image2d()->::ubii::dataStructure::Image2D::MergeFrom(from.image2d());
      break;
    }
    case kImage2DList: {
      mutable_image2d_list()->::ubii::dataStructure::Image2DList::MergeFrom(from.image2d_list());
      break;
    }
    case kSession: {
      mutable_session()->::ubii::sessions::Session::MergeFrom(from.session());
      break;
    }
    case kProcessingModuleList: {
      mutable_processing_module_list()->::ubii::processing::ProcessingModuleList::MergeFrom(from.processing_module_list());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (from.topic().size() > 0) {

    topic_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.topic_);
  }
  if (from.has_timestamp()) {
    mutable_timestamp()->::ubii::topicData::Timestamp::MergeFrom(from.timestamp());
  }
}

void TopicDataRecord::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.topicData.TopicDataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicDataRecord::CopyFrom(const TopicDataRecord& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.topicData.TopicDataRecord)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicDataRecord::IsInitialized() const {

  return true;
}

void TopicDataRecord::Swap(TopicDataRecord* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicDataRecord::InternalSwap(TopicDataRecord* other) {
  topic_.Swap(&other->topic_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicDataRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicDataRecord_descriptor_;
  metadata.reflection = TopicDataRecord_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicDataRecord

// optional string topic = 1;
void TopicDataRecord::clear_topic() {
  topic_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& TopicDataRecord::topic() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.topic)
  return topic_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicDataRecord::set_topic(const ::std::string& value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.topic)
}
 void TopicDataRecord::set_topic(const char* value) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.topicData.TopicDataRecord.topic)
}
 void TopicDataRecord::set_topic(const char* value, size_t size) {
  
  topic_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.topicData.TopicDataRecord.topic)
}
 ::std::string* TopicDataRecord::mutable_topic() {
  
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.topic)
  return topic_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicDataRecord::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.topic)
  
  return topic_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TopicDataRecord::set_allocated_topic(::std::string* topic) {
  if (topic != NULL) {
    
  } else {
    
  }
  topic_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), topic);
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.topic)
}

// optional .ubii.topicData.Timestamp timestamp = 2;
bool TopicDataRecord::has_timestamp() const {
  return !_is_default_instance_ && timestamp_ != NULL;
}
void TopicDataRecord::clear_timestamp() {
  if (GetArenaNoVirtual() == NULL && timestamp_ != NULL) delete timestamp_;
  timestamp_ = NULL;
}
const ::ubii::topicData::Timestamp& TopicDataRecord::timestamp() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.timestamp)
  return timestamp_ != NULL ? *timestamp_ : *default_instance_->timestamp_;
}
::ubii::topicData::Timestamp* TopicDataRecord::mutable_timestamp() {
  
  if (timestamp_ == NULL) {
    timestamp_ = new ::ubii::topicData::Timestamp;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.timestamp)
  return timestamp_;
}
::ubii::topicData::Timestamp* TopicDataRecord::release_timestamp() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.timestamp)
  
  ::ubii::topicData::Timestamp* temp = timestamp_;
  timestamp_ = NULL;
  return temp;
}
void TopicDataRecord::set_allocated_timestamp(::ubii::topicData::Timestamp* timestamp) {
  delete timestamp_;
  timestamp_ = timestamp;
  if (timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.timestamp)
}

// optional double double = 3;
bool TopicDataRecord::has_double_() const {
  return type_case() == kDouble;
}
void TopicDataRecord::set_has_double_() {
  _oneof_case_[0] = kDouble;
}
void TopicDataRecord::clear_double_() {
  if (has_double_()) {
    type_.double__ = 0;
    clear_has_type();
  }
}
 double TopicDataRecord::double_() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.double)
  if (has_double_()) {
    return type_.double__;
  }
  return 0;
}
 void TopicDataRecord::set_double_(double value) {
  if (!has_double_()) {
    clear_type();
    set_has_double_();
  }
  type_.double__ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.double)
}

// optional bool bool = 4;
bool TopicDataRecord::has_bool_() const {
  return type_case() == kBool;
}
void TopicDataRecord::set_has_bool_() {
  _oneof_case_[0] = kBool;
}
void TopicDataRecord::clear_bool_() {
  if (has_bool_()) {
    type_.bool__ = false;
    clear_has_type();
  }
}
 bool TopicDataRecord::bool_() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.bool)
  if (has_bool_()) {
    return type_.bool__;
  }
  return false;
}
 void TopicDataRecord::set_bool_(bool value) {
  if (!has_bool_()) {
    clear_type();
    set_has_bool_();
  }
  type_.bool__ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.bool)
}

// optional string string = 5;
bool TopicDataRecord::has_string() const {
  return type_case() == kString;
}
void TopicDataRecord::set_has_string() {
  _oneof_case_[0] = kString;
}
void TopicDataRecord::clear_string() {
  if (has_string()) {
    type_.string_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
 const ::std::string& TopicDataRecord::string() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.string)
  if (has_string()) {
    return type_.string_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  return *&::google::protobuf::internal::GetEmptyStringAlreadyInited();
}
 void TopicDataRecord::set_string(const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.string)
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.string)
}
 void TopicDataRecord::set_string(const char* value) {
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.topicData.TopicDataRecord.string)
}
 void TopicDataRecord::set_string(const char* value, size_t size) {
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  type_.string_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.topicData.TopicDataRecord.string)
}
 ::std::string* TopicDataRecord::mutable_string() {
  if (!has_string()) {
    clear_type();
    set_has_string();
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.string)
  return type_.string_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TopicDataRecord::release_string() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.string)
  if (has_string()) {
    clear_has_type();
    return type_.string_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  } else {
    return NULL;
  }
}
 void TopicDataRecord::set_allocated_string(::std::string* string) {
  if (!has_string()) {
    type_.string_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  clear_type();
  if (string != NULL) {
    set_has_string();
    type_.string_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
        string);
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.string)
}

// optional .ubii.dataStructure.Vector2 vector2 = 6;
bool TopicDataRecord::has_vector2() const {
  return type_case() == kVector2;
}
void TopicDataRecord::set_has_vector2() {
  _oneof_case_[0] = kVector2;
}
void TopicDataRecord::clear_vector2() {
  if (has_vector2()) {
    delete type_.vector2_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Vector2& TopicDataRecord::vector2() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector2)
  return has_vector2()
      ? *type_.vector2_
      : ::ubii::dataStructure::Vector2::default_instance();
}
::ubii::dataStructure::Vector2* TopicDataRecord::mutable_vector2() {
  if (!has_vector2()) {
    clear_type();
    set_has_vector2();
    type_.vector2_ = new ::ubii::dataStructure::Vector2;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector2)
  return type_.vector2_;
}
::ubii::dataStructure::Vector2* TopicDataRecord::release_vector2() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector2)
  if (has_vector2()) {
    clear_has_type();
    ::ubii::dataStructure::Vector2* temp = type_.vector2_;
    type_.vector2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_vector2(::ubii::dataStructure::Vector2* vector2) {
  clear_type();
  if (vector2) {
    set_has_vector2();
    type_.vector2_ = vector2;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.vector2)
}

// optional .ubii.dataStructure.Vector3 vector3 = 7;
bool TopicDataRecord::has_vector3() const {
  return type_case() == kVector3;
}
void TopicDataRecord::set_has_vector3() {
  _oneof_case_[0] = kVector3;
}
void TopicDataRecord::clear_vector3() {
  if (has_vector3()) {
    delete type_.vector3_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Vector3& TopicDataRecord::vector3() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector3)
  return has_vector3()
      ? *type_.vector3_
      : ::ubii::dataStructure::Vector3::default_instance();
}
::ubii::dataStructure::Vector3* TopicDataRecord::mutable_vector3() {
  if (!has_vector3()) {
    clear_type();
    set_has_vector3();
    type_.vector3_ = new ::ubii::dataStructure::Vector3;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector3)
  return type_.vector3_;
}
::ubii::dataStructure::Vector3* TopicDataRecord::release_vector3() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector3)
  if (has_vector3()) {
    clear_has_type();
    ::ubii::dataStructure::Vector3* temp = type_.vector3_;
    type_.vector3_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_vector3(::ubii::dataStructure::Vector3* vector3) {
  clear_type();
  if (vector3) {
    set_has_vector3();
    type_.vector3_ = vector3;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.vector3)
}

// optional .ubii.dataStructure.Vector4 vector4 = 8;
bool TopicDataRecord::has_vector4() const {
  return type_case() == kVector4;
}
void TopicDataRecord::set_has_vector4() {
  _oneof_case_[0] = kVector4;
}
void TopicDataRecord::clear_vector4() {
  if (has_vector4()) {
    delete type_.vector4_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Vector4& TopicDataRecord::vector4() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.vector4)
  return has_vector4()
      ? *type_.vector4_
      : ::ubii::dataStructure::Vector4::default_instance();
}
::ubii::dataStructure::Vector4* TopicDataRecord::mutable_vector4() {
  if (!has_vector4()) {
    clear_type();
    set_has_vector4();
    type_.vector4_ = new ::ubii::dataStructure::Vector4;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.vector4)
  return type_.vector4_;
}
::ubii::dataStructure::Vector4* TopicDataRecord::release_vector4() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.vector4)
  if (has_vector4()) {
    clear_has_type();
    ::ubii::dataStructure::Vector4* temp = type_.vector4_;
    type_.vector4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_vector4(::ubii::dataStructure::Vector4* vector4) {
  clear_type();
  if (vector4) {
    set_has_vector4();
    type_.vector4_ = vector4;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.vector4)
}

// optional .ubii.dataStructure.Quaternion quaternion = 9;
bool TopicDataRecord::has_quaternion() const {
  return type_case() == kQuaternion;
}
void TopicDataRecord::set_has_quaternion() {
  _oneof_case_[0] = kQuaternion;
}
void TopicDataRecord::clear_quaternion() {
  if (has_quaternion()) {
    delete type_.quaternion_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Quaternion& TopicDataRecord::quaternion() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.quaternion)
  return has_quaternion()
      ? *type_.quaternion_
      : ::ubii::dataStructure::Quaternion::default_instance();
}
::ubii::dataStructure::Quaternion* TopicDataRecord::mutable_quaternion() {
  if (!has_quaternion()) {
    clear_type();
    set_has_quaternion();
    type_.quaternion_ = new ::ubii::dataStructure::Quaternion;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.quaternion)
  return type_.quaternion_;
}
::ubii::dataStructure::Quaternion* TopicDataRecord::release_quaternion() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.quaternion)
  if (has_quaternion()) {
    clear_has_type();
    ::ubii::dataStructure::Quaternion* temp = type_.quaternion_;
    type_.quaternion_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_quaternion(::ubii::dataStructure::Quaternion* quaternion) {
  clear_type();
  if (quaternion) {
    set_has_quaternion();
    type_.quaternion_ = quaternion;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.quaternion)
}

// optional .ubii.dataStructure.Matrix3x2 matrix3x2 = 10;
bool TopicDataRecord::has_matrix3x2() const {
  return type_case() == kMatrix3X2;
}
void TopicDataRecord::set_has_matrix3x2() {
  _oneof_case_[0] = kMatrix3X2;
}
void TopicDataRecord::clear_matrix3x2() {
  if (has_matrix3x2()) {
    delete type_.matrix3x2_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Matrix3x2& TopicDataRecord::matrix3x2() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.matrix3x2)
  return has_matrix3x2()
      ? *type_.matrix3x2_
      : ::ubii::dataStructure::Matrix3x2::default_instance();
}
::ubii::dataStructure::Matrix3x2* TopicDataRecord::mutable_matrix3x2() {
  if (!has_matrix3x2()) {
    clear_type();
    set_has_matrix3x2();
    type_.matrix3x2_ = new ::ubii::dataStructure::Matrix3x2;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.matrix3x2)
  return type_.matrix3x2_;
}
::ubii::dataStructure::Matrix3x2* TopicDataRecord::release_matrix3x2() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.matrix3x2)
  if (has_matrix3x2()) {
    clear_has_type();
    ::ubii::dataStructure::Matrix3x2* temp = type_.matrix3x2_;
    type_.matrix3x2_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_matrix3x2(::ubii::dataStructure::Matrix3x2* matrix3x2) {
  clear_type();
  if (matrix3x2) {
    set_has_matrix3x2();
    type_.matrix3x2_ = matrix3x2;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.matrix3x2)
}

// optional .ubii.dataStructure.Matrix4x4 matrix4x4 = 11;
bool TopicDataRecord::has_matrix4x4() const {
  return type_case() == kMatrix4X4;
}
void TopicDataRecord::set_has_matrix4x4() {
  _oneof_case_[0] = kMatrix4X4;
}
void TopicDataRecord::clear_matrix4x4() {
  if (has_matrix4x4()) {
    delete type_.matrix4x4_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Matrix4x4& TopicDataRecord::matrix4x4() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.matrix4x4)
  return has_matrix4x4()
      ? *type_.matrix4x4_
      : ::ubii::dataStructure::Matrix4x4::default_instance();
}
::ubii::dataStructure::Matrix4x4* TopicDataRecord::mutable_matrix4x4() {
  if (!has_matrix4x4()) {
    clear_type();
    set_has_matrix4x4();
    type_.matrix4x4_ = new ::ubii::dataStructure::Matrix4x4;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.matrix4x4)
  return type_.matrix4x4_;
}
::ubii::dataStructure::Matrix4x4* TopicDataRecord::release_matrix4x4() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.matrix4x4)
  if (has_matrix4x4()) {
    clear_has_type();
    ::ubii::dataStructure::Matrix4x4* temp = type_.matrix4x4_;
    type_.matrix4x4_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_matrix4x4(::ubii::dataStructure::Matrix4x4* matrix4x4) {
  clear_type();
  if (matrix4x4) {
    set_has_matrix4x4();
    type_.matrix4x4_ = matrix4x4;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.matrix4x4)
}

// optional .ubii.dataStructure.Color color = 12;
bool TopicDataRecord::has_color() const {
  return type_case() == kColor;
}
void TopicDataRecord::set_has_color() {
  _oneof_case_[0] = kColor;
}
void TopicDataRecord::clear_color() {
  if (has_color()) {
    delete type_.color_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Color& TopicDataRecord::color() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.color)
  return has_color()
      ? *type_.color_
      : ::ubii::dataStructure::Color::default_instance();
}
::ubii::dataStructure::Color* TopicDataRecord::mutable_color() {
  if (!has_color()) {
    clear_type();
    set_has_color();
    type_.color_ = new ::ubii::dataStructure::Color;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.color)
  return type_.color_;
}
::ubii::dataStructure::Color* TopicDataRecord::release_color() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.color)
  if (has_color()) {
    clear_has_type();
    ::ubii::dataStructure::Color* temp = type_.color_;
    type_.color_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_color(::ubii::dataStructure::Color* color) {
  clear_type();
  if (color) {
    set_has_color();
    type_.color_ = color;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.color)
}

// optional .ubii.dataStructure.TouchEvent touch_event = 13;
bool TopicDataRecord::has_touch_event() const {
  return type_case() == kTouchEvent;
}
void TopicDataRecord::set_has_touch_event() {
  _oneof_case_[0] = kTouchEvent;
}
void TopicDataRecord::clear_touch_event() {
  if (has_touch_event()) {
    delete type_.touch_event_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::TouchEvent& TopicDataRecord::touch_event() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.touch_event)
  return has_touch_event()
      ? *type_.touch_event_
      : ::ubii::dataStructure::TouchEvent::default_instance();
}
::ubii::dataStructure::TouchEvent* TopicDataRecord::mutable_touch_event() {
  if (!has_touch_event()) {
    clear_type();
    set_has_touch_event();
    type_.touch_event_ = new ::ubii::dataStructure::TouchEvent;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.touch_event)
  return type_.touch_event_;
}
::ubii::dataStructure::TouchEvent* TopicDataRecord::release_touch_event() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.touch_event)
  if (has_touch_event()) {
    clear_has_type();
    ::ubii::dataStructure::TouchEvent* temp = type_.touch_event_;
    type_.touch_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_touch_event(::ubii::dataStructure::TouchEvent* touch_event) {
  clear_type();
  if (touch_event) {
    set_has_touch_event();
    type_.touch_event_ = touch_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.touch_event)
}

// optional .ubii.dataStructure.KeyEvent key_event = 14;
bool TopicDataRecord::has_key_event() const {
  return type_case() == kKeyEvent;
}
void TopicDataRecord::set_has_key_event() {
  _oneof_case_[0] = kKeyEvent;
}
void TopicDataRecord::clear_key_event() {
  if (has_key_event()) {
    delete type_.key_event_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::KeyEvent& TopicDataRecord::key_event() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.key_event)
  return has_key_event()
      ? *type_.key_event_
      : ::ubii::dataStructure::KeyEvent::default_instance();
}
::ubii::dataStructure::KeyEvent* TopicDataRecord::mutable_key_event() {
  if (!has_key_event()) {
    clear_type();
    set_has_key_event();
    type_.key_event_ = new ::ubii::dataStructure::KeyEvent;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.key_event)
  return type_.key_event_;
}
::ubii::dataStructure::KeyEvent* TopicDataRecord::release_key_event() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.key_event)
  if (has_key_event()) {
    clear_has_type();
    ::ubii::dataStructure::KeyEvent* temp = type_.key_event_;
    type_.key_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_key_event(::ubii::dataStructure::KeyEvent* key_event) {
  clear_type();
  if (key_event) {
    set_has_key_event();
    type_.key_event_ = key_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.key_event)
}

// optional .ubii.dataStructure.MouseEvent mouse_event = 15;
bool TopicDataRecord::has_mouse_event() const {
  return type_case() == kMouseEvent;
}
void TopicDataRecord::set_has_mouse_event() {
  _oneof_case_[0] = kMouseEvent;
}
void TopicDataRecord::clear_mouse_event() {
  if (has_mouse_event()) {
    delete type_.mouse_event_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::MouseEvent& TopicDataRecord::mouse_event() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.mouse_event)
  return has_mouse_event()
      ? *type_.mouse_event_
      : ::ubii::dataStructure::MouseEvent::default_instance();
}
::ubii::dataStructure::MouseEvent* TopicDataRecord::mutable_mouse_event() {
  if (!has_mouse_event()) {
    clear_type();
    set_has_mouse_event();
    type_.mouse_event_ = new ::ubii::dataStructure::MouseEvent;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.mouse_event)
  return type_.mouse_event_;
}
::ubii::dataStructure::MouseEvent* TopicDataRecord::release_mouse_event() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.mouse_event)
  if (has_mouse_event()) {
    clear_has_type();
    ::ubii::dataStructure::MouseEvent* temp = type_.mouse_event_;
    type_.mouse_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_mouse_event(::ubii::dataStructure::MouseEvent* mouse_event) {
  clear_type();
  if (mouse_event) {
    set_has_mouse_event();
    type_.mouse_event_ = mouse_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.mouse_event)
}

// optional .ubii.dataStructure.MyoEvent myo_event = 16;
bool TopicDataRecord::has_myo_event() const {
  return type_case() == kMyoEvent;
}
void TopicDataRecord::set_has_myo_event() {
  _oneof_case_[0] = kMyoEvent;
}
void TopicDataRecord::clear_myo_event() {
  if (has_myo_event()) {
    delete type_.myo_event_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::MyoEvent& TopicDataRecord::myo_event() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.myo_event)
  return has_myo_event()
      ? *type_.myo_event_
      : ::ubii::dataStructure::MyoEvent::default_instance();
}
::ubii::dataStructure::MyoEvent* TopicDataRecord::mutable_myo_event() {
  if (!has_myo_event()) {
    clear_type();
    set_has_myo_event();
    type_.myo_event_ = new ::ubii::dataStructure::MyoEvent;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.myo_event)
  return type_.myo_event_;
}
::ubii::dataStructure::MyoEvent* TopicDataRecord::release_myo_event() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.myo_event)
  if (has_myo_event()) {
    clear_has_type();
    ::ubii::dataStructure::MyoEvent* temp = type_.myo_event_;
    type_.myo_event_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_myo_event(::ubii::dataStructure::MyoEvent* myo_event) {
  clear_type();
  if (myo_event) {
    set_has_myo_event();
    type_.myo_event_ = myo_event;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.myo_event)
}

// optional .ubii.dataStructure.Pose2D pose2D = 17;
bool TopicDataRecord::has_pose2d() const {
  return type_case() == kPose2D;
}
void TopicDataRecord::set_has_pose2d() {
  _oneof_case_[0] = kPose2D;
}
void TopicDataRecord::clear_pose2d() {
  if (has_pose2d()) {
    delete type_.pose2d_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Pose2D& TopicDataRecord::pose2d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.pose2D)
  return has_pose2d()
      ? *type_.pose2d_
      : ::ubii::dataStructure::Pose2D::default_instance();
}
::ubii::dataStructure::Pose2D* TopicDataRecord::mutable_pose2d() {
  if (!has_pose2d()) {
    clear_type();
    set_has_pose2d();
    type_.pose2d_ = new ::ubii::dataStructure::Pose2D;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.pose2D)
  return type_.pose2d_;
}
::ubii::dataStructure::Pose2D* TopicDataRecord::release_pose2d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.pose2D)
  if (has_pose2d()) {
    clear_has_type();
    ::ubii::dataStructure::Pose2D* temp = type_.pose2d_;
    type_.pose2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_pose2d(::ubii::dataStructure::Pose2D* pose2d) {
  clear_type();
  if (pose2d) {
    set_has_pose2d();
    type_.pose2d_ = pose2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.pose2D)
}

// optional .ubii.dataStructure.Pose3D pose3D = 18;
bool TopicDataRecord::has_pose3d() const {
  return type_case() == kPose3D;
}
void TopicDataRecord::set_has_pose3d() {
  _oneof_case_[0] = kPose3D;
}
void TopicDataRecord::clear_pose3d() {
  if (has_pose3d()) {
    delete type_.pose3d_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Pose3D& TopicDataRecord::pose3d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.pose3D)
  return has_pose3d()
      ? *type_.pose3d_
      : ::ubii::dataStructure::Pose3D::default_instance();
}
::ubii::dataStructure::Pose3D* TopicDataRecord::mutable_pose3d() {
  if (!has_pose3d()) {
    clear_type();
    set_has_pose3d();
    type_.pose3d_ = new ::ubii::dataStructure::Pose3D;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.pose3D)
  return type_.pose3d_;
}
::ubii::dataStructure::Pose3D* TopicDataRecord::release_pose3d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.pose3D)
  if (has_pose3d()) {
    clear_has_type();
    ::ubii::dataStructure::Pose3D* temp = type_.pose3d_;
    type_.pose3d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_pose3d(::ubii::dataStructure::Pose3D* pose3d) {
  clear_type();
  if (pose3d) {
    set_has_pose3d();
    type_.pose3d_ = pose3d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.pose3D)
}

// optional .ubii.dataStructure.Object2D object2D = 19;
bool TopicDataRecord::has_object2d() const {
  return type_case() == kObject2D;
}
void TopicDataRecord::set_has_object2d() {
  _oneof_case_[0] = kObject2D;
}
void TopicDataRecord::clear_object2d() {
  if (has_object2d()) {
    delete type_.object2d_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Object2D& TopicDataRecord::object2d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.object2D)
  return has_object2d()
      ? *type_.object2d_
      : ::ubii::dataStructure::Object2D::default_instance();
}
::ubii::dataStructure::Object2D* TopicDataRecord::mutable_object2d() {
  if (!has_object2d()) {
    clear_type();
    set_has_object2d();
    type_.object2d_ = new ::ubii::dataStructure::Object2D;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.object2D)
  return type_.object2d_;
}
::ubii::dataStructure::Object2D* TopicDataRecord::release_object2d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.object2D)
  if (has_object2d()) {
    clear_has_type();
    ::ubii::dataStructure::Object2D* temp = type_.object2d_;
    type_.object2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_object2d(::ubii::dataStructure::Object2D* object2d) {
  clear_type();
  if (object2d) {
    set_has_object2d();
    type_.object2d_ = object2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.object2D)
}

// optional .ubii.dataStructure.Object3D object3D = 20;
bool TopicDataRecord::has_object3d() const {
  return type_case() == kObject3D;
}
void TopicDataRecord::set_has_object3d() {
  _oneof_case_[0] = kObject3D;
}
void TopicDataRecord::clear_object3d() {
  if (has_object3d()) {
    delete type_.object3d_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Object3D& TopicDataRecord::object3d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.object3D)
  return has_object3d()
      ? *type_.object3d_
      : ::ubii::dataStructure::Object3D::default_instance();
}
::ubii::dataStructure::Object3D* TopicDataRecord::mutable_object3d() {
  if (!has_object3d()) {
    clear_type();
    set_has_object3d();
    type_.object3d_ = new ::ubii::dataStructure::Object3D;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.object3D)
  return type_.object3d_;
}
::ubii::dataStructure::Object3D* TopicDataRecord::release_object3d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.object3D)
  if (has_object3d()) {
    clear_has_type();
    ::ubii::dataStructure::Object3D* temp = type_.object3d_;
    type_.object3d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_object3d(::ubii::dataStructure::Object3D* object3d) {
  clear_type();
  if (object3d) {
    set_has_object3d();
    type_.object3d_ = object3d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.object3D)
}

// optional .ubii.dataStructure.Object2DList object2D_list = 21;
bool TopicDataRecord::has_object2d_list() const {
  return type_case() == kObject2DList;
}
void TopicDataRecord::set_has_object2d_list() {
  _oneof_case_[0] = kObject2DList;
}
void TopicDataRecord::clear_object2d_list() {
  if (has_object2d_list()) {
    delete type_.object2d_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Object2DList& TopicDataRecord::object2d_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.object2D_list)
  return has_object2d_list()
      ? *type_.object2d_list_
      : ::ubii::dataStructure::Object2DList::default_instance();
}
::ubii::dataStructure::Object2DList* TopicDataRecord::mutable_object2d_list() {
  if (!has_object2d_list()) {
    clear_type();
    set_has_object2d_list();
    type_.object2d_list_ = new ::ubii::dataStructure::Object2DList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.object2D_list)
  return type_.object2d_list_;
}
::ubii::dataStructure::Object2DList* TopicDataRecord::release_object2d_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.object2D_list)
  if (has_object2d_list()) {
    clear_has_type();
    ::ubii::dataStructure::Object2DList* temp = type_.object2d_list_;
    type_.object2d_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_object2d_list(::ubii::dataStructure::Object2DList* object2d_list) {
  clear_type();
  if (object2d_list) {
    set_has_object2d_list();
    type_.object2d_list_ = object2d_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.object2D_list)
}

// optional .ubii.dataStructure.Object3DList object3D_list = 22;
bool TopicDataRecord::has_object3d_list() const {
  return type_case() == kObject3DList;
}
void TopicDataRecord::set_has_object3d_list() {
  _oneof_case_[0] = kObject3DList;
}
void TopicDataRecord::clear_object3d_list() {
  if (has_object3d_list()) {
    delete type_.object3d_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Object3DList& TopicDataRecord::object3d_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.object3D_list)
  return has_object3d_list()
      ? *type_.object3d_list_
      : ::ubii::dataStructure::Object3DList::default_instance();
}
::ubii::dataStructure::Object3DList* TopicDataRecord::mutable_object3d_list() {
  if (!has_object3d_list()) {
    clear_type();
    set_has_object3d_list();
    type_.object3d_list_ = new ::ubii::dataStructure::Object3DList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.object3D_list)
  return type_.object3d_list_;
}
::ubii::dataStructure::Object3DList* TopicDataRecord::release_object3d_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.object3D_list)
  if (has_object3d_list()) {
    clear_has_type();
    ::ubii::dataStructure::Object3DList* temp = type_.object3d_list_;
    type_.object3d_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_object3d_list(::ubii::dataStructure::Object3DList* object3d_list) {
  clear_type();
  if (object3d_list) {
    set_has_object3d_list();
    type_.object3d_list_ = object3d_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.object3D_list)
}

// optional int32 int32 = 23;
bool TopicDataRecord::has_int32() const {
  return type_case() == kInt32;
}
void TopicDataRecord::set_has_int32() {
  _oneof_case_[0] = kInt32;
}
void TopicDataRecord::clear_int32() {
  if (has_int32()) {
    type_.int32_ = 0;
    clear_has_type();
  }
}
 ::google::protobuf::int32 TopicDataRecord::int32() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.int32)
  if (has_int32()) {
    return type_.int32_;
  }
  return 0;
}
 void TopicDataRecord::set_int32(::google::protobuf::int32 value) {
  if (!has_int32()) {
    clear_type();
    set_has_int32();
  }
  type_.int32_ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.int32)
}

// optional float float = 24;
bool TopicDataRecord::has_float_() const {
  return type_case() == kFloat;
}
void TopicDataRecord::set_has_float_() {
  _oneof_case_[0] = kFloat;
}
void TopicDataRecord::clear_float_() {
  if (has_float_()) {
    type_.float__ = 0;
    clear_has_type();
  }
}
 float TopicDataRecord::float_() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.float)
  if (has_float_()) {
    return type_.float__;
  }
  return 0;
}
 void TopicDataRecord::set_float_(float value) {
  if (!has_float_()) {
    clear_type();
    set_has_float_();
  }
  type_.float__ = value;
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataRecord.float)
}

// optional .ubii.dataStructure.Int32List int32_list = 25;
bool TopicDataRecord::has_int32_list() const {
  return type_case() == kInt32List;
}
void TopicDataRecord::set_has_int32_list() {
  _oneof_case_[0] = kInt32List;
}
void TopicDataRecord::clear_int32_list() {
  if (has_int32_list()) {
    delete type_.int32_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Int32List& TopicDataRecord::int32_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.int32_list)
  return has_int32_list()
      ? *type_.int32_list_
      : ::ubii::dataStructure::Int32List::default_instance();
}
::ubii::dataStructure::Int32List* TopicDataRecord::mutable_int32_list() {
  if (!has_int32_list()) {
    clear_type();
    set_has_int32_list();
    type_.int32_list_ = new ::ubii::dataStructure::Int32List;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.int32_list)
  return type_.int32_list_;
}
::ubii::dataStructure::Int32List* TopicDataRecord::release_int32_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.int32_list)
  if (has_int32_list()) {
    clear_has_type();
    ::ubii::dataStructure::Int32List* temp = type_.int32_list_;
    type_.int32_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_int32_list(::ubii::dataStructure::Int32List* int32_list) {
  clear_type();
  if (int32_list) {
    set_has_int32_list();
    type_.int32_list_ = int32_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.int32_list)
}

// optional .ubii.dataStructure.FloatList float_list = 26;
bool TopicDataRecord::has_float_list() const {
  return type_case() == kFloatList;
}
void TopicDataRecord::set_has_float_list() {
  _oneof_case_[0] = kFloatList;
}
void TopicDataRecord::clear_float_list() {
  if (has_float_list()) {
    delete type_.float_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::FloatList& TopicDataRecord::float_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.float_list)
  return has_float_list()
      ? *type_.float_list_
      : ::ubii::dataStructure::FloatList::default_instance();
}
::ubii::dataStructure::FloatList* TopicDataRecord::mutable_float_list() {
  if (!has_float_list()) {
    clear_type();
    set_has_float_list();
    type_.float_list_ = new ::ubii::dataStructure::FloatList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.float_list)
  return type_.float_list_;
}
::ubii::dataStructure::FloatList* TopicDataRecord::release_float_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.float_list)
  if (has_float_list()) {
    clear_has_type();
    ::ubii::dataStructure::FloatList* temp = type_.float_list_;
    type_.float_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_float_list(::ubii::dataStructure::FloatList* float_list) {
  clear_type();
  if (float_list) {
    set_has_float_list();
    type_.float_list_ = float_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.float_list)
}

// optional .ubii.dataStructure.DoubleList double_list = 27;
bool TopicDataRecord::has_double_list() const {
  return type_case() == kDoubleList;
}
void TopicDataRecord::set_has_double_list() {
  _oneof_case_[0] = kDoubleList;
}
void TopicDataRecord::clear_double_list() {
  if (has_double_list()) {
    delete type_.double_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::DoubleList& TopicDataRecord::double_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.double_list)
  return has_double_list()
      ? *type_.double_list_
      : ::ubii::dataStructure::DoubleList::default_instance();
}
::ubii::dataStructure::DoubleList* TopicDataRecord::mutable_double_list() {
  if (!has_double_list()) {
    clear_type();
    set_has_double_list();
    type_.double_list_ = new ::ubii::dataStructure::DoubleList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.double_list)
  return type_.double_list_;
}
::ubii::dataStructure::DoubleList* TopicDataRecord::release_double_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.double_list)
  if (has_double_list()) {
    clear_has_type();
    ::ubii::dataStructure::DoubleList* temp = type_.double_list_;
    type_.double_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_double_list(::ubii::dataStructure::DoubleList* double_list) {
  clear_type();
  if (double_list) {
    set_has_double_list();
    type_.double_list_ = double_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.double_list)
}

// optional .ubii.dataStructure.StringList string_list = 28;
bool TopicDataRecord::has_string_list() const {
  return type_case() == kStringList;
}
void TopicDataRecord::set_has_string_list() {
  _oneof_case_[0] = kStringList;
}
void TopicDataRecord::clear_string_list() {
  if (has_string_list()) {
    delete type_.string_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::StringList& TopicDataRecord::string_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.string_list)
  return has_string_list()
      ? *type_.string_list_
      : ::ubii::dataStructure::StringList::default_instance();
}
::ubii::dataStructure::StringList* TopicDataRecord::mutable_string_list() {
  if (!has_string_list()) {
    clear_type();
    set_has_string_list();
    type_.string_list_ = new ::ubii::dataStructure::StringList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.string_list)
  return type_.string_list_;
}
::ubii::dataStructure::StringList* TopicDataRecord::release_string_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.string_list)
  if (has_string_list()) {
    clear_has_type();
    ::ubii::dataStructure::StringList* temp = type_.string_list_;
    type_.string_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_string_list(::ubii::dataStructure::StringList* string_list) {
  clear_type();
  if (string_list) {
    set_has_string_list();
    type_.string_list_ = string_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.string_list)
}

// optional .ubii.dataStructure.BoolList bool_list = 29;
bool TopicDataRecord::has_bool_list() const {
  return type_case() == kBoolList;
}
void TopicDataRecord::set_has_bool_list() {
  _oneof_case_[0] = kBoolList;
}
void TopicDataRecord::clear_bool_list() {
  if (has_bool_list()) {
    delete type_.bool_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::BoolList& TopicDataRecord::bool_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.bool_list)
  return has_bool_list()
      ? *type_.bool_list_
      : ::ubii::dataStructure::BoolList::default_instance();
}
::ubii::dataStructure::BoolList* TopicDataRecord::mutable_bool_list() {
  if (!has_bool_list()) {
    clear_type();
    set_has_bool_list();
    type_.bool_list_ = new ::ubii::dataStructure::BoolList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.bool_list)
  return type_.bool_list_;
}
::ubii::dataStructure::BoolList* TopicDataRecord::release_bool_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.bool_list)
  if (has_bool_list()) {
    clear_has_type();
    ::ubii::dataStructure::BoolList* temp = type_.bool_list_;
    type_.bool_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_bool_list(::ubii::dataStructure::BoolList* bool_list) {
  clear_type();
  if (bool_list) {
    set_has_bool_list();
    type_.bool_list_ = bool_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.bool_list)
}

// optional .ubii.dataStructure.Image2D image2D = 30;
bool TopicDataRecord::has_image2d() const {
  return type_case() == kImage2D;
}
void TopicDataRecord::set_has_image2d() {
  _oneof_case_[0] = kImage2D;
}
void TopicDataRecord::clear_image2d() {
  if (has_image2d()) {
    delete type_.image2d_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Image2D& TopicDataRecord::image2d() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.image2D)
  return has_image2d()
      ? *type_.image2d_
      : ::ubii::dataStructure::Image2D::default_instance();
}
::ubii::dataStructure::Image2D* TopicDataRecord::mutable_image2d() {
  if (!has_image2d()) {
    clear_type();
    set_has_image2d();
    type_.image2d_ = new ::ubii::dataStructure::Image2D;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.image2D)
  return type_.image2d_;
}
::ubii::dataStructure::Image2D* TopicDataRecord::release_image2d() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.image2D)
  if (has_image2d()) {
    clear_has_type();
    ::ubii::dataStructure::Image2D* temp = type_.image2d_;
    type_.image2d_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_image2d(::ubii::dataStructure::Image2D* image2d) {
  clear_type();
  if (image2d) {
    set_has_image2d();
    type_.image2d_ = image2d;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.image2D)
}

// optional .ubii.dataStructure.Image2DList image2D_list = 31;
bool TopicDataRecord::has_image2d_list() const {
  return type_case() == kImage2DList;
}
void TopicDataRecord::set_has_image2d_list() {
  _oneof_case_[0] = kImage2DList;
}
void TopicDataRecord::clear_image2d_list() {
  if (has_image2d_list()) {
    delete type_.image2d_list_;
    clear_has_type();
  }
}
 const ::ubii::dataStructure::Image2DList& TopicDataRecord::image2d_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.image2D_list)
  return has_image2d_list()
      ? *type_.image2d_list_
      : ::ubii::dataStructure::Image2DList::default_instance();
}
::ubii::dataStructure::Image2DList* TopicDataRecord::mutable_image2d_list() {
  if (!has_image2d_list()) {
    clear_type();
    set_has_image2d_list();
    type_.image2d_list_ = new ::ubii::dataStructure::Image2DList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.image2D_list)
  return type_.image2d_list_;
}
::ubii::dataStructure::Image2DList* TopicDataRecord::release_image2d_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.image2D_list)
  if (has_image2d_list()) {
    clear_has_type();
    ::ubii::dataStructure::Image2DList* temp = type_.image2d_list_;
    type_.image2d_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_image2d_list(::ubii::dataStructure::Image2DList* image2d_list) {
  clear_type();
  if (image2d_list) {
    set_has_image2d_list();
    type_.image2d_list_ = image2d_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.image2D_list)
}

// optional .ubii.sessions.Session session = 32;
bool TopicDataRecord::has_session() const {
  return type_case() == kSession;
}
void TopicDataRecord::set_has_session() {
  _oneof_case_[0] = kSession;
}
void TopicDataRecord::clear_session() {
  if (has_session()) {
    delete type_.session_;
    clear_has_type();
  }
}
 const ::ubii::sessions::Session& TopicDataRecord::session() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.session)
  return has_session()
      ? *type_.session_
      : ::ubii::sessions::Session::default_instance();
}
::ubii::sessions::Session* TopicDataRecord::mutable_session() {
  if (!has_session()) {
    clear_type();
    set_has_session();
    type_.session_ = new ::ubii::sessions::Session;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.session)
  return type_.session_;
}
::ubii::sessions::Session* TopicDataRecord::release_session() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.session)
  if (has_session()) {
    clear_has_type();
    ::ubii::sessions::Session* temp = type_.session_;
    type_.session_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_session(::ubii::sessions::Session* session) {
  clear_type();
  if (session) {
    set_has_session();
    type_.session_ = session;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.session)
}

// optional .ubii.processing.ProcessingModuleList processing_module_list = 33;
bool TopicDataRecord::has_processing_module_list() const {
  return type_case() == kProcessingModuleList;
}
void TopicDataRecord::set_has_processing_module_list() {
  _oneof_case_[0] = kProcessingModuleList;
}
void TopicDataRecord::clear_processing_module_list() {
  if (has_processing_module_list()) {
    delete type_.processing_module_list_;
    clear_has_type();
  }
}
 const ::ubii::processing::ProcessingModuleList& TopicDataRecord::processing_module_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecord.processing_module_list)
  return has_processing_module_list()
      ? *type_.processing_module_list_
      : ::ubii::processing::ProcessingModuleList::default_instance();
}
::ubii::processing::ProcessingModuleList* TopicDataRecord::mutable_processing_module_list() {
  if (!has_processing_module_list()) {
    clear_type();
    set_has_processing_module_list();
    type_.processing_module_list_ = new ::ubii::processing::ProcessingModuleList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecord.processing_module_list)
  return type_.processing_module_list_;
}
::ubii::processing::ProcessingModuleList* TopicDataRecord::release_processing_module_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataRecord.processing_module_list)
  if (has_processing_module_list()) {
    clear_has_type();
    ::ubii::processing::ProcessingModuleList* temp = type_.processing_module_list_;
    type_.processing_module_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicDataRecord::set_allocated_processing_module_list(::ubii::processing::ProcessingModuleList* processing_module_list) {
  clear_type();
  if (processing_module_list) {
    set_has_processing_module_list();
    type_.processing_module_list_ = processing_module_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataRecord.processing_module_list)
}

bool TopicDataRecord::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void TopicDataRecord::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
TopicDataRecord::TypeCase TopicDataRecord::type_case() const {
  return TopicDataRecord::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicDataRecordList::kElementsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicDataRecordList::TopicDataRecordList()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.topicData.TopicDataRecordList)
}

void TopicDataRecordList::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

TopicDataRecordList::TopicDataRecordList(const TopicDataRecordList& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.topicData.TopicDataRecordList)
}

void TopicDataRecordList::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

TopicDataRecordList::~TopicDataRecordList() {
  // @@protoc_insertion_point(destructor:ubii.topicData.TopicDataRecordList)
  SharedDtor();
}

void TopicDataRecordList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TopicDataRecordList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicDataRecordList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicDataRecordList_descriptor_;
}

const TopicDataRecordList& TopicDataRecordList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto();
  return *default_instance_;
}

TopicDataRecordList* TopicDataRecordList::default_instance_ = NULL;

TopicDataRecordList* TopicDataRecordList::New(::google::protobuf::Arena* arena) const {
  TopicDataRecordList* n = new TopicDataRecordList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicDataRecordList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.topicData.TopicDataRecordList)
  elements_.Clear();
}

bool TopicDataRecordList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.topicData.TopicDataRecordList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ubii.topicData.TopicDataRecord elements = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_elements:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_elements()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_elements;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.topicData.TopicDataRecordList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.topicData.TopicDataRecordList)
  return false;
#undef DO_
}

void TopicDataRecordList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.topicData.TopicDataRecordList)
  // repeated .ubii.topicData.TopicDataRecord elements = 1;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->elements(i), output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.topicData.TopicDataRecordList)
}

::google::protobuf::uint8* TopicDataRecordList::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.topicData.TopicDataRecordList)
  // repeated .ubii.topicData.TopicDataRecord elements = 1;
  for (unsigned int i = 0, n = this->elements_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->elements(i), false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.topicData.TopicDataRecordList)
  return target;
}

int TopicDataRecordList::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.topicData.TopicDataRecordList)
  int total_size = 0;

  // repeated .ubii.topicData.TopicDataRecord elements = 1;
  total_size += 1 * this->elements_size();
  for (int i = 0; i < this->elements_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->elements(i));
  }

  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicDataRecordList::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.topicData.TopicDataRecordList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicDataRecordList* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicDataRecordList>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.topicData.TopicDataRecordList)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.topicData.TopicDataRecordList)
    MergeFrom(*source);
  }
}

void TopicDataRecordList::MergeFrom(const TopicDataRecordList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.topicData.TopicDataRecordList)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  elements_.MergeFrom(from.elements_);
}

void TopicDataRecordList::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.topicData.TopicDataRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicDataRecordList::CopyFrom(const TopicDataRecordList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.topicData.TopicDataRecordList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicDataRecordList::IsInitialized() const {

  return true;
}

void TopicDataRecordList::Swap(TopicDataRecordList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicDataRecordList::InternalSwap(TopicDataRecordList* other) {
  elements_.UnsafeArenaSwap(&other->elements_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicDataRecordList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicDataRecordList_descriptor_;
  metadata.reflection = TopicDataRecordList_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicDataRecordList

// repeated .ubii.topicData.TopicDataRecord elements = 1;
int TopicDataRecordList::elements_size() const {
  return elements_.size();
}
void TopicDataRecordList::clear_elements() {
  elements_.Clear();
}
const ::ubii::topicData::TopicDataRecord& TopicDataRecordList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Get(index);
}
::ubii::topicData::TopicDataRecord* TopicDataRecordList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Mutable(index);
}
::ubii::topicData::TopicDataRecord* TopicDataRecordList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.topicData.TopicDataRecordList.elements)
  return elements_.Add();
}
::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
TopicDataRecordList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.topicData.TopicDataRecordList.elements)
  return &elements_;
}
const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
TopicDataRecordList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.topicData.TopicDataRecordList.elements)
  return elements_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace topicData
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
