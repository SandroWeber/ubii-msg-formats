// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/topicData/topicData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ubii {
namespace topicData {

namespace {

const ::google::protobuf::Descriptor* TopicData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TopicData_reflection_ = NULL;
struct TopicDataOneofInstance {
  const ::ubii::topicData::TopicDataRecord* topic_data_record_;
  const ::ubii::topicData::TopicDataRecordList* topic_data_record_list_;
  const ::ubii::general::Error* error_;
}* TopicData_default_oneof_instance_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2ftopicData_2ftopicData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_proto_2ftopicData_2ftopicData_2eproto() {
  protobuf_AddDesc_proto_2ftopicData_2ftopicData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/topicData/topicData.proto");
  GOOGLE_CHECK(file != NULL);
  TopicData_descriptor_ = file->message_type(0);
  static const int TopicData_offsets_[4] = {
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicData_default_oneof_instance_, topic_data_record_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicData_default_oneof_instance_, topic_data_record_list_),
    PROTO2_GENERATED_DEFAULT_ONEOF_FIELD_OFFSET(TopicData_default_oneof_instance_, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicData, type_),
  };
  TopicData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TopicData_descriptor_,
      TopicData::default_instance_,
      TopicData_offsets_,
      -1,
      -1,
      -1,
      TopicData_default_oneof_instance_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicData, _oneof_case_[0]),
      sizeof(TopicData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicData, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TopicData, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2ftopicData_2ftopicData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TopicData_descriptor_, &TopicData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2ftopicData_2ftopicData_2eproto() {
  delete TopicData::default_instance_;
  delete TopicData_default_oneof_instance_;
  delete TopicData_reflection_;
}

void protobuf_AddDesc_proto_2ftopicData_2ftopicData_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_proto_2ftopicData_2ftopicData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ubii::topicData::protobuf_AddDesc_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto();
  ::ubii::general::protobuf_AddDesc_proto_2fgeneral_2ferror_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037proto/topicData/topicData.proto\022\016ubii."
    "topicData\0325proto/topicData/topicDataReco"
    "rd/topicDataRecord.proto\032\031proto/general/"
    "error.proto\"\276\001\n\tTopicData\022<\n\021topic_data_"
    "record\030\002 \001(\0132\037.ubii.topicData.TopicDataR"
    "ecordH\000\022E\n\026topic_data_record_list\030\003 \001(\0132"
    "#.ubii.topicData.TopicDataRecordListH\000\022$"
    "\n\005error\030\004 \001(\0132\023.ubii.general.ErrorH\000B\006\n\004"
    "typeb\006proto3", 332);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/topicData/topicData.proto", &protobuf_RegisterTypes);
  TopicData::default_instance_ = new TopicData();
  TopicData_default_oneof_instance_ = new TopicDataOneofInstance();
  TopicData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2ftopicData_2ftopicData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2ftopicData_2ftopicData_2eproto {
  StaticDescriptorInitializer_proto_2ftopicData_2ftopicData_2eproto() {
    protobuf_AddDesc_proto_2ftopicData_2ftopicData_2eproto();
  }
} static_descriptor_initializer_proto_2ftopicData_2ftopicData_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TopicData::kTopicDataRecordFieldNumber;
const int TopicData::kTopicDataRecordListFieldNumber;
const int TopicData::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TopicData::TopicData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.topicData.TopicData)
}

void TopicData::InitAsDefaultInstance() {
  _is_default_instance_ = true;
  TopicData_default_oneof_instance_->topic_data_record_ = const_cast< ::ubii::topicData::TopicDataRecord*>(&::ubii::topicData::TopicDataRecord::default_instance());
  TopicData_default_oneof_instance_->topic_data_record_list_ = const_cast< ::ubii::topicData::TopicDataRecordList*>(&::ubii::topicData::TopicDataRecordList::default_instance());
  TopicData_default_oneof_instance_->error_ = const_cast< ::ubii::general::Error*>(&::ubii::general::Error::default_instance());
}

TopicData::TopicData(const TopicData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ubii.topicData.TopicData)
}

void TopicData::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  clear_has_type();
}

TopicData::~TopicData() {
  // @@protoc_insertion_point(destructor:ubii.topicData.TopicData)
  SharedDtor();
}

void TopicData::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
  if (this != default_instance_) {
  }
}

void TopicData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TopicData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TopicData_descriptor_;
}

const TopicData& TopicData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2ftopicData_2ftopicData_2eproto();
  return *default_instance_;
}

TopicData* TopicData::default_instance_ = NULL;

TopicData* TopicData::New(::google::protobuf::Arena* arena) const {
  TopicData* n = new TopicData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TopicData::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.topicData.TopicData)
  switch(type_case()) {
    case kTopicDataRecord: {
      delete type_.topic_data_record_;
      break;
    }
    case kTopicDataRecordList: {
      delete type_.topic_data_record_list_;
      break;
    }
    case kError: {
      delete type_.error_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TopicData::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.topicData.TopicData)
  clear_type();
}

bool TopicData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ubii.topicData.TopicData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ubii.topicData.TopicDataRecord topic_data_record = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_data_record()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_topic_data_record_list;
        break;
      }

      // optional .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
      case 3: {
        if (tag == 26) {
         parse_topic_data_record_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topic_data_record_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_error;
        break;
      }

      // optional .ubii.general.Error error = 4;
      case 4: {
        if (tag == 34) {
         parse_error:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ubii.topicData.TopicData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ubii.topicData.TopicData)
  return false;
#undef DO_
}

void TopicData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ubii.topicData.TopicData)
  // optional .ubii.topicData.TopicDataRecord topic_data_record = 2;
  if (has_topic_data_record()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *type_.topic_data_record_, output);
  }

  // optional .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
  if (has_topic_data_record_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *type_.topic_data_record_list_, output);
  }

  // optional .ubii.general.Error error = 4;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *type_.error_, output);
  }

  // @@protoc_insertion_point(serialize_end:ubii.topicData.TopicData)
}

::google::protobuf::uint8* TopicData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.topicData.TopicData)
  // optional .ubii.topicData.TopicDataRecord topic_data_record = 2;
  if (has_topic_data_record()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *type_.topic_data_record_, false, target);
  }

  // optional .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
  if (has_topic_data_record_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *type_.topic_data_record_list_, false, target);
  }

  // optional .ubii.general.Error error = 4;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *type_.error_, false, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:ubii.topicData.TopicData)
  return target;
}

int TopicData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.topicData.TopicData)
  int total_size = 0;

  switch (type_case()) {
    // optional .ubii.topicData.TopicDataRecord topic_data_record = 2;
    case kTopicDataRecord: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_data_record_);
      break;
    }
    // optional .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
    case kTopicDataRecordList: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.topic_data_record_list_);
      break;
    }
    // optional .ubii.general.Error error = 4;
    case kError: {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *type_.error_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TopicData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.topicData.TopicData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TopicData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TopicData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.topicData.TopicData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.topicData.TopicData)
    MergeFrom(*source);
  }
}

void TopicData::MergeFrom(const TopicData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.topicData.TopicData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  switch (from.type_case()) {
    case kTopicDataRecord: {
      mutable_topic_data_record()->::ubii::topicData::TopicDataRecord::MergeFrom(from.topic_data_record());
      break;
    }
    case kTopicDataRecordList: {
      mutable_topic_data_record_list()->::ubii::topicData::TopicDataRecordList::MergeFrom(from.topic_data_record_list());
      break;
    }
    case kError: {
      mutable_error()->::ubii::general::Error::MergeFrom(from.error());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void TopicData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.topicData.TopicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicData::CopyFrom(const TopicData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.topicData.TopicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicData::IsInitialized() const {

  return true;
}

void TopicData::Swap(TopicData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TopicData::InternalSwap(TopicData* other) {
  std::swap(type_, other->type_);
  std::swap(_oneof_case_[0], other->_oneof_case_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TopicData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TopicData_descriptor_;
  metadata.reflection = TopicData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicData

// optional .ubii.topicData.TopicDataRecord topic_data_record = 2;
bool TopicData::has_topic_data_record() const {
  return type_case() == kTopicDataRecord;
}
void TopicData::set_has_topic_data_record() {
  _oneof_case_[0] = kTopicDataRecord;
}
void TopicData::clear_topic_data_record() {
  if (has_topic_data_record()) {
    delete type_.topic_data_record_;
    clear_has_type();
  }
}
 const ::ubii::topicData::TopicDataRecord& TopicData::topic_data_record() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.topic_data_record)
  return has_topic_data_record()
      ? *type_.topic_data_record_
      : ::ubii::topicData::TopicDataRecord::default_instance();
}
::ubii::topicData::TopicDataRecord* TopicData::mutable_topic_data_record() {
  if (!has_topic_data_record()) {
    clear_type();
    set_has_topic_data_record();
    type_.topic_data_record_ = new ::ubii::topicData::TopicDataRecord;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.topic_data_record)
  return type_.topic_data_record_;
}
::ubii::topicData::TopicDataRecord* TopicData::release_topic_data_record() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.topic_data_record)
  if (has_topic_data_record()) {
    clear_has_type();
    ::ubii::topicData::TopicDataRecord* temp = type_.topic_data_record_;
    type_.topic_data_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicData::set_allocated_topic_data_record(::ubii::topicData::TopicDataRecord* topic_data_record) {
  clear_type();
  if (topic_data_record) {
    set_has_topic_data_record();
    type_.topic_data_record_ = topic_data_record;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.topic_data_record)
}

// optional .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
bool TopicData::has_topic_data_record_list() const {
  return type_case() == kTopicDataRecordList;
}
void TopicData::set_has_topic_data_record_list() {
  _oneof_case_[0] = kTopicDataRecordList;
}
void TopicData::clear_topic_data_record_list() {
  if (has_topic_data_record_list()) {
    delete type_.topic_data_record_list_;
    clear_has_type();
  }
}
 const ::ubii::topicData::TopicDataRecordList& TopicData::topic_data_record_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.topic_data_record_list)
  return has_topic_data_record_list()
      ? *type_.topic_data_record_list_
      : ::ubii::topicData::TopicDataRecordList::default_instance();
}
::ubii::topicData::TopicDataRecordList* TopicData::mutable_topic_data_record_list() {
  if (!has_topic_data_record_list()) {
    clear_type();
    set_has_topic_data_record_list();
    type_.topic_data_record_list_ = new ::ubii::topicData::TopicDataRecordList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.topic_data_record_list)
  return type_.topic_data_record_list_;
}
::ubii::topicData::TopicDataRecordList* TopicData::release_topic_data_record_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.topic_data_record_list)
  if (has_topic_data_record_list()) {
    clear_has_type();
    ::ubii::topicData::TopicDataRecordList* temp = type_.topic_data_record_list_;
    type_.topic_data_record_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicData::set_allocated_topic_data_record_list(::ubii::topicData::TopicDataRecordList* topic_data_record_list) {
  clear_type();
  if (topic_data_record_list) {
    set_has_topic_data_record_list();
    type_.topic_data_record_list_ = topic_data_record_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.topic_data_record_list)
}

// optional .ubii.general.Error error = 4;
bool TopicData::has_error() const {
  return type_case() == kError;
}
void TopicData::set_has_error() {
  _oneof_case_[0] = kError;
}
void TopicData::clear_error() {
  if (has_error()) {
    delete type_.error_;
    clear_has_type();
  }
}
 const ::ubii::general::Error& TopicData::error() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.error)
  return has_error()
      ? *type_.error_
      : ::ubii::general::Error::default_instance();
}
::ubii::general::Error* TopicData::mutable_error() {
  if (!has_error()) {
    clear_type();
    set_has_error();
    type_.error_ = new ::ubii::general::Error;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.error)
  return type_.error_;
}
::ubii::general::Error* TopicData::release_error() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.error)
  if (has_error()) {
    clear_has_type();
    ::ubii::general::Error* temp = type_.error_;
    type_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
void TopicData::set_allocated_error(::ubii::general::Error* error) {
  clear_type();
  if (error) {
    set_has_error();
    type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.error)
}

bool TopicData::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
void TopicData::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
TopicData::TypeCase TopicData::type_case() const {
  return TopicData::TypeCase(_oneof_case_[0]);
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace topicData
}  // namespace ubii

// @@protoc_insertion_point(global_scope)
