// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicData.proto

#include "proto/topicData/topicData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fgeneral_2ferror_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Error_proto_2fgeneral_2ferror_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<27> scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicDataRecordList_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto;
namespace ubii {
namespace topicData {
class TopicDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicData> _instance;
  const ::ubii::topicData::TopicDataRecord* topic_data_record_;
  const ::ubii::topicData::TopicDataRecordList* topic_data_record_list_;
  const ::ubii::general::Error* error_;
} _TopicData_default_instance_;
}  // namespace topicData
}  // namespace ubii
static void InitDefaultsscc_info_TopicData_proto_2ftopicData_2ftopicData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::topicData::_TopicData_default_instance_;
    new (ptr) ::ubii::topicData::TopicData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::topicData::TopicData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_TopicData_proto_2ftopicData_2ftopicData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_TopicData_proto_2ftopicData_2ftopicData_2eproto}, {
      &scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base,
      &scc_info_TopicDataRecordList_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto.base,
      &scc_info_Error_proto_2fgeneral_2ferror_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2ftopicData_2ftopicData_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2ftopicData_2ftopicData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2ftopicData_2ftopicData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2ftopicData_2ftopicData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ubii::topicData::TopicDataDefaultTypeInternal, topic_data_record_),
  offsetof(::ubii::topicData::TopicDataDefaultTypeInternal, topic_data_record_list_),
  offsetof(::ubii::topicData::TopicDataDefaultTypeInternal, error_),
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicData, type_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ubii::topicData::TopicData)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::topicData::_TopicData_default_instance_),
};

const char descriptor_table_protodef_proto_2ftopicData_2ftopicData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\037proto/topicData/topicData.proto\022\016ubii."
  "topicData\0325proto/topicData/topicDataReco"
  "rd/topicDataRecord.proto\032\031proto/general/"
  "error.proto\"\276\001\n\tTopicData\022<\n\021topic_data_"
  "record\030\002 \001(\0132\037.ubii.topicData.TopicDataR"
  "ecordH\000\022E\n\026topic_data_record_list\030\003 \001(\0132"
  "#.ubii.topicData.TopicDataRecordListH\000\022$"
  "\n\005error\030\004 \001(\0132\023.ubii.general.ErrorH\000B\006\n\004"
  "typeb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2ftopicData_2ftopicData_2eproto_deps[2] = {
  &::descriptor_table_proto_2fgeneral_2ferror_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2ftopicDataRecord_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2ftopicData_2ftopicData_2eproto_sccs[1] = {
  &scc_info_TopicData_proto_2ftopicData_2ftopicData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2ftopicData_2ftopicData_2eproto_once;
static bool descriptor_table_proto_2ftopicData_2ftopicData_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftopicData_2ftopicData_2eproto = {
  &descriptor_table_proto_2ftopicData_2ftopicData_2eproto_initialized, descriptor_table_protodef_proto_2ftopicData_2ftopicData_2eproto, "proto/topicData/topicData.proto", 332,
  &descriptor_table_proto_2ftopicData_2ftopicData_2eproto_once, descriptor_table_proto_2ftopicData_2ftopicData_2eproto_sccs, descriptor_table_proto_2ftopicData_2ftopicData_2eproto_deps, 1, 2,
  schemas, file_default_instances, TableStruct_proto_2ftopicData_2ftopicData_2eproto::offsets,
  file_level_metadata_proto_2ftopicData_2ftopicData_2eproto, 1, file_level_enum_descriptors_proto_2ftopicData_2ftopicData_2eproto, file_level_service_descriptors_proto_2ftopicData_2ftopicData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2ftopicData_2ftopicData_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2ftopicData_2ftopicData_2eproto), true);
namespace ubii {
namespace topicData {

// ===================================================================

void TopicData::InitAsDefaultInstance() {
  ::ubii::topicData::_TopicData_default_instance_.topic_data_record_ = const_cast< ::ubii::topicData::TopicDataRecord*>(
      ::ubii::topicData::TopicDataRecord::internal_default_instance());
  ::ubii::topicData::_TopicData_default_instance_.topic_data_record_list_ = const_cast< ::ubii::topicData::TopicDataRecordList*>(
      ::ubii::topicData::TopicDataRecordList::internal_default_instance());
  ::ubii::topicData::_TopicData_default_instance_.error_ = const_cast< ::ubii::general::Error*>(
      ::ubii::general::Error::internal_default_instance());
}
class TopicData::_Internal {
 public:
  static const ::ubii::topicData::TopicDataRecord& topic_data_record(const TopicData* msg);
  static const ::ubii::topicData::TopicDataRecordList& topic_data_record_list(const TopicData* msg);
  static const ::ubii::general::Error& error(const TopicData* msg);
};

const ::ubii::topicData::TopicDataRecord&
TopicData::_Internal::topic_data_record(const TopicData* msg) {
  return *msg->type_.topic_data_record_;
}
const ::ubii::topicData::TopicDataRecordList&
TopicData::_Internal::topic_data_record_list(const TopicData* msg) {
  return *msg->type_.topic_data_record_list_;
}
const ::ubii::general::Error&
TopicData::_Internal::error(const TopicData* msg) {
  return *msg->type_.error_;
}
void TopicData::set_allocated_topic_data_record(::ubii::topicData::TopicDataRecord* topic_data_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_data_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic_data_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_data_record, submessage_arena);
    }
    set_has_topic_data_record();
    type_.topic_data_record_ = topic_data_record;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.topic_data_record)
}
void TopicData::clear_topic_data_record() {
  if (_internal_has_topic_data_record()) {
    delete type_.topic_data_record_;
    clear_has_type();
  }
}
void TopicData::set_allocated_topic_data_record_list(::ubii::topicData::TopicDataRecordList* topic_data_record_list) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (topic_data_record_list) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      topic_data_record_list = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topic_data_record_list, submessage_arena);
    }
    set_has_topic_data_record_list();
    type_.topic_data_record_list_ = topic_data_record_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.topic_data_record_list)
}
void TopicData::clear_topic_data_record_list() {
  if (_internal_has_topic_data_record_list()) {
    delete type_.topic_data_record_list_;
    clear_has_type();
  }
}
void TopicData::set_allocated_error(::ubii::general::Error* error) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (error) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      error = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
    type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.error)
}
void TopicData::clear_error() {
  if (_internal_has_error()) {
    delete type_.error_;
    clear_has_type();
  }
}
TopicData::TopicData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.topicData.TopicData)
}
TopicData::TopicData(const TopicData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kTopicDataRecord: {
      _internal_mutable_topic_data_record()->::ubii::topicData::TopicDataRecord::MergeFrom(from._internal_topic_data_record());
      break;
    }
    case kTopicDataRecordList: {
      _internal_mutable_topic_data_record_list()->::ubii::topicData::TopicDataRecordList::MergeFrom(from._internal_topic_data_record_list());
      break;
    }
    case kError: {
      _internal_mutable_error()->::ubii::general::Error::MergeFrom(from._internal_error());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ubii.topicData.TopicData)
}

void TopicData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicData_proto_2ftopicData_2ftopicData_2eproto.base);
  clear_has_type();
}

TopicData::~TopicData() {
  // @@protoc_insertion_point(destructor:ubii.topicData.TopicData)
  SharedDtor();
}

void TopicData::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void TopicData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicData& TopicData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicData_proto_2ftopicData_2ftopicData_2eproto.base);
  return *internal_default_instance();
}


void TopicData::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.topicData.TopicData)
  switch (type_case()) {
    case kTopicDataRecord: {
      delete type_.topic_data_record_;
      break;
    }
    case kTopicDataRecordList: {
      delete type_.topic_data_record_list_;
      break;
    }
    case kError: {
      delete type_.error_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TopicData::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.topicData.TopicData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

const char* TopicData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .ubii.topicData.TopicDataRecord topic_data_record = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_data_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_topic_data_record_list(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.general.Error error = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_error(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.topicData.TopicData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ubii.topicData.TopicDataRecord topic_data_record = 2;
  if (_internal_has_topic_data_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::topic_data_record(this), target, stream);
  }

  // .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
  if (_internal_has_topic_data_record_list()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::topic_data_record_list(this), target, stream);
  }

  // .ubii.general.Error error = 4;
  if (_internal_has_error()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::error(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.topicData.TopicData)
  return target;
}

size_t TopicData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.topicData.TopicData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // .ubii.topicData.TopicDataRecord topic_data_record = 2;
    case kTopicDataRecord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.topic_data_record_);
      break;
    }
    // .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
    case kTopicDataRecordList: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.topic_data_record_list_);
      break;
    }
    // .ubii.general.Error error = 4;
    case kError: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.error_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.topicData.TopicData)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.topicData.TopicData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.topicData.TopicData)
    MergeFrom(*source);
  }
}

void TopicData::MergeFrom(const TopicData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.topicData.TopicData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kTopicDataRecord: {
      _internal_mutable_topic_data_record()->::ubii::topicData::TopicDataRecord::MergeFrom(from._internal_topic_data_record());
      break;
    }
    case kTopicDataRecordList: {
      _internal_mutable_topic_data_record_list()->::ubii::topicData::TopicDataRecordList::MergeFrom(from._internal_topic_data_record_list());
      break;
    }
    case kError: {
      _internal_mutable_error()->::ubii::general::Error::MergeFrom(from._internal_error());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void TopicData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.topicData.TopicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicData::CopyFrom(const TopicData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.topicData.TopicData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicData::IsInitialized() const {
  return true;
}

void TopicData::InternalSwap(TopicData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicData::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace topicData
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ubii::topicData::TopicData* Arena::CreateMaybeMessage< ::ubii::topicData::TopicData >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::topicData::TopicData >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
