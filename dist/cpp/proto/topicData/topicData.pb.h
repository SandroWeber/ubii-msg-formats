// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3010000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3010000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/topicDataRecord.pb.h"
#include "proto/general/error.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftopicData_2ftopicData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftopicData_2ftopicData_2eproto;
namespace ubii {
namespace topicData {
class TopicData;
class TopicDataDefaultTypeInternal;
extern TopicDataDefaultTypeInternal _TopicData_default_instance_;
}  // namespace topicData
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::topicData::TopicData* Arena::CreateMaybeMessage<::ubii::topicData::TopicData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace topicData {

// ===================================================================

class TopicData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicData) */ {
 public:
  TopicData();
  virtual ~TopicData();

  TopicData(const TopicData& from);
  TopicData(TopicData&& from) noexcept
    : TopicData() {
    *this = ::std::move(from);
  }

  inline TopicData& operator=(const TopicData& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicData& operator=(TopicData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicData& default_instance();

  enum TypeCase {
    kTopicDataRecord = 2,
    kTopicDataRecordList = 3,
    kError = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicData* internal_default_instance() {
    return reinterpret_cast<const TopicData*>(
               &_TopicData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TopicData& a, TopicData& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicData* New() const final {
    return CreateMaybeMessage<TopicData>(nullptr);
  }

  TopicData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicData& from);
  void MergeFrom(const TopicData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.topicData.TopicData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftopicData_2ftopicData_2eproto);
    return ::descriptor_table_proto_2ftopicData_2ftopicData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicDataRecordFieldNumber = 2,
    kTopicDataRecordListFieldNumber = 3,
    kErrorFieldNumber = 4,
  };
  // .ubii.topicData.TopicDataRecord topic_data_record = 2;
  bool has_topic_data_record() const;
  private:
  bool _internal_has_topic_data_record() const;
  public:
  void clear_topic_data_record();
  const ::ubii::topicData::TopicDataRecord& topic_data_record() const;
  ::ubii::topicData::TopicDataRecord* release_topic_data_record();
  ::ubii::topicData::TopicDataRecord* mutable_topic_data_record();
  void set_allocated_topic_data_record(::ubii::topicData::TopicDataRecord* topic_data_record);
  private:
  const ::ubii::topicData::TopicDataRecord& _internal_topic_data_record() const;
  ::ubii::topicData::TopicDataRecord* _internal_mutable_topic_data_record();
  public:

  // .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
  bool has_topic_data_record_list() const;
  private:
  bool _internal_has_topic_data_record_list() const;
  public:
  void clear_topic_data_record_list();
  const ::ubii::topicData::TopicDataRecordList& topic_data_record_list() const;
  ::ubii::topicData::TopicDataRecordList* release_topic_data_record_list();
  ::ubii::topicData::TopicDataRecordList* mutable_topic_data_record_list();
  void set_allocated_topic_data_record_list(::ubii::topicData::TopicDataRecordList* topic_data_record_list);
  private:
  const ::ubii::topicData::TopicDataRecordList& _internal_topic_data_record_list() const;
  ::ubii::topicData::TopicDataRecordList* _internal_mutable_topic_data_record_list();
  public:

  // .ubii.general.Error error = 4;
  bool has_error() const;
  private:
  bool _internal_has_error() const;
  public:
  void clear_error();
  const ::ubii::general::Error& error() const;
  ::ubii::general::Error* release_error();
  ::ubii::general::Error* mutable_error();
  void set_allocated_error(::ubii::general::Error* error);
  private:
  const ::ubii::general::Error& _internal_error() const;
  ::ubii::general::Error* _internal_mutable_error();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicData)
 private:
  class _Internal;
  void set_has_topic_data_record();
  void set_has_topic_data_record_list();
  void set_has_error();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::ubii::topicData::TopicDataRecord* topic_data_record_;
    ::ubii::topicData::TopicDataRecordList* topic_data_record_list_;
    ::ubii::general::Error* error_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2ftopicData_2ftopicData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicData

// .ubii.topicData.TopicDataRecord topic_data_record = 2;
inline bool TopicData::_internal_has_topic_data_record() const {
  return type_case() == kTopicDataRecord;
}
inline bool TopicData::has_topic_data_record() const {
  return _internal_has_topic_data_record();
}
inline void TopicData::set_has_topic_data_record() {
  _oneof_case_[0] = kTopicDataRecord;
}
inline ::ubii::topicData::TopicDataRecord* TopicData::release_topic_data_record() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.topic_data_record)
  if (has_topic_data_record()) {
    clear_has_type();
      ::ubii::topicData::TopicDataRecord* temp = type_.topic_data_record_;
    type_.topic_data_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::topicData::TopicDataRecord& TopicData::_internal_topic_data_record() const {
  return _internal_has_topic_data_record()
      ? *type_.topic_data_record_
      : *reinterpret_cast< ::ubii::topicData::TopicDataRecord*>(&::ubii::topicData::_TopicDataRecord_default_instance_);
}
inline const ::ubii::topicData::TopicDataRecord& TopicData::topic_data_record() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.topic_data_record)
  return _internal_topic_data_record();
}
inline ::ubii::topicData::TopicDataRecord* TopicData::_internal_mutable_topic_data_record() {
  if (!_internal_has_topic_data_record()) {
    clear_type();
    set_has_topic_data_record();
    type_.topic_data_record_ = CreateMaybeMessage< ::ubii::topicData::TopicDataRecord >(
        GetArenaNoVirtual());
  }
  return type_.topic_data_record_;
}
inline ::ubii::topicData::TopicDataRecord* TopicData::mutable_topic_data_record() {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.topic_data_record)
  return _internal_mutable_topic_data_record();
}

// .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
inline bool TopicData::_internal_has_topic_data_record_list() const {
  return type_case() == kTopicDataRecordList;
}
inline bool TopicData::has_topic_data_record_list() const {
  return _internal_has_topic_data_record_list();
}
inline void TopicData::set_has_topic_data_record_list() {
  _oneof_case_[0] = kTopicDataRecordList;
}
inline ::ubii::topicData::TopicDataRecordList* TopicData::release_topic_data_record_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.topic_data_record_list)
  if (has_topic_data_record_list()) {
    clear_has_type();
      ::ubii::topicData::TopicDataRecordList* temp = type_.topic_data_record_list_;
    type_.topic_data_record_list_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::topicData::TopicDataRecordList& TopicData::_internal_topic_data_record_list() const {
  return _internal_has_topic_data_record_list()
      ? *type_.topic_data_record_list_
      : *reinterpret_cast< ::ubii::topicData::TopicDataRecordList*>(&::ubii::topicData::_TopicDataRecordList_default_instance_);
}
inline const ::ubii::topicData::TopicDataRecordList& TopicData::topic_data_record_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.topic_data_record_list)
  return _internal_topic_data_record_list();
}
inline ::ubii::topicData::TopicDataRecordList* TopicData::_internal_mutable_topic_data_record_list() {
  if (!_internal_has_topic_data_record_list()) {
    clear_type();
    set_has_topic_data_record_list();
    type_.topic_data_record_list_ = CreateMaybeMessage< ::ubii::topicData::TopicDataRecordList >(
        GetArenaNoVirtual());
  }
  return type_.topic_data_record_list_;
}
inline ::ubii::topicData::TopicDataRecordList* TopicData::mutable_topic_data_record_list() {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.topic_data_record_list)
  return _internal_mutable_topic_data_record_list();
}

// .ubii.general.Error error = 4;
inline bool TopicData::_internal_has_error() const {
  return type_case() == kError;
}
inline bool TopicData::has_error() const {
  return _internal_has_error();
}
inline void TopicData::set_has_error() {
  _oneof_case_[0] = kError;
}
inline ::ubii::general::Error* TopicData::release_error() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.error)
  if (has_error()) {
    clear_has_type();
      ::ubii::general::Error* temp = type_.error_;
    type_.error_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::general::Error& TopicData::_internal_error() const {
  return _internal_has_error()
      ? *type_.error_
      : *reinterpret_cast< ::ubii::general::Error*>(&::ubii::general::_Error_default_instance_);
}
inline const ::ubii::general::Error& TopicData::error() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.error)
  return _internal_error();
}
inline ::ubii::general::Error* TopicData::_internal_mutable_error() {
  if (!_internal_has_error()) {
    clear_type();
    set_has_error();
    type_.error_ = CreateMaybeMessage< ::ubii::general::Error >(
        GetArenaNoVirtual());
  }
  return type_.error_;
}
inline ::ubii::general::Error* TopicData::mutable_error() {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.error)
  return _internal_mutable_error();
}

inline bool TopicData::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TopicData::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline TopicData::TypeCase TopicData::type_case() const {
  return TopicData::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace topicData
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicData_2eproto
