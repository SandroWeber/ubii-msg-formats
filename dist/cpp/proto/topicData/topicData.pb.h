// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicData.proto

#ifndef PROTOBUF_proto_2ftopicData_2ftopicData_2eproto__INCLUDED
#define PROTOBUF_proto_2ftopicData_2ftopicData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/topicDataRecord.pb.h"
#include "proto/general/error.pb.h"
// @@protoc_insertion_point(includes)

namespace ubii {
namespace topicData {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2ftopicData_2ftopicData_2eproto();
void protobuf_AssignDesc_proto_2ftopicData_2ftopicData_2eproto();
void protobuf_ShutdownFile_proto_2ftopicData_2ftopicData_2eproto();

class TopicData;

// ===================================================================

class TopicData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicData) */ {
 public:
  TopicData();
  virtual ~TopicData();

  TopicData(const TopicData& from);

  inline TopicData& operator=(const TopicData& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicData& default_instance();

  enum TypeCase {
    kTopicDataRecord = 2,
    kTopicDataRecordList = 3,
    kError = 4,
    TYPE_NOT_SET = 0,
  };

  void Swap(TopicData* other);

  // implements Message ----------------------------------------------

  inline TopicData* New() const { return New(NULL); }

  TopicData* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TopicData& from);
  void MergeFrom(const TopicData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TopicData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .ubii.topicData.TopicDataRecord topic_data_record = 2;
  bool has_topic_data_record() const;
  void clear_topic_data_record();
  static const int kTopicDataRecordFieldNumber = 2;
  const ::ubii::topicData::TopicDataRecord& topic_data_record() const;
  ::ubii::topicData::TopicDataRecord* mutable_topic_data_record();
  ::ubii::topicData::TopicDataRecord* release_topic_data_record();
  void set_allocated_topic_data_record(::ubii::topicData::TopicDataRecord* topic_data_record);

  // optional .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
  bool has_topic_data_record_list() const;
  void clear_topic_data_record_list();
  static const int kTopicDataRecordListFieldNumber = 3;
  const ::ubii::topicData::TopicDataRecordList& topic_data_record_list() const;
  ::ubii::topicData::TopicDataRecordList* mutable_topic_data_record_list();
  ::ubii::topicData::TopicDataRecordList* release_topic_data_record_list();
  void set_allocated_topic_data_record_list(::ubii::topicData::TopicDataRecordList* topic_data_record_list);

  // optional .ubii.general.Error error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  const ::ubii::general::Error& error() const;
  ::ubii::general::Error* mutable_error();
  ::ubii::general::Error* release_error();
  void set_allocated_error(::ubii::general::Error* error);

  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicData)
 private:
  inline void set_has_topic_data_record();
  inline void set_has_topic_data_record_list();
  inline void set_has_error();

  inline bool has_type() const;
  void clear_type();
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  union TypeUnion {
    TypeUnion() {}
    ::ubii::topicData::TopicDataRecord* topic_data_record_;
    ::ubii::topicData::TopicDataRecordList* topic_data_record_list_;
    ::ubii::general::Error* error_;
  } type_;
  mutable int _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend void  protobuf_AddDesc_proto_2ftopicData_2ftopicData_2eproto();
  friend void protobuf_AssignDesc_proto_2ftopicData_2ftopicData_2eproto();
  friend void protobuf_ShutdownFile_proto_2ftopicData_2ftopicData_2eproto();

  void InitAsDefaultInstance();
  static TopicData* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TopicData

// optional .ubii.topicData.TopicDataRecord topic_data_record = 2;
inline bool TopicData::has_topic_data_record() const {
  return type_case() == kTopicDataRecord;
}
inline void TopicData::set_has_topic_data_record() {
  _oneof_case_[0] = kTopicDataRecord;
}
inline void TopicData::clear_topic_data_record() {
  if (has_topic_data_record()) {
    delete type_.topic_data_record_;
    clear_has_type();
  }
}
inline  const ::ubii::topicData::TopicDataRecord& TopicData::topic_data_record() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.topic_data_record)
  return has_topic_data_record()
      ? *type_.topic_data_record_
      : ::ubii::topicData::TopicDataRecord::default_instance();
}
inline ::ubii::topicData::TopicDataRecord* TopicData::mutable_topic_data_record() {
  if (!has_topic_data_record()) {
    clear_type();
    set_has_topic_data_record();
    type_.topic_data_record_ = new ::ubii::topicData::TopicDataRecord;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.topic_data_record)
  return type_.topic_data_record_;
}
inline ::ubii::topicData::TopicDataRecord* TopicData::release_topic_data_record() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.topic_data_record)
  if (has_topic_data_record()) {
    clear_has_type();
    ::ubii::topicData::TopicDataRecord* temp = type_.topic_data_record_;
    type_.topic_data_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TopicData::set_allocated_topic_data_record(::ubii::topicData::TopicDataRecord* topic_data_record) {
  clear_type();
  if (topic_data_record) {
    set_has_topic_data_record();
    type_.topic_data_record_ = topic_data_record;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.topic_data_record)
}

// optional .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
inline bool TopicData::has_topic_data_record_list() const {
  return type_case() == kTopicDataRecordList;
}
inline void TopicData::set_has_topic_data_record_list() {
  _oneof_case_[0] = kTopicDataRecordList;
}
inline void TopicData::clear_topic_data_record_list() {
  if (has_topic_data_record_list()) {
    delete type_.topic_data_record_list_;
    clear_has_type();
  }
}
inline  const ::ubii::topicData::TopicDataRecordList& TopicData::topic_data_record_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.topic_data_record_list)
  return has_topic_data_record_list()
      ? *type_.topic_data_record_list_
      : ::ubii::topicData::TopicDataRecordList::default_instance();
}
inline ::ubii::topicData::TopicDataRecordList* TopicData::mutable_topic_data_record_list() {
  if (!has_topic_data_record_list()) {
    clear_type();
    set_has_topic_data_record_list();
    type_.topic_data_record_list_ = new ::ubii::topicData::TopicDataRecordList;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.topic_data_record_list)
  return type_.topic_data_record_list_;
}
inline ::ubii::topicData::TopicDataRecordList* TopicData::release_topic_data_record_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.topic_data_record_list)
  if (has_topic_data_record_list()) {
    clear_has_type();
    ::ubii::topicData::TopicDataRecordList* temp = type_.topic_data_record_list_;
    type_.topic_data_record_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TopicData::set_allocated_topic_data_record_list(::ubii::topicData::TopicDataRecordList* topic_data_record_list) {
  clear_type();
  if (topic_data_record_list) {
    set_has_topic_data_record_list();
    type_.topic_data_record_list_ = topic_data_record_list;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.topic_data_record_list)
}

// optional .ubii.general.Error error = 4;
inline bool TopicData::has_error() const {
  return type_case() == kError;
}
inline void TopicData::set_has_error() {
  _oneof_case_[0] = kError;
}
inline void TopicData::clear_error() {
  if (has_error()) {
    delete type_.error_;
    clear_has_type();
  }
}
inline  const ::ubii::general::Error& TopicData::error() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.error)
  return has_error()
      ? *type_.error_
      : ::ubii::general::Error::default_instance();
}
inline ::ubii::general::Error* TopicData::mutable_error() {
  if (!has_error()) {
    clear_type();
    set_has_error();
    type_.error_ = new ::ubii::general::Error;
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.error)
  return type_.error_;
}
inline ::ubii::general::Error* TopicData::release_error() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.error)
  if (has_error()) {
    clear_has_type();
    ::ubii::general::Error* temp = type_.error_;
    type_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline void TopicData::set_allocated_error(::ubii::general::Error* error) {
  clear_type();
  if (error) {
    set_has_error();
    type_.error_ = error;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicData.error)
}

inline bool TopicData::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TopicData::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline TopicData::TypeCase TopicData::type_case() const {
  return TopicData::TypeCase(_oneof_case_[0]);
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace topicData
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2ftopicData_2ftopicData_2eproto__INCLUDED
