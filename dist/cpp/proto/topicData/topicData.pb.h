// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicData.proto

#ifndef PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicData_2eproto
#define PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicData_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/topicDataRecord.pb.h"
#include "proto/general/error.pb.h"
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_proto_2ftopicData_2ftopicData_2eproto 

namespace protobuf_proto_2ftopicData_2ftopicData_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_proto_2ftopicData_2ftopicData_2eproto
namespace ubii {
namespace topicData {
class TopicData;
class TopicDataDefaultTypeInternal;
extern TopicDataDefaultTypeInternal _TopicData_default_instance_;
}  // namespace topicData
}  // namespace ubii
namespace google {
namespace protobuf {
template<> ::ubii::topicData::TopicData* Arena::CreateMaybeMessage<::ubii::topicData::TopicData>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace ubii {
namespace topicData {

// ===================================================================

class TopicData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicData) */ {
 public:
  TopicData();
  virtual ~TopicData();

  TopicData(const TopicData& from);

  inline TopicData& operator=(const TopicData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  TopicData(TopicData&& from) noexcept
    : TopicData() {
    *this = ::std::move(from);
  }

  inline TopicData& operator=(TopicData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const TopicData& default_instance();

  enum TypeCase {
    kTopicDataRecord = 2,
    kTopicDataRecordList = 3,
    kError = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicData* internal_default_instance() {
    return reinterpret_cast<const TopicData*>(
               &_TopicData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(TopicData* other);
  friend void swap(TopicData& a, TopicData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline TopicData* New() const final {
    return CreateMaybeMessage<TopicData>(NULL);
  }

  TopicData* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<TopicData>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const TopicData& from);
  void MergeFrom(const TopicData& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ubii.topicData.TopicDataRecord topic_data_record = 2;
  bool has_topic_data_record() const;
  void clear_topic_data_record();
  static const int kTopicDataRecordFieldNumber = 2;
  private:
  const ::ubii::topicData::TopicDataRecord& _internal_topic_data_record() const;
  public:
  const ::ubii::topicData::TopicDataRecord& topic_data_record() const;
  ::ubii::topicData::TopicDataRecord* release_topic_data_record();
  ::ubii::topicData::TopicDataRecord* mutable_topic_data_record();
  void set_allocated_topic_data_record(::ubii::topicData::TopicDataRecord* topic_data_record);

  // .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
  bool has_topic_data_record_list() const;
  void clear_topic_data_record_list();
  static const int kTopicDataRecordListFieldNumber = 3;
  private:
  const ::ubii::topicData::TopicDataRecordList& _internal_topic_data_record_list() const;
  public:
  const ::ubii::topicData::TopicDataRecordList& topic_data_record_list() const;
  ::ubii::topicData::TopicDataRecordList* release_topic_data_record_list();
  ::ubii::topicData::TopicDataRecordList* mutable_topic_data_record_list();
  void set_allocated_topic_data_record_list(::ubii::topicData::TopicDataRecordList* topic_data_record_list);

  // .ubii.general.Error error = 4;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 4;
  private:
  const ::ubii::general::Error& _internal_error() const;
  public:
  const ::ubii::general::Error& error() const;
  ::ubii::general::Error* release_error();
  ::ubii::general::Error* mutable_error();
  void set_allocated_error(::ubii::general::Error* error);

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicData)
 private:
  void set_has_topic_data_record();
  void set_has_topic_data_record_list();
  void set_has_error();

  inline bool has_type() const;
  inline void clear_has_type();

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::ubii::topicData::TopicDataRecord* topic_data_record_;
    ::ubii::topicData::TopicDataRecordList* topic_data_record_list_;
    ::ubii::general::Error* error_;
  } type_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::uint32 _oneof_case_[1];

  friend struct ::protobuf_proto_2ftopicData_2ftopicData_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicData

// .ubii.topicData.TopicDataRecord topic_data_record = 2;
inline bool TopicData::has_topic_data_record() const {
  return type_case() == kTopicDataRecord;
}
inline void TopicData::set_has_topic_data_record() {
  _oneof_case_[0] = kTopicDataRecord;
}
inline const ::ubii::topicData::TopicDataRecord& TopicData::_internal_topic_data_record() const {
  return *type_.topic_data_record_;
}
inline ::ubii::topicData::TopicDataRecord* TopicData::release_topic_data_record() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.topic_data_record)
  if (has_topic_data_record()) {
    clear_has_type();
      ::ubii::topicData::TopicDataRecord* temp = type_.topic_data_record_;
    type_.topic_data_record_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::topicData::TopicDataRecord& TopicData::topic_data_record() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.topic_data_record)
  return has_topic_data_record()
      ? *type_.topic_data_record_
      : *reinterpret_cast< ::ubii::topicData::TopicDataRecord*>(&::ubii::topicData::_TopicDataRecord_default_instance_);
}
inline ::ubii::topicData::TopicDataRecord* TopicData::mutable_topic_data_record() {
  if (!has_topic_data_record()) {
    clear_type();
    set_has_topic_data_record();
    type_.topic_data_record_ = CreateMaybeMessage< ::ubii::topicData::TopicDataRecord >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.topic_data_record)
  return type_.topic_data_record_;
}

// .ubii.topicData.TopicDataRecordList topic_data_record_list = 3;
inline bool TopicData::has_topic_data_record_list() const {
  return type_case() == kTopicDataRecordList;
}
inline void TopicData::set_has_topic_data_record_list() {
  _oneof_case_[0] = kTopicDataRecordList;
}
inline const ::ubii::topicData::TopicDataRecordList& TopicData::_internal_topic_data_record_list() const {
  return *type_.topic_data_record_list_;
}
inline ::ubii::topicData::TopicDataRecordList* TopicData::release_topic_data_record_list() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.topic_data_record_list)
  if (has_topic_data_record_list()) {
    clear_has_type();
      ::ubii::topicData::TopicDataRecordList* temp = type_.topic_data_record_list_;
    type_.topic_data_record_list_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::topicData::TopicDataRecordList& TopicData::topic_data_record_list() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.topic_data_record_list)
  return has_topic_data_record_list()
      ? *type_.topic_data_record_list_
      : *reinterpret_cast< ::ubii::topicData::TopicDataRecordList*>(&::ubii::topicData::_TopicDataRecordList_default_instance_);
}
inline ::ubii::topicData::TopicDataRecordList* TopicData::mutable_topic_data_record_list() {
  if (!has_topic_data_record_list()) {
    clear_type();
    set_has_topic_data_record_list();
    type_.topic_data_record_list_ = CreateMaybeMessage< ::ubii::topicData::TopicDataRecordList >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.topic_data_record_list)
  return type_.topic_data_record_list_;
}

// .ubii.general.Error error = 4;
inline bool TopicData::has_error() const {
  return type_case() == kError;
}
inline void TopicData::set_has_error() {
  _oneof_case_[0] = kError;
}
inline const ::ubii::general::Error& TopicData::_internal_error() const {
  return *type_.error_;
}
inline ::ubii::general::Error* TopicData::release_error() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicData.error)
  if (has_error()) {
    clear_has_type();
      ::ubii::general::Error* temp = type_.error_;
    type_.error_ = NULL;
    return temp;
  } else {
    return NULL;
  }
}
inline const ::ubii::general::Error& TopicData::error() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicData.error)
  return has_error()
      ? *type_.error_
      : *reinterpret_cast< ::ubii::general::Error*>(&::ubii::general::_Error_default_instance_);
}
inline ::ubii::general::Error* TopicData::mutable_error() {
  if (!has_error()) {
    clear_type();
    set_has_error();
    type_.error_ = CreateMaybeMessage< ::ubii::general::Error >(
        GetArenaNoVirtual());
  }
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicData.error)
  return type_.error_;
}

inline bool TopicData::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TopicData::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline TopicData::TypeCase TopicData::type_case() const {
  return TopicData::TypeCase(_oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace topicData
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicData_2eproto
