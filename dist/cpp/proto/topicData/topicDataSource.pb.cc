// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataSource.proto

#include "proto/topicData/topicDataSource.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_proto_2fdevices_2fcomponent_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Component_proto_2fdevices_2fcomponent_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataRecord_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<36> scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataSource_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TopicDataSource_proto_2ftopicData_2ftopicDataSource_2eproto;
namespace ubii {
namespace topicData {
class TopicDataSourceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicDataSource> _instance;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
  const ::ubii::devices::Component* component_;
  const ::ubii::topicData::TopicDataRecord* static_record_;
} _TopicDataSource_default_instance_;
class TopicDataSourceListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TopicDataSourceList> _instance;
} _TopicDataSourceList_default_instance_;
}  // namespace topicData
}  // namespace ubii
static void InitDefaultsscc_info_TopicDataSource_proto_2ftopicData_2ftopicDataSource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::topicData::_TopicDataSource_default_instance_;
    new (ptr) ::ubii::topicData::TopicDataSource();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::topicData::TopicDataSource::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_TopicDataSource_proto_2ftopicData_2ftopicDataSource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_TopicDataSource_proto_2ftopicData_2ftopicDataSource_2eproto}, {
      &scc_info_Component_proto_2fdevices_2fcomponent_2eproto.base,
      &scc_info_TopicDataRecord_proto_2ftopicData_2ftopicDataRecord_2eproto.base,}};

static void InitDefaultsscc_info_TopicDataSourceList_proto_2ftopicData_2ftopicDataSource_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::ubii::topicData::_TopicDataSourceList_default_instance_;
    new (ptr) ::ubii::topicData::TopicDataSourceList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ubii::topicData::TopicDataSourceList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TopicDataSourceList_proto_2ftopicData_2ftopicDataSource_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TopicDataSourceList_proto_2ftopicData_2ftopicDataSource_2eproto}, {
      &scc_info_TopicDataSource_proto_2ftopicData_2ftopicDataSource_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_proto_2ftopicData_2ftopicDataSource_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_proto_2ftopicData_2ftopicDataSource_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_proto_2ftopicData_2ftopicDataSource_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_proto_2ftopicData_2ftopicDataSource_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataSource, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataSource, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  offsetof(::ubii::topicData::TopicDataSourceDefaultTypeInternal, topic_),
  offsetof(::ubii::topicData::TopicDataSourceDefaultTypeInternal, regex_),
  offsetof(::ubii::topicData::TopicDataSourceDefaultTypeInternal, component_),
  offsetof(::ubii::topicData::TopicDataSourceDefaultTypeInternal, static_record_),
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataSource, type_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataSourceList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ubii::topicData::TopicDataSourceList, elements_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::ubii::topicData::TopicDataSource)},
  { 10, -1, sizeof(::ubii::topicData::TopicDataSourceList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::topicData::_TopicDataSource_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::ubii::topicData::_TopicDataSourceList_default_instance_),
};

const char descriptor_table_protodef_proto_2ftopicData_2ftopicDataSource_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n%proto/topicData/topicDataSource.proto\022"
  "\016ubii.topicData\032\035proto/devices/component"
  ".proto\032%proto/topicData/topicDataRecord."
  "proto\"\243\001\n\017TopicDataSource\022\017\n\005topic\030\001 \001(\t"
  "H\000\022\017\n\005regex\030\002 \001(\tH\000\022,\n\tcomponent\030\003 \001(\0132\027"
  ".ubii.devices.ComponentH\000\0228\n\rstatic_reco"
  "rd\030\004 \001(\0132\037.ubii.topicData.TopicDataRecor"
  "dH\000B\006\n\004type\"H\n\023TopicDataSourceList\0221\n\010el"
  "ements\030\001 \003(\0132\037.ubii.topicData.TopicDataS"
  "ourceb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto_deps[2] = {
  &::descriptor_table_proto_2fdevices_2fcomponent_2eproto,
  &::descriptor_table_proto_2ftopicData_2ftopicDataRecord_2eproto,
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto_sccs[2] = {
  &scc_info_TopicDataSource_proto_2ftopicData_2ftopicDataSource_2eproto.base,
  &scc_info_TopicDataSourceList_proto_2ftopicData_2ftopicDataSource_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto_once;
static bool descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto = {
  &descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto_initialized, descriptor_table_protodef_proto_2ftopicData_2ftopicDataSource_2eproto, "proto/topicData/topicDataSource.proto", 373,
  &descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto_once, descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto_sccs, descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto_deps, 2, 2,
  schemas, file_default_instances, TableStruct_proto_2ftopicData_2ftopicDataSource_2eproto::offsets,
  file_level_metadata_proto_2ftopicData_2ftopicDataSource_2eproto, 2, file_level_enum_descriptors_proto_2ftopicData_2ftopicDataSource_2eproto, file_level_service_descriptors_proto_2ftopicData_2ftopicDataSource_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_proto_2ftopicData_2ftopicDataSource_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto), true);
namespace ubii {
namespace topicData {

// ===================================================================

void TopicDataSource::InitAsDefaultInstance() {
  ::ubii::topicData::_TopicDataSource_default_instance_.topic_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::ubii::topicData::_TopicDataSource_default_instance_.regex_.UnsafeSetDefault(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::ubii::topicData::_TopicDataSource_default_instance_.component_ = const_cast< ::ubii::devices::Component*>(
      ::ubii::devices::Component::internal_default_instance());
  ::ubii::topicData::_TopicDataSource_default_instance_.static_record_ = const_cast< ::ubii::topicData::TopicDataRecord*>(
      ::ubii::topicData::TopicDataRecord::internal_default_instance());
}
class TopicDataSource::_Internal {
 public:
  static const ::ubii::devices::Component& component(const TopicDataSource* msg);
  static const ::ubii::topicData::TopicDataRecord& static_record(const TopicDataSource* msg);
};

const ::ubii::devices::Component&
TopicDataSource::_Internal::component(const TopicDataSource* msg) {
  return *msg->type_.component_;
}
const ::ubii::topicData::TopicDataRecord&
TopicDataSource::_Internal::static_record(const TopicDataSource* msg) {
  return *msg->type_.static_record_;
}
void TopicDataSource::set_allocated_component(::ubii::devices::Component* component) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (component) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      component = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, component, submessage_arena);
    }
    set_has_component();
    type_.component_ = component;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataSource.component)
}
void TopicDataSource::clear_component() {
  if (_internal_has_component()) {
    delete type_.component_;
    clear_has_type();
  }
}
void TopicDataSource::set_allocated_static_record(::ubii::topicData::TopicDataRecord* static_record) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  clear_type();
  if (static_record) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      static_record = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, static_record, submessage_arena);
    }
    set_has_static_record();
    type_.static_record_ = static_record;
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataSource.static_record)
}
void TopicDataSource::clear_static_record() {
  if (_internal_has_static_record()) {
    delete type_.static_record_;
    clear_has_type();
  }
}
TopicDataSource::TopicDataSource()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.topicData.TopicDataSource)
}
TopicDataSource::TopicDataSource(const TopicDataSource& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  clear_has_type();
  switch (from.type_case()) {
    case kTopic: {
      _internal_set_topic(from._internal_topic());
      break;
    }
    case kRegex: {
      _internal_set_regex(from._internal_regex());
      break;
    }
    case kComponent: {
      _internal_mutable_component()->::ubii::devices::Component::MergeFrom(from._internal_component());
      break;
    }
    case kStaticRecord: {
      _internal_mutable_static_record()->::ubii::topicData::TopicDataRecord::MergeFrom(from._internal_static_record());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:ubii.topicData.TopicDataSource)
}

void TopicDataSource::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicDataSource_proto_2ftopicData_2ftopicDataSource_2eproto.base);
  clear_has_type();
}

TopicDataSource::~TopicDataSource() {
  // @@protoc_insertion_point(destructor:ubii.topicData.TopicDataSource)
  SharedDtor();
}

void TopicDataSource::SharedDtor() {
  if (has_type()) {
    clear_type();
  }
}

void TopicDataSource::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicDataSource& TopicDataSource::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicDataSource_proto_2ftopicData_2ftopicDataSource_2eproto.base);
  return *internal_default_instance();
}


void TopicDataSource::clear_type() {
// @@protoc_insertion_point(one_of_clear_start:ubii.topicData.TopicDataSource)
  switch (type_case()) {
    case kTopic: {
      type_.topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kRegex: {
      type_.regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
      break;
    }
    case kComponent: {
      delete type_.component_;
      break;
    }
    case kStaticRecord: {
      delete type_.static_record_;
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = TYPE_NOT_SET;
}


void TopicDataSource::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.topicData.TopicDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  clear_type();
  _internal_metadata_.Clear();
}

const char* TopicDataSource::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string topic = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_topic();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.topicData.TopicDataSource.topic"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string regex = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_regex();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ubii.topicData.TopicDataSource.regex"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.devices.Component component = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_component(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .ubii.topicData.TopicDataRecord static_record = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_static_record(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicDataSource::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.topicData.TopicDataSource)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string topic = 1;
  if (_internal_has_topic()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_topic().data(), static_cast<int>(this->_internal_topic().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.topicData.TopicDataSource.topic");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_topic(), target);
  }

  // string regex = 2;
  if (_internal_has_regex()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_regex().data(), static_cast<int>(this->_internal_regex().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ubii.topicData.TopicDataSource.regex");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_regex(), target);
  }

  // .ubii.devices.Component component = 3;
  if (_internal_has_component()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::component(this), target, stream);
  }

  // .ubii.topicData.TopicDataRecord static_record = 4;
  if (_internal_has_static_record()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::static_record(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.topicData.TopicDataSource)
  return target;
}

size_t TopicDataSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.topicData.TopicDataSource)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  switch (type_case()) {
    // string topic = 1;
    case kTopic: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_topic());
      break;
    }
    // string regex = 2;
    case kRegex: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_regex());
      break;
    }
    // .ubii.devices.Component component = 3;
    case kComponent: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.component_);
      break;
    }
    // .ubii.topicData.TopicDataRecord static_record = 4;
    case kStaticRecord: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *type_.static_record_);
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicDataSource::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.topicData.TopicDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicDataSource* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicDataSource>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.topicData.TopicDataSource)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.topicData.TopicDataSource)
    MergeFrom(*source);
  }
}

void TopicDataSource::MergeFrom(const TopicDataSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.topicData.TopicDataSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  switch (from.type_case()) {
    case kTopic: {
      _internal_set_topic(from._internal_topic());
      break;
    }
    case kRegex: {
      _internal_set_regex(from._internal_regex());
      break;
    }
    case kComponent: {
      _internal_mutable_component()->::ubii::devices::Component::MergeFrom(from._internal_component());
      break;
    }
    case kStaticRecord: {
      _internal_mutable_static_record()->::ubii::topicData::TopicDataRecord::MergeFrom(from._internal_static_record());
      break;
    }
    case TYPE_NOT_SET: {
      break;
    }
  }
}

void TopicDataSource::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.topicData.TopicDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicDataSource::CopyFrom(const TopicDataSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.topicData.TopicDataSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicDataSource::IsInitialized() const {
  return true;
}

void TopicDataSource::InternalSwap(TopicDataSource* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicDataSource::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TopicDataSourceList::InitAsDefaultInstance() {
}
class TopicDataSourceList::_Internal {
 public:
};

TopicDataSourceList::TopicDataSourceList()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ubii.topicData.TopicDataSourceList)
}
TopicDataSourceList::TopicDataSourceList(const TopicDataSourceList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      elements_(from.elements_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ubii.topicData.TopicDataSourceList)
}

void TopicDataSourceList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TopicDataSourceList_proto_2ftopicData_2ftopicDataSource_2eproto.base);
}

TopicDataSourceList::~TopicDataSourceList() {
  // @@protoc_insertion_point(destructor:ubii.topicData.TopicDataSourceList)
  SharedDtor();
}

void TopicDataSourceList::SharedDtor() {
}

void TopicDataSourceList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TopicDataSourceList& TopicDataSourceList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TopicDataSourceList_proto_2ftopicData_2ftopicDataSource_2eproto.base);
  return *internal_default_instance();
}


void TopicDataSourceList::Clear() {
// @@protoc_insertion_point(message_clear_start:ubii.topicData.TopicDataSourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  elements_.Clear();
  _internal_metadata_.Clear();
}

const char* TopicDataSourceList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .ubii.topicData.TopicDataSource elements = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_elements(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TopicDataSourceList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ubii.topicData.TopicDataSourceList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .ubii.topicData.TopicDataSource elements = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_elements_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_elements(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ubii.topicData.TopicDataSourceList)
  return target;
}

size_t TopicDataSourceList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ubii.topicData.TopicDataSourceList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .ubii.topicData.TopicDataSource elements = 1;
  total_size += 1UL * this->_internal_elements_size();
  for (const auto& msg : this->elements_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TopicDataSourceList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ubii.topicData.TopicDataSourceList)
  GOOGLE_DCHECK_NE(&from, this);
  const TopicDataSourceList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TopicDataSourceList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ubii.topicData.TopicDataSourceList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ubii.topicData.TopicDataSourceList)
    MergeFrom(*source);
  }
}

void TopicDataSourceList::MergeFrom(const TopicDataSourceList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ubii.topicData.TopicDataSourceList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  elements_.MergeFrom(from.elements_);
}

void TopicDataSourceList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ubii.topicData.TopicDataSourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TopicDataSourceList::CopyFrom(const TopicDataSourceList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ubii.topicData.TopicDataSourceList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TopicDataSourceList::IsInitialized() const {
  return true;
}

void TopicDataSourceList::InternalSwap(TopicDataSourceList* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  elements_.InternalSwap(&other->elements_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TopicDataSourceList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace topicData
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::ubii::topicData::TopicDataSource* Arena::CreateMaybeMessage< ::ubii::topicData::TopicDataSource >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::topicData::TopicDataSource >(arena);
}
template<> PROTOBUF_NOINLINE ::ubii::topicData::TopicDataSourceList* Arena::CreateMaybeMessage< ::ubii::topicData::TopicDataSourceList >(Arena* arena) {
  return Arena::CreateInternal< ::ubii::topicData::TopicDataSourceList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
