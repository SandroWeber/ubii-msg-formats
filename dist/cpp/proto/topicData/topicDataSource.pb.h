// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/topicData/topicDataSource.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataSource_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataSource_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/devices/component.pb.h"
#include "proto/topicData/topicDataRecord.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2ftopicData_2ftopicDataSource_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2ftopicData_2ftopicDataSource_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto;
namespace ubii {
namespace topicData {
class TopicDataSource;
class TopicDataSourceDefaultTypeInternal;
extern TopicDataSourceDefaultTypeInternal _TopicDataSource_default_instance_;
class TopicDataSourceList;
class TopicDataSourceListDefaultTypeInternal;
extern TopicDataSourceListDefaultTypeInternal _TopicDataSourceList_default_instance_;
}  // namespace topicData
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::topicData::TopicDataSource* Arena::CreateMaybeMessage<::ubii::topicData::TopicDataSource>(Arena*);
template<> ::ubii::topicData::TopicDataSourceList* Arena::CreateMaybeMessage<::ubii::topicData::TopicDataSourceList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace topicData {

// ===================================================================

class TopicDataSource :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicDataSource) */ {
 public:
  TopicDataSource();
  virtual ~TopicDataSource();

  TopicDataSource(const TopicDataSource& from);
  TopicDataSource(TopicDataSource&& from) noexcept
    : TopicDataSource() {
    *this = ::std::move(from);
  }

  inline TopicDataSource& operator=(const TopicDataSource& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicDataSource& operator=(TopicDataSource&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicDataSource& default_instance();

  enum TypeCase {
    kTopic = 1,
    kRegex = 2,
    kComponent = 3,
    kStaticRecord = 4,
    TYPE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicDataSource* internal_default_instance() {
    return reinterpret_cast<const TopicDataSource*>(
               &_TopicDataSource_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TopicDataSource& a, TopicDataSource& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicDataSource* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicDataSource* New() const final {
    return CreateMaybeMessage<TopicDataSource>(nullptr);
  }

  TopicDataSource* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicDataSource>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicDataSource& from);
  void MergeFrom(const TopicDataSource& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicDataSource* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.topicData.TopicDataSource";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto);
    return ::descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTopicFieldNumber = 1,
    kRegexFieldNumber = 2,
    kComponentFieldNumber = 3,
    kStaticRecordFieldNumber = 4,
  };
  // string topic = 1;
  private:
  bool _internal_has_topic() const;
  public:
  void clear_topic();
  const std::string& topic() const;
  void set_topic(const std::string& value);
  void set_topic(std::string&& value);
  void set_topic(const char* value);
  void set_topic(const char* value, size_t size);
  std::string* mutable_topic();
  std::string* release_topic();
  void set_allocated_topic(std::string* topic);
  private:
  const std::string& _internal_topic() const;
  void _internal_set_topic(const std::string& value);
  std::string* _internal_mutable_topic();
  public:

  // string regex = 2;
  private:
  bool _internal_has_regex() const;
  public:
  void clear_regex();
  const std::string& regex() const;
  void set_regex(const std::string& value);
  void set_regex(std::string&& value);
  void set_regex(const char* value);
  void set_regex(const char* value, size_t size);
  std::string* mutable_regex();
  std::string* release_regex();
  void set_allocated_regex(std::string* regex);
  private:
  const std::string& _internal_regex() const;
  void _internal_set_regex(const std::string& value);
  std::string* _internal_mutable_regex();
  public:

  // .ubii.devices.Component component = 3;
  bool has_component() const;
  private:
  bool _internal_has_component() const;
  public:
  void clear_component();
  const ::ubii::devices::Component& component() const;
  ::ubii::devices::Component* release_component();
  ::ubii::devices::Component* mutable_component();
  void set_allocated_component(::ubii::devices::Component* component);
  private:
  const ::ubii::devices::Component& _internal_component() const;
  ::ubii::devices::Component* _internal_mutable_component();
  public:

  // .ubii.topicData.TopicDataRecord static_record = 4;
  bool has_static_record() const;
  private:
  bool _internal_has_static_record() const;
  public:
  void clear_static_record();
  const ::ubii::topicData::TopicDataRecord& static_record() const;
  ::ubii::topicData::TopicDataRecord* release_static_record();
  ::ubii::topicData::TopicDataRecord* mutable_static_record();
  void set_allocated_static_record(::ubii::topicData::TopicDataRecord* static_record);
  private:
  const ::ubii::topicData::TopicDataRecord& _internal_static_record() const;
  ::ubii::topicData::TopicDataRecord* _internal_mutable_static_record();
  public:

  void clear_type();
  TypeCase type_case() const;
  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicDataSource)
 private:
  class _Internal;
  void set_has_topic();
  void set_has_regex();
  void set_has_component();
  void set_has_static_record();

  inline bool has_type() const;
  inline void clear_has_type();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union TypeUnion {
    TypeUnion() {}
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr topic_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr regex_;
    ::ubii::devices::Component* component_;
    ::ubii::topicData::TopicDataRecord* static_record_;
  } type_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2ftopicData_2ftopicDataSource_2eproto;
};
// -------------------------------------------------------------------

class TopicDataSourceList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.topicData.TopicDataSourceList) */ {
 public:
  TopicDataSourceList();
  virtual ~TopicDataSourceList();

  TopicDataSourceList(const TopicDataSourceList& from);
  TopicDataSourceList(TopicDataSourceList&& from) noexcept
    : TopicDataSourceList() {
    *this = ::std::move(from);
  }

  inline TopicDataSourceList& operator=(const TopicDataSourceList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TopicDataSourceList& operator=(TopicDataSourceList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TopicDataSourceList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TopicDataSourceList* internal_default_instance() {
    return reinterpret_cast<const TopicDataSourceList*>(
               &_TopicDataSourceList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TopicDataSourceList& a, TopicDataSourceList& b) {
    a.Swap(&b);
  }
  inline void Swap(TopicDataSourceList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TopicDataSourceList* New() const final {
    return CreateMaybeMessage<TopicDataSourceList>(nullptr);
  }

  TopicDataSourceList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TopicDataSourceList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TopicDataSourceList& from);
  void MergeFrom(const TopicDataSourceList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TopicDataSourceList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.topicData.TopicDataSourceList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto);
    return ::descriptor_table_proto_2ftopicData_2ftopicDataSource_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .ubii.topicData.TopicDataSource elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ubii::topicData::TopicDataSource* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataSource >*
      mutable_elements();
  private:
  const ::ubii::topicData::TopicDataSource& _internal_elements(int index) const;
  ::ubii::topicData::TopicDataSource* _internal_add_elements();
  public:
  const ::ubii::topicData::TopicDataSource& elements(int index) const;
  ::ubii::topicData::TopicDataSource* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataSource >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.topicData.TopicDataSourceList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataSource > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2ftopicData_2ftopicDataSource_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TopicDataSource

// string topic = 1;
inline bool TopicDataSource::_internal_has_topic() const {
  return type_case() == kTopic;
}
inline void TopicDataSource::set_has_topic() {
  _oneof_case_[0] = kTopic;
}
inline void TopicDataSource::clear_topic() {
  if (_internal_has_topic()) {
    type_.topic_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const std::string& TopicDataSource::topic() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataSource.topic)
  return _internal_topic();
}
inline void TopicDataSource::set_topic(const std::string& value) {
  _internal_set_topic(value);
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataSource.topic)
}
inline std::string* TopicDataSource::mutable_topic() {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataSource.topic)
  return _internal_mutable_topic();
}
inline const std::string& TopicDataSource::_internal_topic() const {
  if (_internal_has_topic()) {
    return type_.topic_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TopicDataSource::_internal_set_topic(const std::string& value) {
  if (!_internal_has_topic()) {
    clear_type();
    set_has_topic();
    type_.topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TopicDataSource::set_topic(std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataSource.topic)
  if (!_internal_has_topic()) {
    clear_type();
    set_has_topic();
    type_.topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.topicData.TopicDataSource.topic)
}
inline void TopicDataSource::set_topic(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_topic()) {
    clear_type();
    set_has_topic();
    type_.topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.topicData.TopicDataSource.topic)
}
inline void TopicDataSource::set_topic(const char* value, size_t size) {
  if (!_internal_has_topic()) {
    clear_type();
    set_has_topic();
    type_.topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.topic_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.topicData.TopicDataSource.topic)
}
inline std::string* TopicDataSource::_internal_mutable_topic() {
  if (!_internal_has_topic()) {
    clear_type();
    set_has_topic();
    type_.topic_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.topic_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TopicDataSource::release_topic() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataSource.topic)
  if (_internal_has_topic()) {
    clear_has_type();
    return type_.topic_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TopicDataSource::set_allocated_topic(std::string* topic) {
  if (has_type()) {
    clear_type();
  }
  if (topic != nullptr) {
    set_has_topic();
    type_.topic_.UnsafeSetDefault(topic);
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataSource.topic)
}

// string regex = 2;
inline bool TopicDataSource::_internal_has_regex() const {
  return type_case() == kRegex;
}
inline void TopicDataSource::set_has_regex() {
  _oneof_case_[0] = kRegex;
}
inline void TopicDataSource::clear_regex() {
  if (_internal_has_regex()) {
    type_.regex_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
    clear_has_type();
  }
}
inline const std::string& TopicDataSource::regex() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataSource.regex)
  return _internal_regex();
}
inline void TopicDataSource::set_regex(const std::string& value) {
  _internal_set_regex(value);
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataSource.regex)
}
inline std::string* TopicDataSource::mutable_regex() {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataSource.regex)
  return _internal_mutable_regex();
}
inline const std::string& TopicDataSource::_internal_regex() const {
  if (_internal_has_regex()) {
    return type_.regex_.GetNoArena();
  }
  return *&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void TopicDataSource::_internal_set_regex(const std::string& value) {
  if (!_internal_has_regex()) {
    clear_type();
    set_has_regex();
    type_.regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void TopicDataSource::set_regex(std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.topicData.TopicDataSource.regex)
  if (!_internal_has_regex()) {
    clear_type();
    set_has_regex();
    type_.regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.topicData.TopicDataSource.regex)
}
inline void TopicDataSource::set_regex(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  if (!_internal_has_regex()) {
    clear_type();
    set_has_regex();
    type_.regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.topicData.TopicDataSource.regex)
}
inline void TopicDataSource::set_regex(const char* value, size_t size) {
  if (!_internal_has_regex()) {
    clear_type();
    set_has_regex();
    type_.regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  type_.regex_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.topicData.TopicDataSource.regex)
}
inline std::string* TopicDataSource::_internal_mutable_regex() {
  if (!_internal_has_regex()) {
    clear_type();
    set_has_regex();
    type_.regex_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  }
  return type_.regex_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* TopicDataSource::release_regex() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataSource.regex)
  if (_internal_has_regex()) {
    clear_has_type();
    return type_.regex_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  } else {
    return nullptr;
  }
}
inline void TopicDataSource::set_allocated_regex(std::string* regex) {
  if (has_type()) {
    clear_type();
  }
  if (regex != nullptr) {
    set_has_regex();
    type_.regex_.UnsafeSetDefault(regex);
  }
  // @@protoc_insertion_point(field_set_allocated:ubii.topicData.TopicDataSource.regex)
}

// .ubii.devices.Component component = 3;
inline bool TopicDataSource::_internal_has_component() const {
  return type_case() == kComponent;
}
inline bool TopicDataSource::has_component() const {
  return _internal_has_component();
}
inline void TopicDataSource::set_has_component() {
  _oneof_case_[0] = kComponent;
}
inline ::ubii::devices::Component* TopicDataSource::release_component() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataSource.component)
  if (_internal_has_component()) {
    clear_has_type();
      ::ubii::devices::Component* temp = type_.component_;
    type_.component_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::devices::Component& TopicDataSource::_internal_component() const {
  return _internal_has_component()
      ? *type_.component_
      : *reinterpret_cast< ::ubii::devices::Component*>(&::ubii::devices::_Component_default_instance_);
}
inline const ::ubii::devices::Component& TopicDataSource::component() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataSource.component)
  return _internal_component();
}
inline ::ubii::devices::Component* TopicDataSource::_internal_mutable_component() {
  if (!_internal_has_component()) {
    clear_type();
    set_has_component();
    type_.component_ = CreateMaybeMessage< ::ubii::devices::Component >(
        GetArenaNoVirtual());
  }
  return type_.component_;
}
inline ::ubii::devices::Component* TopicDataSource::mutable_component() {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataSource.component)
  return _internal_mutable_component();
}

// .ubii.topicData.TopicDataRecord static_record = 4;
inline bool TopicDataSource::_internal_has_static_record() const {
  return type_case() == kStaticRecord;
}
inline bool TopicDataSource::has_static_record() const {
  return _internal_has_static_record();
}
inline void TopicDataSource::set_has_static_record() {
  _oneof_case_[0] = kStaticRecord;
}
inline ::ubii::topicData::TopicDataRecord* TopicDataSource::release_static_record() {
  // @@protoc_insertion_point(field_release:ubii.topicData.TopicDataSource.static_record)
  if (_internal_has_static_record()) {
    clear_has_type();
      ::ubii::topicData::TopicDataRecord* temp = type_.static_record_;
    type_.static_record_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::topicData::TopicDataRecord& TopicDataSource::_internal_static_record() const {
  return _internal_has_static_record()
      ? *type_.static_record_
      : *reinterpret_cast< ::ubii::topicData::TopicDataRecord*>(&::ubii::topicData::_TopicDataRecord_default_instance_);
}
inline const ::ubii::topicData::TopicDataRecord& TopicDataSource::static_record() const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataSource.static_record)
  return _internal_static_record();
}
inline ::ubii::topicData::TopicDataRecord* TopicDataSource::_internal_mutable_static_record() {
  if (!_internal_has_static_record()) {
    clear_type();
    set_has_static_record();
    type_.static_record_ = CreateMaybeMessage< ::ubii::topicData::TopicDataRecord >(
        GetArenaNoVirtual());
  }
  return type_.static_record_;
}
inline ::ubii::topicData::TopicDataRecord* TopicDataSource::mutable_static_record() {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataSource.static_record)
  return _internal_mutable_static_record();
}

inline bool TopicDataSource::has_type() const {
  return type_case() != TYPE_NOT_SET;
}
inline void TopicDataSource::clear_has_type() {
  _oneof_case_[0] = TYPE_NOT_SET;
}
inline TopicDataSource::TypeCase TopicDataSource::type_case() const {
  return TopicDataSource::TypeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// TopicDataSourceList

// repeated .ubii.topicData.TopicDataSource elements = 1;
inline int TopicDataSourceList::_internal_elements_size() const {
  return elements_.size();
}
inline int TopicDataSourceList::elements_size() const {
  return _internal_elements_size();
}
inline void TopicDataSourceList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::topicData::TopicDataSource* TopicDataSourceList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.topicData.TopicDataSourceList.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataSource >*
TopicDataSourceList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.topicData.TopicDataSourceList.elements)
  return &elements_;
}
inline const ::ubii::topicData::TopicDataSource& TopicDataSourceList::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::ubii::topicData::TopicDataSource& TopicDataSourceList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.topicData.TopicDataSourceList.elements)
  return _internal_elements(index);
}
inline ::ubii::topicData::TopicDataSource* TopicDataSourceList::_internal_add_elements() {
  return elements_.Add();
}
inline ::ubii::topicData::TopicDataSource* TopicDataSourceList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.topicData.TopicDataSourceList.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataSource >&
TopicDataSourceList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.topicData.TopicDataSourceList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace topicData
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2ftopicData_2ftopicDataSource_2eproto
