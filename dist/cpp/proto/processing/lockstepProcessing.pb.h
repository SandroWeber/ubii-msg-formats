// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/processing/lockstepProcessing.proto

#ifndef PROTOBUF_proto_2fprocessing_2flockstepProcessing_2eproto__INCLUDED
#define PROTOBUF_proto_2fprocessing_2flockstepProcessing_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord/topicDataRecord.pb.h"
// @@protoc_insertion_point(includes)

namespace ubii {
namespace processing {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_proto_2fprocessing_2flockstepProcessing_2eproto();
void protobuf_AssignDesc_proto_2fprocessing_2flockstepProcessing_2eproto();
void protobuf_ShutdownFile_proto_2fprocessing_2flockstepProcessing_2eproto();

class LockstepProcessingReply;
class LockstepProcessingRequest;

// ===================================================================

class LockstepProcessingRequest : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.processing.LockstepProcessingRequest) */ {
 public:
  LockstepProcessingRequest();
  virtual ~LockstepProcessingRequest();

  LockstepProcessingRequest(const LockstepProcessingRequest& from);

  inline LockstepProcessingRequest& operator=(const LockstepProcessingRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockstepProcessingRequest& default_instance();

  void Swap(LockstepProcessingRequest* other);

  // implements Message ----------------------------------------------

  inline LockstepProcessingRequest* New() const { return New(NULL); }

  LockstepProcessingRequest* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockstepProcessingRequest& from);
  void MergeFrom(const LockstepProcessingRequest& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LockstepProcessingRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string processing_module_ids = 1;
  int processing_module_ids_size() const;
  void clear_processing_module_ids();
  static const int kProcessingModuleIdsFieldNumber = 1;
  const ::std::string& processing_module_ids(int index) const;
  ::std::string* mutable_processing_module_ids(int index);
  void set_processing_module_ids(int index, const ::std::string& value);
  void set_processing_module_ids(int index, const char* value);
  void set_processing_module_ids(int index, const char* value, size_t size);
  ::std::string* add_processing_module_ids();
  void add_processing_module_ids(const ::std::string& value);
  void add_processing_module_ids(const char* value);
  void add_processing_module_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& processing_module_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_processing_module_ids();

  // repeated .ubii.topicData.TopicDataRecord records = 2;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 2;
  const ::ubii::topicData::TopicDataRecord& records(int index) const;
  ::ubii::topicData::TopicDataRecord* mutable_records(int index);
  ::ubii::topicData::TopicDataRecord* add_records();
  ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
      records() const;

  // optional int32 delta_time_ms = 3;
  void clear_delta_time_ms();
  static const int kDeltaTimeMsFieldNumber = 3;
  ::google::protobuf::int32 delta_time_ms() const;
  void set_delta_time_ms(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ubii.processing.LockstepProcessingRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> processing_module_ids_;
  ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord > records_;
  ::google::protobuf::int32 delta_time_ms_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fprocessing_2flockstepProcessing_2eproto();
  friend void protobuf_AssignDesc_proto_2fprocessing_2flockstepProcessing_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprocessing_2flockstepProcessing_2eproto();

  void InitAsDefaultInstance();
  static LockstepProcessingRequest* default_instance_;
};
// -------------------------------------------------------------------

class LockstepProcessingReply : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ubii.processing.LockstepProcessingReply) */ {
 public:
  LockstepProcessingReply();
  virtual ~LockstepProcessingReply();

  LockstepProcessingReply(const LockstepProcessingReply& from);

  inline LockstepProcessingReply& operator=(const LockstepProcessingReply& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LockstepProcessingReply& default_instance();

  void Swap(LockstepProcessingReply* other);

  // implements Message ----------------------------------------------

  inline LockstepProcessingReply* New() const { return New(NULL); }

  LockstepProcessingReply* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LockstepProcessingReply& from);
  void MergeFrom(const LockstepProcessingReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LockstepProcessingReply* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string processing_module_ids = 1;
  int processing_module_ids_size() const;
  void clear_processing_module_ids();
  static const int kProcessingModuleIdsFieldNumber = 1;
  const ::std::string& processing_module_ids(int index) const;
  ::std::string* mutable_processing_module_ids(int index);
  void set_processing_module_ids(int index, const ::std::string& value);
  void set_processing_module_ids(int index, const char* value);
  void set_processing_module_ids(int index, const char* value, size_t size);
  ::std::string* add_processing_module_ids();
  void add_processing_module_ids(const ::std::string& value);
  void add_processing_module_ids(const char* value);
  void add_processing_module_ids(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& processing_module_ids() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_processing_module_ids();

  // repeated .ubii.topicData.TopicDataRecord records = 2;
  int records_size() const;
  void clear_records();
  static const int kRecordsFieldNumber = 2;
  const ::ubii::topicData::TopicDataRecord& records(int index) const;
  ::ubii::topicData::TopicDataRecord* mutable_records(int index);
  ::ubii::topicData::TopicDataRecord* add_records();
  ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
      mutable_records();
  const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:ubii.processing.LockstepProcessingReply)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::RepeatedPtrField< ::std::string> processing_module_ids_;
  ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord > records_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_proto_2fprocessing_2flockstepProcessing_2eproto();
  friend void protobuf_AssignDesc_proto_2fprocessing_2flockstepProcessing_2eproto();
  friend void protobuf_ShutdownFile_proto_2fprocessing_2flockstepProcessing_2eproto();

  void InitAsDefaultInstance();
  static LockstepProcessingReply* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// LockstepProcessingRequest

// repeated string processing_module_ids = 1;
inline int LockstepProcessingRequest::processing_module_ids_size() const {
  return processing_module_ids_.size();
}
inline void LockstepProcessingRequest::clear_processing_module_ids() {
  processing_module_ids_.Clear();
}
inline const ::std::string& LockstepProcessingRequest::processing_module_ids(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return processing_module_ids_.Get(index);
}
inline ::std::string* LockstepProcessingRequest::mutable_processing_module_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return processing_module_ids_.Mutable(index);
}
inline void LockstepProcessingRequest::set_processing_module_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  processing_module_ids_.Mutable(index)->assign(value);
}
inline void LockstepProcessingRequest::set_processing_module_ids(int index, const char* value) {
  processing_module_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline void LockstepProcessingRequest::set_processing_module_ids(int index, const char* value, size_t size) {
  processing_module_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline ::std::string* LockstepProcessingRequest::add_processing_module_ids() {
  // @@protoc_insertion_point(field_add_mutable:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return processing_module_ids_.Add();
}
inline void LockstepProcessingRequest::add_processing_module_ids(const ::std::string& value) {
  processing_module_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline void LockstepProcessingRequest::add_processing_module_ids(const char* value) {
  processing_module_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline void LockstepProcessingRequest::add_processing_module_ids(const char* value, size_t size) {
  processing_module_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockstepProcessingRequest::processing_module_ids() const {
  // @@protoc_insertion_point(field_list:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return processing_module_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockstepProcessingRequest::mutable_processing_module_ids() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return &processing_module_ids_;
}

// repeated .ubii.topicData.TopicDataRecord records = 2;
inline int LockstepProcessingRequest::records_size() const {
  return records_.size();
}
inline void LockstepProcessingRequest::clear_records() {
  records_.Clear();
}
inline const ::ubii::topicData::TopicDataRecord& LockstepProcessingRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingRequest.records)
  return records_.Get(index);
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.LockstepProcessingRequest.records)
  return records_.Mutable(index);
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingRequest::add_records() {
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingRequest.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
LockstepProcessingRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.LockstepProcessingRequest.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
LockstepProcessingRequest::records() const {
  // @@protoc_insertion_point(field_list:ubii.processing.LockstepProcessingRequest.records)
  return records_;
}

// optional int32 delta_time_ms = 3;
inline void LockstepProcessingRequest::clear_delta_time_ms() {
  delta_time_ms_ = 0;
}
inline ::google::protobuf::int32 LockstepProcessingRequest::delta_time_ms() const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingRequest.delta_time_ms)
  return delta_time_ms_;
}
inline void LockstepProcessingRequest::set_delta_time_ms(::google::protobuf::int32 value) {
  
  delta_time_ms_ = value;
  // @@protoc_insertion_point(field_set:ubii.processing.LockstepProcessingRequest.delta_time_ms)
}

// -------------------------------------------------------------------

// LockstepProcessingReply

// repeated string processing_module_ids = 1;
inline int LockstepProcessingReply::processing_module_ids_size() const {
  return processing_module_ids_.size();
}
inline void LockstepProcessingReply::clear_processing_module_ids() {
  processing_module_ids_.Clear();
}
inline const ::std::string& LockstepProcessingReply::processing_module_ids(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return processing_module_ids_.Get(index);
}
inline ::std::string* LockstepProcessingReply::mutable_processing_module_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return processing_module_ids_.Mutable(index);
}
inline void LockstepProcessingReply::set_processing_module_ids(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.LockstepProcessingReply.processing_module_ids)
  processing_module_ids_.Mutable(index)->assign(value);
}
inline void LockstepProcessingReply::set_processing_module_ids(int index, const char* value) {
  processing_module_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline void LockstepProcessingReply::set_processing_module_ids(int index, const char* value, size_t size) {
  processing_module_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline ::std::string* LockstepProcessingReply::add_processing_module_ids() {
  // @@protoc_insertion_point(field_add_mutable:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return processing_module_ids_.Add();
}
inline void LockstepProcessingReply::add_processing_module_ids(const ::std::string& value) {
  processing_module_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline void LockstepProcessingReply::add_processing_module_ids(const char* value) {
  processing_module_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline void LockstepProcessingReply::add_processing_module_ids(const char* value, size_t size) {
  processing_module_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
LockstepProcessingReply::processing_module_ids() const {
  // @@protoc_insertion_point(field_list:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return processing_module_ids_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
LockstepProcessingReply::mutable_processing_module_ids() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return &processing_module_ids_;
}

// repeated .ubii.topicData.TopicDataRecord records = 2;
inline int LockstepProcessingReply::records_size() const {
  return records_.size();
}
inline void LockstepProcessingReply::clear_records() {
  records_.Clear();
}
inline const ::ubii::topicData::TopicDataRecord& LockstepProcessingReply::records(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingReply.records)
  return records_.Get(index);
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingReply::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.LockstepProcessingReply.records)
  return records_.Mutable(index);
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingReply::add_records() {
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingReply.records)
  return records_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
LockstepProcessingReply::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.LockstepProcessingReply.records)
  return &records_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
LockstepProcessingReply::records() const {
  // @@protoc_insertion_point(field_list:ubii.processing.LockstepProcessingReply.records)
  return records_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace processing
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_proto_2fprocessing_2flockstepProcessing_2eproto__INCLUDED
