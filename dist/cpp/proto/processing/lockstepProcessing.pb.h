// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/processing/lockstepProcessing.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fprocessing_2flockstepProcessing_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fprocessing_2flockstepProcessing_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "proto/topicData/topicDataRecord.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fprocessing_2flockstepProcessing_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fprocessing_2flockstepProcessing_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fprocessing_2flockstepProcessing_2eproto;
namespace ubii {
namespace processing {
class LockstepProcessingReply;
class LockstepProcessingReplyDefaultTypeInternal;
extern LockstepProcessingReplyDefaultTypeInternal _LockstepProcessingReply_default_instance_;
class LockstepProcessingRequest;
class LockstepProcessingRequestDefaultTypeInternal;
extern LockstepProcessingRequestDefaultTypeInternal _LockstepProcessingRequest_default_instance_;
}  // namespace processing
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::processing::LockstepProcessingReply* Arena::CreateMaybeMessage<::ubii::processing::LockstepProcessingReply>(Arena*);
template<> ::ubii::processing::LockstepProcessingRequest* Arena::CreateMaybeMessage<::ubii::processing::LockstepProcessingRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace processing {

// ===================================================================

class LockstepProcessingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.LockstepProcessingRequest) */ {
 public:
  LockstepProcessingRequest();
  virtual ~LockstepProcessingRequest();

  LockstepProcessingRequest(const LockstepProcessingRequest& from);
  LockstepProcessingRequest(LockstepProcessingRequest&& from) noexcept
    : LockstepProcessingRequest() {
    *this = ::std::move(from);
  }

  inline LockstepProcessingRequest& operator=(const LockstepProcessingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockstepProcessingRequest& operator=(LockstepProcessingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockstepProcessingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockstepProcessingRequest* internal_default_instance() {
    return reinterpret_cast<const LockstepProcessingRequest*>(
               &_LockstepProcessingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(LockstepProcessingRequest& a, LockstepProcessingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(LockstepProcessingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockstepProcessingRequest* New() const final {
    return CreateMaybeMessage<LockstepProcessingRequest>(nullptr);
  }

  LockstepProcessingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockstepProcessingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockstepProcessingRequest& from);
  void MergeFrom(const LockstepProcessingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockstepProcessingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.LockstepProcessingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2flockstepProcessing_2eproto);
    return ::descriptor_table_proto_2fprocessing_2flockstepProcessing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessingModuleIdsFieldNumber = 1,
    kRecordsFieldNumber = 2,
    kDeltaTimeMsFieldNumber = 3,
  };
  // repeated string processing_module_ids = 1;
  int processing_module_ids_size() const;
  private:
  int _internal_processing_module_ids_size() const;
  public:
  void clear_processing_module_ids();
  const std::string& processing_module_ids(int index) const;
  std::string* mutable_processing_module_ids(int index);
  void set_processing_module_ids(int index, const std::string& value);
  void set_processing_module_ids(int index, std::string&& value);
  void set_processing_module_ids(int index, const char* value);
  void set_processing_module_ids(int index, const char* value, size_t size);
  std::string* add_processing_module_ids();
  void add_processing_module_ids(const std::string& value);
  void add_processing_module_ids(std::string&& value);
  void add_processing_module_ids(const char* value);
  void add_processing_module_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processing_module_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processing_module_ids();
  private:
  const std::string& _internal_processing_module_ids(int index) const;
  std::string* _internal_add_processing_module_ids();
  public:

  // repeated .ubii.topicData.TopicDataRecord records = 2;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::ubii::topicData::TopicDataRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
      mutable_records();
  private:
  const ::ubii::topicData::TopicDataRecord& _internal_records(int index) const;
  ::ubii::topicData::TopicDataRecord* _internal_add_records();
  public:
  const ::ubii::topicData::TopicDataRecord& records(int index) const;
  ::ubii::topicData::TopicDataRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
      records() const;

  // int32 delta_time_ms = 3;
  void clear_delta_time_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 delta_time_ms() const;
  void set_delta_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_delta_time_ms() const;
  void _internal_set_delta_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.processing.LockstepProcessingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processing_module_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord > records_;
  ::PROTOBUF_NAMESPACE_ID::int32 delta_time_ms_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fprocessing_2flockstepProcessing_2eproto;
};
// -------------------------------------------------------------------

class LockstepProcessingReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.LockstepProcessingReply) */ {
 public:
  LockstepProcessingReply();
  virtual ~LockstepProcessingReply();

  LockstepProcessingReply(const LockstepProcessingReply& from);
  LockstepProcessingReply(LockstepProcessingReply&& from) noexcept
    : LockstepProcessingReply() {
    *this = ::std::move(from);
  }

  inline LockstepProcessingReply& operator=(const LockstepProcessingReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline LockstepProcessingReply& operator=(LockstepProcessingReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LockstepProcessingReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LockstepProcessingReply* internal_default_instance() {
    return reinterpret_cast<const LockstepProcessingReply*>(
               &_LockstepProcessingReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(LockstepProcessingReply& a, LockstepProcessingReply& b) {
    a.Swap(&b);
  }
  inline void Swap(LockstepProcessingReply* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LockstepProcessingReply* New() const final {
    return CreateMaybeMessage<LockstepProcessingReply>(nullptr);
  }

  LockstepProcessingReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LockstepProcessingReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LockstepProcessingReply& from);
  void MergeFrom(const LockstepProcessingReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LockstepProcessingReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.LockstepProcessingReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2flockstepProcessing_2eproto);
    return ::descriptor_table_proto_2fprocessing_2flockstepProcessing_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessingModuleIdsFieldNumber = 1,
    kRecordsFieldNumber = 2,
  };
  // repeated string processing_module_ids = 1;
  int processing_module_ids_size() const;
  private:
  int _internal_processing_module_ids_size() const;
  public:
  void clear_processing_module_ids();
  const std::string& processing_module_ids(int index) const;
  std::string* mutable_processing_module_ids(int index);
  void set_processing_module_ids(int index, const std::string& value);
  void set_processing_module_ids(int index, std::string&& value);
  void set_processing_module_ids(int index, const char* value);
  void set_processing_module_ids(int index, const char* value, size_t size);
  std::string* add_processing_module_ids();
  void add_processing_module_ids(const std::string& value);
  void add_processing_module_ids(std::string&& value);
  void add_processing_module_ids(const char* value);
  void add_processing_module_ids(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& processing_module_ids() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_processing_module_ids();
  private:
  const std::string& _internal_processing_module_ids(int index) const;
  std::string* _internal_add_processing_module_ids();
  public:

  // repeated .ubii.topicData.TopicDataRecord records = 2;
  int records_size() const;
  private:
  int _internal_records_size() const;
  public:
  void clear_records();
  ::ubii::topicData::TopicDataRecord* mutable_records(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
      mutable_records();
  private:
  const ::ubii::topicData::TopicDataRecord& _internal_records(int index) const;
  ::ubii::topicData::TopicDataRecord* _internal_add_records();
  public:
  const ::ubii::topicData::TopicDataRecord& records(int index) const;
  ::ubii::topicData::TopicDataRecord* add_records();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
      records() const;

  // @@protoc_insertion_point(class_scope:ubii.processing.LockstepProcessingReply)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> processing_module_ids_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord > records_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fprocessing_2flockstepProcessing_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// LockstepProcessingRequest

// repeated string processing_module_ids = 1;
inline int LockstepProcessingRequest::_internal_processing_module_ids_size() const {
  return processing_module_ids_.size();
}
inline int LockstepProcessingRequest::processing_module_ids_size() const {
  return _internal_processing_module_ids_size();
}
inline void LockstepProcessingRequest::clear_processing_module_ids() {
  processing_module_ids_.Clear();
}
inline std::string* LockstepProcessingRequest::add_processing_module_ids() {
  // @@protoc_insertion_point(field_add_mutable:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return _internal_add_processing_module_ids();
}
inline const std::string& LockstepProcessingRequest::_internal_processing_module_ids(int index) const {
  return processing_module_ids_.Get(index);
}
inline const std::string& LockstepProcessingRequest::processing_module_ids(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return _internal_processing_module_ids(index);
}
inline std::string* LockstepProcessingRequest::mutable_processing_module_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return processing_module_ids_.Mutable(index);
}
inline void LockstepProcessingRequest::set_processing_module_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  processing_module_ids_.Mutable(index)->assign(value);
}
inline void LockstepProcessingRequest::set_processing_module_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  processing_module_ids_.Mutable(index)->assign(std::move(value));
}
inline void LockstepProcessingRequest::set_processing_module_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processing_module_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline void LockstepProcessingRequest::set_processing_module_ids(int index, const char* value, size_t size) {
  processing_module_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline std::string* LockstepProcessingRequest::_internal_add_processing_module_ids() {
  return processing_module_ids_.Add();
}
inline void LockstepProcessingRequest::add_processing_module_ids(const std::string& value) {
  processing_module_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline void LockstepProcessingRequest::add_processing_module_ids(std::string&& value) {
  processing_module_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline void LockstepProcessingRequest::add_processing_module_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processing_module_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline void LockstepProcessingRequest::add_processing_module_ids(const char* value, size_t size) {
  processing_module_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.processing.LockstepProcessingRequest.processing_module_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LockstepProcessingRequest::processing_module_ids() const {
  // @@protoc_insertion_point(field_list:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return processing_module_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LockstepProcessingRequest::mutable_processing_module_ids() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.LockstepProcessingRequest.processing_module_ids)
  return &processing_module_ids_;
}

// repeated .ubii.topicData.TopicDataRecord records = 2;
inline int LockstepProcessingRequest::_internal_records_size() const {
  return records_.size();
}
inline int LockstepProcessingRequest::records_size() const {
  return _internal_records_size();
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingRequest::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.LockstepProcessingRequest.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
LockstepProcessingRequest::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.LockstepProcessingRequest.records)
  return &records_;
}
inline const ::ubii::topicData::TopicDataRecord& LockstepProcessingRequest::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::ubii::topicData::TopicDataRecord& LockstepProcessingRequest::records(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingRequest.records)
  return _internal_records(index);
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingRequest::_internal_add_records() {
  return records_.Add();
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingRequest::add_records() {
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingRequest.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
LockstepProcessingRequest::records() const {
  // @@protoc_insertion_point(field_list:ubii.processing.LockstepProcessingRequest.records)
  return records_;
}

// int32 delta_time_ms = 3;
inline void LockstepProcessingRequest::clear_delta_time_ms() {
  delta_time_ms_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockstepProcessingRequest::_internal_delta_time_ms() const {
  return delta_time_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 LockstepProcessingRequest::delta_time_ms() const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingRequest.delta_time_ms)
  return _internal_delta_time_ms();
}
inline void LockstepProcessingRequest::_internal_set_delta_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  delta_time_ms_ = value;
}
inline void LockstepProcessingRequest::set_delta_time_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_delta_time_ms(value);
  // @@protoc_insertion_point(field_set:ubii.processing.LockstepProcessingRequest.delta_time_ms)
}

// -------------------------------------------------------------------

// LockstepProcessingReply

// repeated string processing_module_ids = 1;
inline int LockstepProcessingReply::_internal_processing_module_ids_size() const {
  return processing_module_ids_.size();
}
inline int LockstepProcessingReply::processing_module_ids_size() const {
  return _internal_processing_module_ids_size();
}
inline void LockstepProcessingReply::clear_processing_module_ids() {
  processing_module_ids_.Clear();
}
inline std::string* LockstepProcessingReply::add_processing_module_ids() {
  // @@protoc_insertion_point(field_add_mutable:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return _internal_add_processing_module_ids();
}
inline const std::string& LockstepProcessingReply::_internal_processing_module_ids(int index) const {
  return processing_module_ids_.Get(index);
}
inline const std::string& LockstepProcessingReply::processing_module_ids(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return _internal_processing_module_ids(index);
}
inline std::string* LockstepProcessingReply::mutable_processing_module_ids(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return processing_module_ids_.Mutable(index);
}
inline void LockstepProcessingReply::set_processing_module_ids(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.LockstepProcessingReply.processing_module_ids)
  processing_module_ids_.Mutable(index)->assign(value);
}
inline void LockstepProcessingReply::set_processing_module_ids(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.LockstepProcessingReply.processing_module_ids)
  processing_module_ids_.Mutable(index)->assign(std::move(value));
}
inline void LockstepProcessingReply::set_processing_module_ids(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processing_module_ids_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline void LockstepProcessingReply::set_processing_module_ids(int index, const char* value, size_t size) {
  processing_module_ids_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline std::string* LockstepProcessingReply::_internal_add_processing_module_ids() {
  return processing_module_ids_.Add();
}
inline void LockstepProcessingReply::add_processing_module_ids(const std::string& value) {
  processing_module_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline void LockstepProcessingReply::add_processing_module_ids(std::string&& value) {
  processing_module_ids_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline void LockstepProcessingReply::add_processing_module_ids(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  processing_module_ids_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline void LockstepProcessingReply::add_processing_module_ids(const char* value, size_t size) {
  processing_module_ids_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.processing.LockstepProcessingReply.processing_module_ids)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
LockstepProcessingReply::processing_module_ids() const {
  // @@protoc_insertion_point(field_list:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return processing_module_ids_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
LockstepProcessingReply::mutable_processing_module_ids() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.LockstepProcessingReply.processing_module_ids)
  return &processing_module_ids_;
}

// repeated .ubii.topicData.TopicDataRecord records = 2;
inline int LockstepProcessingReply::_internal_records_size() const {
  return records_.size();
}
inline int LockstepProcessingReply::records_size() const {
  return _internal_records_size();
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingReply::mutable_records(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.LockstepProcessingReply.records)
  return records_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >*
LockstepProcessingReply::mutable_records() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.LockstepProcessingReply.records)
  return &records_;
}
inline const ::ubii::topicData::TopicDataRecord& LockstepProcessingReply::_internal_records(int index) const {
  return records_.Get(index);
}
inline const ::ubii::topicData::TopicDataRecord& LockstepProcessingReply::records(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.LockstepProcessingReply.records)
  return _internal_records(index);
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingReply::_internal_add_records() {
  return records_.Add();
}
inline ::ubii::topicData::TopicDataRecord* LockstepProcessingReply::add_records() {
  // @@protoc_insertion_point(field_add:ubii.processing.LockstepProcessingReply.records)
  return _internal_add_records();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::topicData::TopicDataRecord >&
LockstepProcessingReply::records() const {
  // @@protoc_insertion_point(field_list:ubii.processing.LockstepProcessingReply.records)
  return records_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace processing
}  // namespace ubii

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fprocessing_2flockstepProcessing_2eproto
