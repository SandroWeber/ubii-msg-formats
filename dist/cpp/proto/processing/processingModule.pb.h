// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: proto/processing/processingModule.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_proto_2fprocessing_2fprocessingModule_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_proto_2fprocessing_2fprocessingModule_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3011000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3011001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_proto_2fprocessing_2fprocessingModule_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_proto_2fprocessing_2fprocessingModule_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto;
namespace ubii {
namespace processing {
class ModuleIO;
class ModuleIODefaultTypeInternal;
extern ModuleIODefaultTypeInternal _ModuleIO_default_instance_;
class ProcessingMode;
class ProcessingModeDefaultTypeInternal;
extern ProcessingModeDefaultTypeInternal _ProcessingMode_default_instance_;
class ProcessingMode_Frequency;
class ProcessingMode_FrequencyDefaultTypeInternal;
extern ProcessingMode_FrequencyDefaultTypeInternal _ProcessingMode_Frequency_default_instance_;
class ProcessingMode_Lockstep;
class ProcessingMode_LockstepDefaultTypeInternal;
extern ProcessingMode_LockstepDefaultTypeInternal _ProcessingMode_Lockstep_default_instance_;
class ProcessingMode_TriggerOnInput;
class ProcessingMode_TriggerOnInputDefaultTypeInternal;
extern ProcessingMode_TriggerOnInputDefaultTypeInternal _ProcessingMode_TriggerOnInput_default_instance_;
class ProcessingModule;
class ProcessingModuleDefaultTypeInternal;
extern ProcessingModuleDefaultTypeInternal _ProcessingModule_default_instance_;
class ProcessingModuleList;
class ProcessingModuleListDefaultTypeInternal;
extern ProcessingModuleListDefaultTypeInternal _ProcessingModuleList_default_instance_;
}  // namespace processing
}  // namespace ubii
PROTOBUF_NAMESPACE_OPEN
template<> ::ubii::processing::ModuleIO* Arena::CreateMaybeMessage<::ubii::processing::ModuleIO>(Arena*);
template<> ::ubii::processing::ProcessingMode* Arena::CreateMaybeMessage<::ubii::processing::ProcessingMode>(Arena*);
template<> ::ubii::processing::ProcessingMode_Frequency* Arena::CreateMaybeMessage<::ubii::processing::ProcessingMode_Frequency>(Arena*);
template<> ::ubii::processing::ProcessingMode_Lockstep* Arena::CreateMaybeMessage<::ubii::processing::ProcessingMode_Lockstep>(Arena*);
template<> ::ubii::processing::ProcessingMode_TriggerOnInput* Arena::CreateMaybeMessage<::ubii::processing::ProcessingMode_TriggerOnInput>(Arena*);
template<> ::ubii::processing::ProcessingModule* Arena::CreateMaybeMessage<::ubii::processing::ProcessingModule>(Arena*);
template<> ::ubii::processing::ProcessingModuleList* Arena::CreateMaybeMessage<::ubii::processing::ProcessingModuleList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace ubii {
namespace processing {

enum ProcessingModule_Status : int {
  ProcessingModule_Status_INITIALIZED = 0,
  ProcessingModule_Status_CREATED = 1,
  ProcessingModule_Status_PROCESSING = 2,
  ProcessingModule_Status_HALTED = 3,
  ProcessingModule_Status_DESTROYED = 4,
  ProcessingModule_Status_ProcessingModule_Status_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcessingModule_Status_ProcessingModule_Status_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcessingModule_Status_IsValid(int value);
constexpr ProcessingModule_Status ProcessingModule_Status_Status_MIN = ProcessingModule_Status_INITIALIZED;
constexpr ProcessingModule_Status ProcessingModule_Status_Status_MAX = ProcessingModule_Status_DESTROYED;
constexpr int ProcessingModule_Status_Status_ARRAYSIZE = ProcessingModule_Status_Status_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessingModule_Status_descriptor();
template<typename T>
inline const std::string& ProcessingModule_Status_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessingModule_Status>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessingModule_Status_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessingModule_Status_descriptor(), enum_t_value);
}
inline bool ProcessingModule_Status_Parse(
    const std::string& name, ProcessingModule_Status* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessingModule_Status>(
    ProcessingModule_Status_descriptor(), name, value);
}
enum ProcessingModule_Language : int {
  ProcessingModule_Language_CPP = 0,
  ProcessingModule_Language_PY = 1,
  ProcessingModule_Language_JS = 2,
  ProcessingModule_Language_CS = 3,
  ProcessingModule_Language_JAVA = 4,
  ProcessingModule_Language_ProcessingModule_Language_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ProcessingModule_Language_ProcessingModule_Language_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ProcessingModule_Language_IsValid(int value);
constexpr ProcessingModule_Language ProcessingModule_Language_Language_MIN = ProcessingModule_Language_CPP;
constexpr ProcessingModule_Language ProcessingModule_Language_Language_MAX = ProcessingModule_Language_JAVA;
constexpr int ProcessingModule_Language_Language_ARRAYSIZE = ProcessingModule_Language_Language_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ProcessingModule_Language_descriptor();
template<typename T>
inline const std::string& ProcessingModule_Language_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ProcessingModule_Language>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ProcessingModule_Language_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ProcessingModule_Language_descriptor(), enum_t_value);
}
inline bool ProcessingModule_Language_Parse(
    const std::string& name, ProcessingModule_Language* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ProcessingModule_Language>(
    ProcessingModule_Language_descriptor(), name, value);
}
// ===================================================================

class ProcessingMode_Frequency :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.ProcessingMode.Frequency) */ {
 public:
  ProcessingMode_Frequency();
  virtual ~ProcessingMode_Frequency();

  ProcessingMode_Frequency(const ProcessingMode_Frequency& from);
  ProcessingMode_Frequency(ProcessingMode_Frequency&& from) noexcept
    : ProcessingMode_Frequency() {
    *this = ::std::move(from);
  }

  inline ProcessingMode_Frequency& operator=(const ProcessingMode_Frequency& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingMode_Frequency& operator=(ProcessingMode_Frequency&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessingMode_Frequency& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessingMode_Frequency* internal_default_instance() {
    return reinterpret_cast<const ProcessingMode_Frequency*>(
               &_ProcessingMode_Frequency_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ProcessingMode_Frequency& a, ProcessingMode_Frequency& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingMode_Frequency* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessingMode_Frequency* New() const final {
    return CreateMaybeMessage<ProcessingMode_Frequency>(nullptr);
  }

  ProcessingMode_Frequency* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessingMode_Frequency>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessingMode_Frequency& from);
  void MergeFrom(const ProcessingMode_Frequency& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingMode_Frequency* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.ProcessingMode.Frequency";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto);
    return ::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHertzFieldNumber = 1,
  };
  // int32 hertz = 1;
  void clear_hertz();
  ::PROTOBUF_NAMESPACE_ID::int32 hertz() const;
  void set_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hertz() const;
  void _internal_set_hertz(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.processing.ProcessingMode.Frequency)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 hertz_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fprocessing_2fprocessingModule_2eproto;
};
// -------------------------------------------------------------------

class ProcessingMode_Lockstep :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.ProcessingMode.Lockstep) */ {
 public:
  ProcessingMode_Lockstep();
  virtual ~ProcessingMode_Lockstep();

  ProcessingMode_Lockstep(const ProcessingMode_Lockstep& from);
  ProcessingMode_Lockstep(ProcessingMode_Lockstep&& from) noexcept
    : ProcessingMode_Lockstep() {
    *this = ::std::move(from);
  }

  inline ProcessingMode_Lockstep& operator=(const ProcessingMode_Lockstep& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingMode_Lockstep& operator=(ProcessingMode_Lockstep&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessingMode_Lockstep& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessingMode_Lockstep* internal_default_instance() {
    return reinterpret_cast<const ProcessingMode_Lockstep*>(
               &_ProcessingMode_Lockstep_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ProcessingMode_Lockstep& a, ProcessingMode_Lockstep& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingMode_Lockstep* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessingMode_Lockstep* New() const final {
    return CreateMaybeMessage<ProcessingMode_Lockstep>(nullptr);
  }

  ProcessingMode_Lockstep* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessingMode_Lockstep>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessingMode_Lockstep& from);
  void MergeFrom(const ProcessingMode_Lockstep& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingMode_Lockstep* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.ProcessingMode.Lockstep";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto);
    return ::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProcessRequestEndpointFieldNumber = 1,
  };
  // string process_request_endpoint = 1;
  void clear_process_request_endpoint();
  const std::string& process_request_endpoint() const;
  void set_process_request_endpoint(const std::string& value);
  void set_process_request_endpoint(std::string&& value);
  void set_process_request_endpoint(const char* value);
  void set_process_request_endpoint(const char* value, size_t size);
  std::string* mutable_process_request_endpoint();
  std::string* release_process_request_endpoint();
  void set_allocated_process_request_endpoint(std::string* process_request_endpoint);
  private:
  const std::string& _internal_process_request_endpoint() const;
  void _internal_set_process_request_endpoint(const std::string& value);
  std::string* _internal_mutable_process_request_endpoint();
  public:

  // @@protoc_insertion_point(class_scope:ubii.processing.ProcessingMode.Lockstep)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr process_request_endpoint_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fprocessing_2fprocessingModule_2eproto;
};
// -------------------------------------------------------------------

class ProcessingMode_TriggerOnInput :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.ProcessingMode.TriggerOnInput) */ {
 public:
  ProcessingMode_TriggerOnInput();
  virtual ~ProcessingMode_TriggerOnInput();

  ProcessingMode_TriggerOnInput(const ProcessingMode_TriggerOnInput& from);
  ProcessingMode_TriggerOnInput(ProcessingMode_TriggerOnInput&& from) noexcept
    : ProcessingMode_TriggerOnInput() {
    *this = ::std::move(from);
  }

  inline ProcessingMode_TriggerOnInput& operator=(const ProcessingMode_TriggerOnInput& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingMode_TriggerOnInput& operator=(ProcessingMode_TriggerOnInput&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessingMode_TriggerOnInput& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessingMode_TriggerOnInput* internal_default_instance() {
    return reinterpret_cast<const ProcessingMode_TriggerOnInput*>(
               &_ProcessingMode_TriggerOnInput_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ProcessingMode_TriggerOnInput& a, ProcessingMode_TriggerOnInput& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingMode_TriggerOnInput* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessingMode_TriggerOnInput* New() const final {
    return CreateMaybeMessage<ProcessingMode_TriggerOnInput>(nullptr);
  }

  ProcessingMode_TriggerOnInput* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessingMode_TriggerOnInput>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessingMode_TriggerOnInput& from);
  void MergeFrom(const ProcessingMode_TriggerOnInput& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingMode_TriggerOnInput* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.ProcessingMode.TriggerOnInput";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto);
    return ::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinDelayMsFieldNumber = 1,
    kAllInputsNeedUpdateFieldNumber = 2,
  };
  // int32 min_delay_ms = 1;
  void clear_min_delay_ms();
  ::PROTOBUF_NAMESPACE_ID::int32 min_delay_ms() const;
  void set_min_delay_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_min_delay_ms() const;
  void _internal_set_min_delay_ms(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // bool all_inputs_need_update = 2;
  void clear_all_inputs_need_update();
  bool all_inputs_need_update() const;
  void set_all_inputs_need_update(bool value);
  private:
  bool _internal_all_inputs_need_update() const;
  void _internal_set_all_inputs_need_update(bool value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.processing.ProcessingMode.TriggerOnInput)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 min_delay_ms_;
  bool all_inputs_need_update_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fprocessing_2fprocessingModule_2eproto;
};
// -------------------------------------------------------------------

class ProcessingMode :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.ProcessingMode) */ {
 public:
  ProcessingMode();
  virtual ~ProcessingMode();

  ProcessingMode(const ProcessingMode& from);
  ProcessingMode(ProcessingMode&& from) noexcept
    : ProcessingMode() {
    *this = ::std::move(from);
  }

  inline ProcessingMode& operator=(const ProcessingMode& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingMode& operator=(ProcessingMode&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessingMode& default_instance();

  enum ModeCase {
    kFrequency = 1,
    kLockstep = 2,
    kTriggerOnInput = 3,
    MODE_NOT_SET = 0,
  };

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessingMode* internal_default_instance() {
    return reinterpret_cast<const ProcessingMode*>(
               &_ProcessingMode_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ProcessingMode& a, ProcessingMode& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingMode* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessingMode* New() const final {
    return CreateMaybeMessage<ProcessingMode>(nullptr);
  }

  ProcessingMode* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessingMode>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessingMode& from);
  void MergeFrom(const ProcessingMode& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingMode* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.ProcessingMode";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto);
    return ::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProcessingMode_Frequency Frequency;
  typedef ProcessingMode_Lockstep Lockstep;
  typedef ProcessingMode_TriggerOnInput TriggerOnInput;

  // accessors -------------------------------------------------------

  enum : int {
    kFrequencyFieldNumber = 1,
    kLockstepFieldNumber = 2,
    kTriggerOnInputFieldNumber = 3,
  };
  // .ubii.processing.ProcessingMode.Frequency frequency = 1;
  bool has_frequency() const;
  private:
  bool _internal_has_frequency() const;
  public:
  void clear_frequency();
  const ::ubii::processing::ProcessingMode_Frequency& frequency() const;
  ::ubii::processing::ProcessingMode_Frequency* release_frequency();
  ::ubii::processing::ProcessingMode_Frequency* mutable_frequency();
  void set_allocated_frequency(::ubii::processing::ProcessingMode_Frequency* frequency);
  private:
  const ::ubii::processing::ProcessingMode_Frequency& _internal_frequency() const;
  ::ubii::processing::ProcessingMode_Frequency* _internal_mutable_frequency();
  public:

  // .ubii.processing.ProcessingMode.Lockstep lockstep = 2;
  bool has_lockstep() const;
  private:
  bool _internal_has_lockstep() const;
  public:
  void clear_lockstep();
  const ::ubii::processing::ProcessingMode_Lockstep& lockstep() const;
  ::ubii::processing::ProcessingMode_Lockstep* release_lockstep();
  ::ubii::processing::ProcessingMode_Lockstep* mutable_lockstep();
  void set_allocated_lockstep(::ubii::processing::ProcessingMode_Lockstep* lockstep);
  private:
  const ::ubii::processing::ProcessingMode_Lockstep& _internal_lockstep() const;
  ::ubii::processing::ProcessingMode_Lockstep* _internal_mutable_lockstep();
  public:

  // .ubii.processing.ProcessingMode.TriggerOnInput trigger_on_input = 3;
  bool has_trigger_on_input() const;
  private:
  bool _internal_has_trigger_on_input() const;
  public:
  void clear_trigger_on_input();
  const ::ubii::processing::ProcessingMode_TriggerOnInput& trigger_on_input() const;
  ::ubii::processing::ProcessingMode_TriggerOnInput* release_trigger_on_input();
  ::ubii::processing::ProcessingMode_TriggerOnInput* mutable_trigger_on_input();
  void set_allocated_trigger_on_input(::ubii::processing::ProcessingMode_TriggerOnInput* trigger_on_input);
  private:
  const ::ubii::processing::ProcessingMode_TriggerOnInput& _internal_trigger_on_input() const;
  ::ubii::processing::ProcessingMode_TriggerOnInput* _internal_mutable_trigger_on_input();
  public:

  void clear_mode();
  ModeCase mode_case() const;
  // @@protoc_insertion_point(class_scope:ubii.processing.ProcessingMode)
 private:
  class _Internal;
  void set_has_frequency();
  void set_has_lockstep();
  void set_has_trigger_on_input();

  inline bool has_mode() const;
  inline void clear_has_mode();

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  union ModeUnion {
    ModeUnion() {}
    ::ubii::processing::ProcessingMode_Frequency* frequency_;
    ::ubii::processing::ProcessingMode_Lockstep* lockstep_;
    ::ubii::processing::ProcessingMode_TriggerOnInput* trigger_on_input_;
  } mode_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 _oneof_case_[1];

  friend struct ::TableStruct_proto_2fprocessing_2fprocessingModule_2eproto;
};
// -------------------------------------------------------------------

class ModuleIO :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.ModuleIO) */ {
 public:
  ModuleIO();
  virtual ~ModuleIO();

  ModuleIO(const ModuleIO& from);
  ModuleIO(ModuleIO&& from) noexcept
    : ModuleIO() {
    *this = ::std::move(from);
  }

  inline ModuleIO& operator=(const ModuleIO& from) {
    CopyFrom(from);
    return *this;
  }
  inline ModuleIO& operator=(ModuleIO&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ModuleIO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ModuleIO* internal_default_instance() {
    return reinterpret_cast<const ModuleIO*>(
               &_ModuleIO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(ModuleIO& a, ModuleIO& b) {
    a.Swap(&b);
  }
  inline void Swap(ModuleIO* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ModuleIO* New() const final {
    return CreateMaybeMessage<ModuleIO>(nullptr);
  }

  ModuleIO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ModuleIO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ModuleIO& from);
  void MergeFrom(const ModuleIO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ModuleIO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.ModuleIO";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto);
    return ::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInternalNameFieldNumber = 1,
    kMessageFormatFieldNumber = 2,
  };
  // string internal_name = 1;
  void clear_internal_name();
  const std::string& internal_name() const;
  void set_internal_name(const std::string& value);
  void set_internal_name(std::string&& value);
  void set_internal_name(const char* value);
  void set_internal_name(const char* value, size_t size);
  std::string* mutable_internal_name();
  std::string* release_internal_name();
  void set_allocated_internal_name(std::string* internal_name);
  private:
  const std::string& _internal_internal_name() const;
  void _internal_set_internal_name(const std::string& value);
  std::string* _internal_mutable_internal_name();
  public:

  // string message_format = 2;
  void clear_message_format();
  const std::string& message_format() const;
  void set_message_format(const std::string& value);
  void set_message_format(std::string&& value);
  void set_message_format(const char* value);
  void set_message_format(const char* value, size_t size);
  std::string* mutable_message_format();
  std::string* release_message_format();
  void set_allocated_message_format(std::string* message_format);
  private:
  const std::string& _internal_message_format() const;
  void _internal_set_message_format(const std::string& value);
  std::string* _internal_mutable_message_format();
  public:

  // @@protoc_insertion_point(class_scope:ubii.processing.ModuleIO)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr internal_name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fprocessing_2fprocessingModule_2eproto;
};
// -------------------------------------------------------------------

class ProcessingModule :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.ProcessingModule) */ {
 public:
  ProcessingModule();
  virtual ~ProcessingModule();

  ProcessingModule(const ProcessingModule& from);
  ProcessingModule(ProcessingModule&& from) noexcept
    : ProcessingModule() {
    *this = ::std::move(from);
  }

  inline ProcessingModule& operator=(const ProcessingModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingModule& operator=(ProcessingModule&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessingModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessingModule* internal_default_instance() {
    return reinterpret_cast<const ProcessingModule*>(
               &_ProcessingModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(ProcessingModule& a, ProcessingModule& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingModule* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessingModule* New() const final {
    return CreateMaybeMessage<ProcessingModule>(nullptr);
  }

  ProcessingModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessingModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessingModule& from);
  void MergeFrom(const ProcessingModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.ProcessingModule";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto);
    return ::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ProcessingModule_Status Status;
  static constexpr Status INITIALIZED =
    ProcessingModule_Status_INITIALIZED;
  static constexpr Status CREATED =
    ProcessingModule_Status_CREATED;
  static constexpr Status PROCESSING =
    ProcessingModule_Status_PROCESSING;
  static constexpr Status HALTED =
    ProcessingModule_Status_HALTED;
  static constexpr Status DESTROYED =
    ProcessingModule_Status_DESTROYED;
  static inline bool Status_IsValid(int value) {
    return ProcessingModule_Status_IsValid(value);
  }
  static constexpr Status Status_MIN =
    ProcessingModule_Status_Status_MIN;
  static constexpr Status Status_MAX =
    ProcessingModule_Status_Status_MAX;
  static constexpr int Status_ARRAYSIZE =
    ProcessingModule_Status_Status_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Status_descriptor() {
    return ProcessingModule_Status_descriptor();
  }
  template<typename T>
  static inline const std::string& Status_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Status>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Status_Name.");
    return ProcessingModule_Status_Name(enum_t_value);
  }
  static inline bool Status_Parse(const std::string& name,
      Status* value) {
    return ProcessingModule_Status_Parse(name, value);
  }

  typedef ProcessingModule_Language Language;
  static constexpr Language CPP =
    ProcessingModule_Language_CPP;
  static constexpr Language PY =
    ProcessingModule_Language_PY;
  static constexpr Language JS =
    ProcessingModule_Language_JS;
  static constexpr Language CS =
    ProcessingModule_Language_CS;
  static constexpr Language JAVA =
    ProcessingModule_Language_JAVA;
  static inline bool Language_IsValid(int value) {
    return ProcessingModule_Language_IsValid(value);
  }
  static constexpr Language Language_MIN =
    ProcessingModule_Language_Language_MIN;
  static constexpr Language Language_MAX =
    ProcessingModule_Language_Language_MAX;
  static constexpr int Language_ARRAYSIZE =
    ProcessingModule_Language_Language_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Language_descriptor() {
    return ProcessingModule_Language_descriptor();
  }
  template<typename T>
  static inline const std::string& Language_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Language>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Language_Name.");
    return ProcessingModule_Language_Name(enum_t_value);
  }
  static inline bool Language_Parse(const std::string& name,
      Language* value) {
    return ProcessingModule_Language_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kAuthorsFieldNumber = 3,
    kTagsFieldNumber = 4,
    kInputsFieldNumber = 10,
    kOutputsFieldNumber = 11,
    kIdFieldNumber = 1,
    kNameFieldNumber = 2,
    kDescriptionFieldNumber = 5,
    kNodeIdFieldNumber = 6,
    kSessionIdFieldNumber = 7,
    kOnProcessingStringifiedFieldNumber = 13,
    kOnCreatedStringifiedFieldNumber = 14,
    kOnHaltedStringifiedFieldNumber = 15,
    kOnDestroyedStringifiedFieldNumber = 16,
    kProcessingModeFieldNumber = 9,
    kStatusFieldNumber = 8,
    kLanguageFieldNumber = 12,
  };
  // repeated string authors = 3;
  int authors_size() const;
  private:
  int _internal_authors_size() const;
  public:
  void clear_authors();
  const std::string& authors(int index) const;
  std::string* mutable_authors(int index);
  void set_authors(int index, const std::string& value);
  void set_authors(int index, std::string&& value);
  void set_authors(int index, const char* value);
  void set_authors(int index, const char* value, size_t size);
  std::string* add_authors();
  void add_authors(const std::string& value);
  void add_authors(std::string&& value);
  void add_authors(const char* value);
  void add_authors(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& authors() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_authors();
  private:
  const std::string& _internal_authors(int index) const;
  std::string* _internal_add_authors();
  public:

  // repeated string tags = 4;
  int tags_size() const;
  private:
  int _internal_tags_size() const;
  public:
  void clear_tags();
  const std::string& tags(int index) const;
  std::string* mutable_tags(int index);
  void set_tags(int index, const std::string& value);
  void set_tags(int index, std::string&& value);
  void set_tags(int index, const char* value);
  void set_tags(int index, const char* value, size_t size);
  std::string* add_tags();
  void add_tags(const std::string& value);
  void add_tags(std::string&& value);
  void add_tags(const char* value);
  void add_tags(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& tags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_tags();
  private:
  const std::string& _internal_tags(int index) const;
  std::string* _internal_add_tags();
  public:

  // repeated .ubii.processing.ModuleIO inputs = 10;
  int inputs_size() const;
  private:
  int _internal_inputs_size() const;
  public:
  void clear_inputs();
  ::ubii::processing::ModuleIO* mutable_inputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO >*
      mutable_inputs();
  private:
  const ::ubii::processing::ModuleIO& _internal_inputs(int index) const;
  ::ubii::processing::ModuleIO* _internal_add_inputs();
  public:
  const ::ubii::processing::ModuleIO& inputs(int index) const;
  ::ubii::processing::ModuleIO* add_inputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO >&
      inputs() const;

  // repeated .ubii.processing.ModuleIO outputs = 11;
  int outputs_size() const;
  private:
  int _internal_outputs_size() const;
  public:
  void clear_outputs();
  ::ubii::processing::ModuleIO* mutable_outputs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO >*
      mutable_outputs();
  private:
  const ::ubii::processing::ModuleIO& _internal_outputs(int index) const;
  ::ubii::processing::ModuleIO* _internal_add_outputs();
  public:
  const ::ubii::processing::ModuleIO& outputs(int index) const;
  ::ubii::processing::ModuleIO* add_outputs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO >&
      outputs() const;

  // string id = 1;
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // string name = 2;
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string description = 5;
  void clear_description();
  const std::string& description() const;
  void set_description(const std::string& value);
  void set_description(std::string&& value);
  void set_description(const char* value);
  void set_description(const char* value, size_t size);
  std::string* mutable_description();
  std::string* release_description();
  void set_allocated_description(std::string* description);
  private:
  const std::string& _internal_description() const;
  void _internal_set_description(const std::string& value);
  std::string* _internal_mutable_description();
  public:

  // string node_id = 6;
  void clear_node_id();
  const std::string& node_id() const;
  void set_node_id(const std::string& value);
  void set_node_id(std::string&& value);
  void set_node_id(const char* value);
  void set_node_id(const char* value, size_t size);
  std::string* mutable_node_id();
  std::string* release_node_id();
  void set_allocated_node_id(std::string* node_id);
  private:
  const std::string& _internal_node_id() const;
  void _internal_set_node_id(const std::string& value);
  std::string* _internal_mutable_node_id();
  public:

  // string session_id = 7;
  void clear_session_id();
  const std::string& session_id() const;
  void set_session_id(const std::string& value);
  void set_session_id(std::string&& value);
  void set_session_id(const char* value);
  void set_session_id(const char* value, size_t size);
  std::string* mutable_session_id();
  std::string* release_session_id();
  void set_allocated_session_id(std::string* session_id);
  private:
  const std::string& _internal_session_id() const;
  void _internal_set_session_id(const std::string& value);
  std::string* _internal_mutable_session_id();
  public:

  // string on_processing_stringified = 13;
  void clear_on_processing_stringified();
  const std::string& on_processing_stringified() const;
  void set_on_processing_stringified(const std::string& value);
  void set_on_processing_stringified(std::string&& value);
  void set_on_processing_stringified(const char* value);
  void set_on_processing_stringified(const char* value, size_t size);
  std::string* mutable_on_processing_stringified();
  std::string* release_on_processing_stringified();
  void set_allocated_on_processing_stringified(std::string* on_processing_stringified);
  private:
  const std::string& _internal_on_processing_stringified() const;
  void _internal_set_on_processing_stringified(const std::string& value);
  std::string* _internal_mutable_on_processing_stringified();
  public:

  // string on_created_stringified = 14;
  void clear_on_created_stringified();
  const std::string& on_created_stringified() const;
  void set_on_created_stringified(const std::string& value);
  void set_on_created_stringified(std::string&& value);
  void set_on_created_stringified(const char* value);
  void set_on_created_stringified(const char* value, size_t size);
  std::string* mutable_on_created_stringified();
  std::string* release_on_created_stringified();
  void set_allocated_on_created_stringified(std::string* on_created_stringified);
  private:
  const std::string& _internal_on_created_stringified() const;
  void _internal_set_on_created_stringified(const std::string& value);
  std::string* _internal_mutable_on_created_stringified();
  public:

  // string on_halted_stringified = 15;
  void clear_on_halted_stringified();
  const std::string& on_halted_stringified() const;
  void set_on_halted_stringified(const std::string& value);
  void set_on_halted_stringified(std::string&& value);
  void set_on_halted_stringified(const char* value);
  void set_on_halted_stringified(const char* value, size_t size);
  std::string* mutable_on_halted_stringified();
  std::string* release_on_halted_stringified();
  void set_allocated_on_halted_stringified(std::string* on_halted_stringified);
  private:
  const std::string& _internal_on_halted_stringified() const;
  void _internal_set_on_halted_stringified(const std::string& value);
  std::string* _internal_mutable_on_halted_stringified();
  public:

  // string on_destroyed_stringified = 16;
  void clear_on_destroyed_stringified();
  const std::string& on_destroyed_stringified() const;
  void set_on_destroyed_stringified(const std::string& value);
  void set_on_destroyed_stringified(std::string&& value);
  void set_on_destroyed_stringified(const char* value);
  void set_on_destroyed_stringified(const char* value, size_t size);
  std::string* mutable_on_destroyed_stringified();
  std::string* release_on_destroyed_stringified();
  void set_allocated_on_destroyed_stringified(std::string* on_destroyed_stringified);
  private:
  const std::string& _internal_on_destroyed_stringified() const;
  void _internal_set_on_destroyed_stringified(const std::string& value);
  std::string* _internal_mutable_on_destroyed_stringified();
  public:

  // .ubii.processing.ProcessingMode processing_mode = 9;
  bool has_processing_mode() const;
  private:
  bool _internal_has_processing_mode() const;
  public:
  void clear_processing_mode();
  const ::ubii::processing::ProcessingMode& processing_mode() const;
  ::ubii::processing::ProcessingMode* release_processing_mode();
  ::ubii::processing::ProcessingMode* mutable_processing_mode();
  void set_allocated_processing_mode(::ubii::processing::ProcessingMode* processing_mode);
  private:
  const ::ubii::processing::ProcessingMode& _internal_processing_mode() const;
  ::ubii::processing::ProcessingMode* _internal_mutable_processing_mode();
  public:

  // .ubii.processing.ProcessingModule.Status status = 8;
  void clear_status();
  ::ubii::processing::ProcessingModule_Status status() const;
  void set_status(::ubii::processing::ProcessingModule_Status value);
  private:
  ::ubii::processing::ProcessingModule_Status _internal_status() const;
  void _internal_set_status(::ubii::processing::ProcessingModule_Status value);
  public:

  // .ubii.processing.ProcessingModule.Language language = 12;
  void clear_language();
  ::ubii::processing::ProcessingModule_Language language() const;
  void set_language(::ubii::processing::ProcessingModule_Language value);
  private:
  ::ubii::processing::ProcessingModule_Language _internal_language() const;
  void _internal_set_language(::ubii::processing::ProcessingModule_Language value);
  public:

  // @@protoc_insertion_point(class_scope:ubii.processing.ProcessingModule)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> authors_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> tags_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO > inputs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO > outputs_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr description_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr node_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr session_id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr on_processing_stringified_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr on_created_stringified_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr on_halted_stringified_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr on_destroyed_stringified_;
  ::ubii::processing::ProcessingMode* processing_mode_;
  int status_;
  int language_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fprocessing_2fprocessingModule_2eproto;
};
// -------------------------------------------------------------------

class ProcessingModuleList :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ubii.processing.ProcessingModuleList) */ {
 public:
  ProcessingModuleList();
  virtual ~ProcessingModuleList();

  ProcessingModuleList(const ProcessingModuleList& from);
  ProcessingModuleList(ProcessingModuleList&& from) noexcept
    : ProcessingModuleList() {
    *this = ::std::move(from);
  }

  inline ProcessingModuleList& operator=(const ProcessingModuleList& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProcessingModuleList& operator=(ProcessingModuleList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProcessingModuleList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProcessingModuleList* internal_default_instance() {
    return reinterpret_cast<const ProcessingModuleList*>(
               &_ProcessingModuleList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(ProcessingModuleList& a, ProcessingModuleList& b) {
    a.Swap(&b);
  }
  inline void Swap(ProcessingModuleList* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProcessingModuleList* New() const final {
    return CreateMaybeMessage<ProcessingModuleList>(nullptr);
  }

  ProcessingModuleList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProcessingModuleList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProcessingModuleList& from);
  void MergeFrom(const ProcessingModuleList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProcessingModuleList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ubii.processing.ProcessingModuleList";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto);
    return ::descriptor_table_proto_2fprocessing_2fprocessingModule_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementsFieldNumber = 1,
  };
  // repeated .ubii.processing.ProcessingModule elements = 1;
  int elements_size() const;
  private:
  int _internal_elements_size() const;
  public:
  void clear_elements();
  ::ubii::processing::ProcessingModule* mutable_elements(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ProcessingModule >*
      mutable_elements();
  private:
  const ::ubii::processing::ProcessingModule& _internal_elements(int index) const;
  ::ubii::processing::ProcessingModule* _internal_add_elements();
  public:
  const ::ubii::processing::ProcessingModule& elements(int index) const;
  ::ubii::processing::ProcessingModule* add_elements();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ProcessingModule >&
      elements() const;

  // @@protoc_insertion_point(class_scope:ubii.processing.ProcessingModuleList)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ProcessingModule > elements_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_proto_2fprocessing_2fprocessingModule_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ProcessingMode_Frequency

// int32 hertz = 1;
inline void ProcessingMode_Frequency::clear_hertz() {
  hertz_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingMode_Frequency::_internal_hertz() const {
  return hertz_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingMode_Frequency::hertz() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingMode.Frequency.hertz)
  return _internal_hertz();
}
inline void ProcessingMode_Frequency::_internal_set_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  hertz_ = value;
}
inline void ProcessingMode_Frequency::set_hertz(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hertz(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingMode.Frequency.hertz)
}

// -------------------------------------------------------------------

// ProcessingMode_Lockstep

// string process_request_endpoint = 1;
inline void ProcessingMode_Lockstep::clear_process_request_endpoint() {
  process_request_endpoint_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingMode_Lockstep::process_request_endpoint() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingMode.Lockstep.process_request_endpoint)
  return _internal_process_request_endpoint();
}
inline void ProcessingMode_Lockstep::set_process_request_endpoint(const std::string& value) {
  _internal_set_process_request_endpoint(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingMode.Lockstep.process_request_endpoint)
}
inline std::string* ProcessingMode_Lockstep::mutable_process_request_endpoint() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingMode.Lockstep.process_request_endpoint)
  return _internal_mutable_process_request_endpoint();
}
inline const std::string& ProcessingMode_Lockstep::_internal_process_request_endpoint() const {
  return process_request_endpoint_.GetNoArena();
}
inline void ProcessingMode_Lockstep::_internal_set_process_request_endpoint(const std::string& value) {
  
  process_request_endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingMode_Lockstep::set_process_request_endpoint(std::string&& value) {
  
  process_request_endpoint_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingMode.Lockstep.process_request_endpoint)
}
inline void ProcessingMode_Lockstep::set_process_request_endpoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  process_request_endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingMode.Lockstep.process_request_endpoint)
}
inline void ProcessingMode_Lockstep::set_process_request_endpoint(const char* value, size_t size) {
  
  process_request_endpoint_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingMode.Lockstep.process_request_endpoint)
}
inline std::string* ProcessingMode_Lockstep::_internal_mutable_process_request_endpoint() {
  
  return process_request_endpoint_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingMode_Lockstep::release_process_request_endpoint() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingMode.Lockstep.process_request_endpoint)
  
  return process_request_endpoint_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingMode_Lockstep::set_allocated_process_request_endpoint(std::string* process_request_endpoint) {
  if (process_request_endpoint != nullptr) {
    
  } else {
    
  }
  process_request_endpoint_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), process_request_endpoint);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingMode.Lockstep.process_request_endpoint)
}

// -------------------------------------------------------------------

// ProcessingMode_TriggerOnInput

// int32 min_delay_ms = 1;
inline void ProcessingMode_TriggerOnInput::clear_min_delay_ms() {
  min_delay_ms_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingMode_TriggerOnInput::_internal_min_delay_ms() const {
  return min_delay_ms_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 ProcessingMode_TriggerOnInput::min_delay_ms() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingMode.TriggerOnInput.min_delay_ms)
  return _internal_min_delay_ms();
}
inline void ProcessingMode_TriggerOnInput::_internal_set_min_delay_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  min_delay_ms_ = value;
}
inline void ProcessingMode_TriggerOnInput::set_min_delay_ms(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_min_delay_ms(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingMode.TriggerOnInput.min_delay_ms)
}

// bool all_inputs_need_update = 2;
inline void ProcessingMode_TriggerOnInput::clear_all_inputs_need_update() {
  all_inputs_need_update_ = false;
}
inline bool ProcessingMode_TriggerOnInput::_internal_all_inputs_need_update() const {
  return all_inputs_need_update_;
}
inline bool ProcessingMode_TriggerOnInput::all_inputs_need_update() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingMode.TriggerOnInput.all_inputs_need_update)
  return _internal_all_inputs_need_update();
}
inline void ProcessingMode_TriggerOnInput::_internal_set_all_inputs_need_update(bool value) {
  
  all_inputs_need_update_ = value;
}
inline void ProcessingMode_TriggerOnInput::set_all_inputs_need_update(bool value) {
  _internal_set_all_inputs_need_update(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingMode.TriggerOnInput.all_inputs_need_update)
}

// -------------------------------------------------------------------

// ProcessingMode

// .ubii.processing.ProcessingMode.Frequency frequency = 1;
inline bool ProcessingMode::_internal_has_frequency() const {
  return mode_case() == kFrequency;
}
inline bool ProcessingMode::has_frequency() const {
  return _internal_has_frequency();
}
inline void ProcessingMode::set_has_frequency() {
  _oneof_case_[0] = kFrequency;
}
inline void ProcessingMode::clear_frequency() {
  if (_internal_has_frequency()) {
    delete mode_.frequency_;
    clear_has_mode();
  }
}
inline ::ubii::processing::ProcessingMode_Frequency* ProcessingMode::release_frequency() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingMode.frequency)
  if (_internal_has_frequency()) {
    clear_has_mode();
      ::ubii::processing::ProcessingMode_Frequency* temp = mode_.frequency_;
    mode_.frequency_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::processing::ProcessingMode_Frequency& ProcessingMode::_internal_frequency() const {
  return _internal_has_frequency()
      ? *mode_.frequency_
      : *reinterpret_cast< ::ubii::processing::ProcessingMode_Frequency*>(&::ubii::processing::_ProcessingMode_Frequency_default_instance_);
}
inline const ::ubii::processing::ProcessingMode_Frequency& ProcessingMode::frequency() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingMode.frequency)
  return _internal_frequency();
}
inline ::ubii::processing::ProcessingMode_Frequency* ProcessingMode::_internal_mutable_frequency() {
  if (!_internal_has_frequency()) {
    clear_mode();
    set_has_frequency();
    mode_.frequency_ = CreateMaybeMessage< ::ubii::processing::ProcessingMode_Frequency >(
        GetArenaNoVirtual());
  }
  return mode_.frequency_;
}
inline ::ubii::processing::ProcessingMode_Frequency* ProcessingMode::mutable_frequency() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingMode.frequency)
  return _internal_mutable_frequency();
}

// .ubii.processing.ProcessingMode.Lockstep lockstep = 2;
inline bool ProcessingMode::_internal_has_lockstep() const {
  return mode_case() == kLockstep;
}
inline bool ProcessingMode::has_lockstep() const {
  return _internal_has_lockstep();
}
inline void ProcessingMode::set_has_lockstep() {
  _oneof_case_[0] = kLockstep;
}
inline void ProcessingMode::clear_lockstep() {
  if (_internal_has_lockstep()) {
    delete mode_.lockstep_;
    clear_has_mode();
  }
}
inline ::ubii::processing::ProcessingMode_Lockstep* ProcessingMode::release_lockstep() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingMode.lockstep)
  if (_internal_has_lockstep()) {
    clear_has_mode();
      ::ubii::processing::ProcessingMode_Lockstep* temp = mode_.lockstep_;
    mode_.lockstep_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::processing::ProcessingMode_Lockstep& ProcessingMode::_internal_lockstep() const {
  return _internal_has_lockstep()
      ? *mode_.lockstep_
      : *reinterpret_cast< ::ubii::processing::ProcessingMode_Lockstep*>(&::ubii::processing::_ProcessingMode_Lockstep_default_instance_);
}
inline const ::ubii::processing::ProcessingMode_Lockstep& ProcessingMode::lockstep() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingMode.lockstep)
  return _internal_lockstep();
}
inline ::ubii::processing::ProcessingMode_Lockstep* ProcessingMode::_internal_mutable_lockstep() {
  if (!_internal_has_lockstep()) {
    clear_mode();
    set_has_lockstep();
    mode_.lockstep_ = CreateMaybeMessage< ::ubii::processing::ProcessingMode_Lockstep >(
        GetArenaNoVirtual());
  }
  return mode_.lockstep_;
}
inline ::ubii::processing::ProcessingMode_Lockstep* ProcessingMode::mutable_lockstep() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingMode.lockstep)
  return _internal_mutable_lockstep();
}

// .ubii.processing.ProcessingMode.TriggerOnInput trigger_on_input = 3;
inline bool ProcessingMode::_internal_has_trigger_on_input() const {
  return mode_case() == kTriggerOnInput;
}
inline bool ProcessingMode::has_trigger_on_input() const {
  return _internal_has_trigger_on_input();
}
inline void ProcessingMode::set_has_trigger_on_input() {
  _oneof_case_[0] = kTriggerOnInput;
}
inline void ProcessingMode::clear_trigger_on_input() {
  if (_internal_has_trigger_on_input()) {
    delete mode_.trigger_on_input_;
    clear_has_mode();
  }
}
inline ::ubii::processing::ProcessingMode_TriggerOnInput* ProcessingMode::release_trigger_on_input() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingMode.trigger_on_input)
  if (_internal_has_trigger_on_input()) {
    clear_has_mode();
      ::ubii::processing::ProcessingMode_TriggerOnInput* temp = mode_.trigger_on_input_;
    mode_.trigger_on_input_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ubii::processing::ProcessingMode_TriggerOnInput& ProcessingMode::_internal_trigger_on_input() const {
  return _internal_has_trigger_on_input()
      ? *mode_.trigger_on_input_
      : *reinterpret_cast< ::ubii::processing::ProcessingMode_TriggerOnInput*>(&::ubii::processing::_ProcessingMode_TriggerOnInput_default_instance_);
}
inline const ::ubii::processing::ProcessingMode_TriggerOnInput& ProcessingMode::trigger_on_input() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingMode.trigger_on_input)
  return _internal_trigger_on_input();
}
inline ::ubii::processing::ProcessingMode_TriggerOnInput* ProcessingMode::_internal_mutable_trigger_on_input() {
  if (!_internal_has_trigger_on_input()) {
    clear_mode();
    set_has_trigger_on_input();
    mode_.trigger_on_input_ = CreateMaybeMessage< ::ubii::processing::ProcessingMode_TriggerOnInput >(
        GetArenaNoVirtual());
  }
  return mode_.trigger_on_input_;
}
inline ::ubii::processing::ProcessingMode_TriggerOnInput* ProcessingMode::mutable_trigger_on_input() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingMode.trigger_on_input)
  return _internal_mutable_trigger_on_input();
}

inline bool ProcessingMode::has_mode() const {
  return mode_case() != MODE_NOT_SET;
}
inline void ProcessingMode::clear_has_mode() {
  _oneof_case_[0] = MODE_NOT_SET;
}
inline ProcessingMode::ModeCase ProcessingMode::mode_case() const {
  return ProcessingMode::ModeCase(_oneof_case_[0]);
}
// -------------------------------------------------------------------

// ModuleIO

// string internal_name = 1;
inline void ModuleIO::clear_internal_name() {
  internal_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleIO::internal_name() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ModuleIO.internal_name)
  return _internal_internal_name();
}
inline void ModuleIO::set_internal_name(const std::string& value) {
  _internal_set_internal_name(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ModuleIO.internal_name)
}
inline std::string* ModuleIO::mutable_internal_name() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ModuleIO.internal_name)
  return _internal_mutable_internal_name();
}
inline const std::string& ModuleIO::_internal_internal_name() const {
  return internal_name_.GetNoArena();
}
inline void ModuleIO::_internal_set_internal_name(const std::string& value) {
  
  internal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleIO::set_internal_name(std::string&& value) {
  
  internal_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ModuleIO.internal_name)
}
inline void ModuleIO::set_internal_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  internal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ModuleIO.internal_name)
}
inline void ModuleIO::set_internal_name(const char* value, size_t size) {
  
  internal_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ModuleIO.internal_name)
}
inline std::string* ModuleIO::_internal_mutable_internal_name() {
  
  return internal_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleIO::release_internal_name() {
  // @@protoc_insertion_point(field_release:ubii.processing.ModuleIO.internal_name)
  
  return internal_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleIO::set_allocated_internal_name(std::string* internal_name) {
  if (internal_name != nullptr) {
    
  } else {
    
  }
  internal_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), internal_name);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ModuleIO.internal_name)
}

// string message_format = 2;
inline void ModuleIO::clear_message_format() {
  message_format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ModuleIO::message_format() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ModuleIO.message_format)
  return _internal_message_format();
}
inline void ModuleIO::set_message_format(const std::string& value) {
  _internal_set_message_format(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ModuleIO.message_format)
}
inline std::string* ModuleIO::mutable_message_format() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ModuleIO.message_format)
  return _internal_mutable_message_format();
}
inline const std::string& ModuleIO::_internal_message_format() const {
  return message_format_.GetNoArena();
}
inline void ModuleIO::_internal_set_message_format(const std::string& value) {
  
  message_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ModuleIO::set_message_format(std::string&& value) {
  
  message_format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ModuleIO.message_format)
}
inline void ModuleIO::set_message_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ModuleIO.message_format)
}
inline void ModuleIO::set_message_format(const char* value, size_t size) {
  
  message_format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ModuleIO.message_format)
}
inline std::string* ModuleIO::_internal_mutable_message_format() {
  
  return message_format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ModuleIO::release_message_format() {
  // @@protoc_insertion_point(field_release:ubii.processing.ModuleIO.message_format)
  
  return message_format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ModuleIO::set_allocated_message_format(std::string* message_format) {
  if (message_format != nullptr) {
    
  } else {
    
  }
  message_format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_format);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ModuleIO.message_format)
}

// -------------------------------------------------------------------

// ProcessingModule

// string id = 1;
inline void ProcessingModule::clear_id() {
  id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::id() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.id)
  return _internal_id();
}
inline void ProcessingModule::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.id)
}
inline std::string* ProcessingModule::mutable_id() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.id)
  return _internal_mutable_id();
}
inline const std::string& ProcessingModule::_internal_id() const {
  return id_.GetNoArena();
}
inline void ProcessingModule::_internal_set_id(const std::string& value) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_id(std::string&& value) {
  
  id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.id)
}
inline void ProcessingModule::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.id)
}
inline void ProcessingModule::set_id(const char* value, size_t size) {
  
  id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.id)
}
inline std::string* ProcessingModule::_internal_mutable_id() {
  
  return id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_id() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.id)
  
  return id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    
  } else {
    
  }
  id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.id)
}

// string name = 2;
inline void ProcessingModule::clear_name() {
  name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::name() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.name)
  return _internal_name();
}
inline void ProcessingModule::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.name)
}
inline std::string* ProcessingModule::mutable_name() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.name)
  return _internal_mutable_name();
}
inline const std::string& ProcessingModule::_internal_name() const {
  return name_.GetNoArena();
}
inline void ProcessingModule::_internal_set_name(const std::string& value) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_name(std::string&& value) {
  
  name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.name)
}
inline void ProcessingModule::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.name)
}
inline void ProcessingModule::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.name)
}
inline std::string* ProcessingModule::_internal_mutable_name() {
  
  return name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_name() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.name)
  
  return name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.name)
}

// repeated string authors = 3;
inline int ProcessingModule::_internal_authors_size() const {
  return authors_.size();
}
inline int ProcessingModule::authors_size() const {
  return _internal_authors_size();
}
inline void ProcessingModule::clear_authors() {
  authors_.Clear();
}
inline std::string* ProcessingModule::add_authors() {
  // @@protoc_insertion_point(field_add_mutable:ubii.processing.ProcessingModule.authors)
  return _internal_add_authors();
}
inline const std::string& ProcessingModule::_internal_authors(int index) const {
  return authors_.Get(index);
}
inline const std::string& ProcessingModule::authors(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.authors)
  return _internal_authors(index);
}
inline std::string* ProcessingModule::mutable_authors(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.authors)
  return authors_.Mutable(index);
}
inline void ProcessingModule::set_authors(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.authors)
  authors_.Mutable(index)->assign(value);
}
inline void ProcessingModule::set_authors(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.authors)
  authors_.Mutable(index)->assign(std::move(value));
}
inline void ProcessingModule::set_authors(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.authors)
}
inline void ProcessingModule::set_authors(int index, const char* value, size_t size) {
  authors_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.authors)
}
inline std::string* ProcessingModule::_internal_add_authors() {
  return authors_.Add();
}
inline void ProcessingModule::add_authors(const std::string& value) {
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.processing.ProcessingModule.authors)
}
inline void ProcessingModule::add_authors(std::string&& value) {
  authors_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.processing.ProcessingModule.authors)
}
inline void ProcessingModule::add_authors(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  authors_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.processing.ProcessingModule.authors)
}
inline void ProcessingModule::add_authors(const char* value, size_t size) {
  authors_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.processing.ProcessingModule.authors)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessingModule::authors() const {
  // @@protoc_insertion_point(field_list:ubii.processing.ProcessingModule.authors)
  return authors_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessingModule::mutable_authors() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.ProcessingModule.authors)
  return &authors_;
}

// repeated string tags = 4;
inline int ProcessingModule::_internal_tags_size() const {
  return tags_.size();
}
inline int ProcessingModule::tags_size() const {
  return _internal_tags_size();
}
inline void ProcessingModule::clear_tags() {
  tags_.Clear();
}
inline std::string* ProcessingModule::add_tags() {
  // @@protoc_insertion_point(field_add_mutable:ubii.processing.ProcessingModule.tags)
  return _internal_add_tags();
}
inline const std::string& ProcessingModule::_internal_tags(int index) const {
  return tags_.Get(index);
}
inline const std::string& ProcessingModule::tags(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.tags)
  return _internal_tags(index);
}
inline std::string* ProcessingModule::mutable_tags(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.tags)
  return tags_.Mutable(index);
}
inline void ProcessingModule::set_tags(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.tags)
  tags_.Mutable(index)->assign(value);
}
inline void ProcessingModule::set_tags(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.tags)
  tags_.Mutable(index)->assign(std::move(value));
}
inline void ProcessingModule::set_tags(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.tags)
}
inline void ProcessingModule::set_tags(int index, const char* value, size_t size) {
  tags_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.tags)
}
inline std::string* ProcessingModule::_internal_add_tags() {
  return tags_.Add();
}
inline void ProcessingModule::add_tags(const std::string& value) {
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:ubii.processing.ProcessingModule.tags)
}
inline void ProcessingModule::add_tags(std::string&& value) {
  tags_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:ubii.processing.ProcessingModule.tags)
}
inline void ProcessingModule::add_tags(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  tags_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:ubii.processing.ProcessingModule.tags)
}
inline void ProcessingModule::add_tags(const char* value, size_t size) {
  tags_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:ubii.processing.ProcessingModule.tags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
ProcessingModule::tags() const {
  // @@protoc_insertion_point(field_list:ubii.processing.ProcessingModule.tags)
  return tags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
ProcessingModule::mutable_tags() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.ProcessingModule.tags)
  return &tags_;
}

// string description = 5;
inline void ProcessingModule::clear_description() {
  description_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::description() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.description)
  return _internal_description();
}
inline void ProcessingModule::set_description(const std::string& value) {
  _internal_set_description(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.description)
}
inline std::string* ProcessingModule::mutable_description() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.description)
  return _internal_mutable_description();
}
inline const std::string& ProcessingModule::_internal_description() const {
  return description_.GetNoArena();
}
inline void ProcessingModule::_internal_set_description(const std::string& value) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_description(std::string&& value) {
  
  description_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.description)
}
inline void ProcessingModule::set_description(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.description)
}
inline void ProcessingModule::set_description(const char* value, size_t size) {
  
  description_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.description)
}
inline std::string* ProcessingModule::_internal_mutable_description() {
  
  return description_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_description() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.description)
  
  return description_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_description(std::string* description) {
  if (description != nullptr) {
    
  } else {
    
  }
  description_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), description);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.description)
}

// string node_id = 6;
inline void ProcessingModule::clear_node_id() {
  node_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::node_id() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.node_id)
  return _internal_node_id();
}
inline void ProcessingModule::set_node_id(const std::string& value) {
  _internal_set_node_id(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.node_id)
}
inline std::string* ProcessingModule::mutable_node_id() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.node_id)
  return _internal_mutable_node_id();
}
inline const std::string& ProcessingModule::_internal_node_id() const {
  return node_id_.GetNoArena();
}
inline void ProcessingModule::_internal_set_node_id(const std::string& value) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_node_id(std::string&& value) {
  
  node_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.node_id)
}
inline void ProcessingModule::set_node_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.node_id)
}
inline void ProcessingModule::set_node_id(const char* value, size_t size) {
  
  node_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.node_id)
}
inline std::string* ProcessingModule::_internal_mutable_node_id() {
  
  return node_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_node_id() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.node_id)
  
  return node_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_node_id(std::string* node_id) {
  if (node_id != nullptr) {
    
  } else {
    
  }
  node_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), node_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.node_id)
}

// string session_id = 7;
inline void ProcessingModule::clear_session_id() {
  session_id_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::session_id() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.session_id)
  return _internal_session_id();
}
inline void ProcessingModule::set_session_id(const std::string& value) {
  _internal_set_session_id(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.session_id)
}
inline std::string* ProcessingModule::mutable_session_id() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.session_id)
  return _internal_mutable_session_id();
}
inline const std::string& ProcessingModule::_internal_session_id() const {
  return session_id_.GetNoArena();
}
inline void ProcessingModule::_internal_set_session_id(const std::string& value) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_session_id(std::string&& value) {
  
  session_id_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.session_id)
}
inline void ProcessingModule::set_session_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.session_id)
}
inline void ProcessingModule::set_session_id(const char* value, size_t size) {
  
  session_id_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.session_id)
}
inline std::string* ProcessingModule::_internal_mutable_session_id() {
  
  return session_id_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_session_id() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.session_id)
  
  return session_id_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_session_id(std::string* session_id) {
  if (session_id != nullptr) {
    
  } else {
    
  }
  session_id_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), session_id);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.session_id)
}

// .ubii.processing.ProcessingModule.Status status = 8;
inline void ProcessingModule::clear_status() {
  status_ = 0;
}
inline ::ubii::processing::ProcessingModule_Status ProcessingModule::_internal_status() const {
  return static_cast< ::ubii::processing::ProcessingModule_Status >(status_);
}
inline ::ubii::processing::ProcessingModule_Status ProcessingModule::status() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.status)
  return _internal_status();
}
inline void ProcessingModule::_internal_set_status(::ubii::processing::ProcessingModule_Status value) {
  
  status_ = value;
}
inline void ProcessingModule::set_status(::ubii::processing::ProcessingModule_Status value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.status)
}

// .ubii.processing.ProcessingMode processing_mode = 9;
inline bool ProcessingModule::_internal_has_processing_mode() const {
  return this != internal_default_instance() && processing_mode_ != nullptr;
}
inline bool ProcessingModule::has_processing_mode() const {
  return _internal_has_processing_mode();
}
inline void ProcessingModule::clear_processing_mode() {
  if (GetArenaNoVirtual() == nullptr && processing_mode_ != nullptr) {
    delete processing_mode_;
  }
  processing_mode_ = nullptr;
}
inline const ::ubii::processing::ProcessingMode& ProcessingModule::_internal_processing_mode() const {
  const ::ubii::processing::ProcessingMode* p = processing_mode_;
  return p != nullptr ? *p : *reinterpret_cast<const ::ubii::processing::ProcessingMode*>(
      &::ubii::processing::_ProcessingMode_default_instance_);
}
inline const ::ubii::processing::ProcessingMode& ProcessingModule::processing_mode() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.processing_mode)
  return _internal_processing_mode();
}
inline ::ubii::processing::ProcessingMode* ProcessingModule::release_processing_mode() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.processing_mode)
  
  ::ubii::processing::ProcessingMode* temp = processing_mode_;
  processing_mode_ = nullptr;
  return temp;
}
inline ::ubii::processing::ProcessingMode* ProcessingModule::_internal_mutable_processing_mode() {
  
  if (processing_mode_ == nullptr) {
    auto* p = CreateMaybeMessage<::ubii::processing::ProcessingMode>(GetArenaNoVirtual());
    processing_mode_ = p;
  }
  return processing_mode_;
}
inline ::ubii::processing::ProcessingMode* ProcessingModule::mutable_processing_mode() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.processing_mode)
  return _internal_mutable_processing_mode();
}
inline void ProcessingModule::set_allocated_processing_mode(::ubii::processing::ProcessingMode* processing_mode) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete processing_mode_;
  }
  if (processing_mode) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      processing_mode = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, processing_mode, submessage_arena);
    }
    
  } else {
    
  }
  processing_mode_ = processing_mode;
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.processing_mode)
}

// repeated .ubii.processing.ModuleIO inputs = 10;
inline int ProcessingModule::_internal_inputs_size() const {
  return inputs_.size();
}
inline int ProcessingModule::inputs_size() const {
  return _internal_inputs_size();
}
inline void ProcessingModule::clear_inputs() {
  inputs_.Clear();
}
inline ::ubii::processing::ModuleIO* ProcessingModule::mutable_inputs(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.inputs)
  return inputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO >*
ProcessingModule::mutable_inputs() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.ProcessingModule.inputs)
  return &inputs_;
}
inline const ::ubii::processing::ModuleIO& ProcessingModule::_internal_inputs(int index) const {
  return inputs_.Get(index);
}
inline const ::ubii::processing::ModuleIO& ProcessingModule::inputs(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.inputs)
  return _internal_inputs(index);
}
inline ::ubii::processing::ModuleIO* ProcessingModule::_internal_add_inputs() {
  return inputs_.Add();
}
inline ::ubii::processing::ModuleIO* ProcessingModule::add_inputs() {
  // @@protoc_insertion_point(field_add:ubii.processing.ProcessingModule.inputs)
  return _internal_add_inputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO >&
ProcessingModule::inputs() const {
  // @@protoc_insertion_point(field_list:ubii.processing.ProcessingModule.inputs)
  return inputs_;
}

// repeated .ubii.processing.ModuleIO outputs = 11;
inline int ProcessingModule::_internal_outputs_size() const {
  return outputs_.size();
}
inline int ProcessingModule::outputs_size() const {
  return _internal_outputs_size();
}
inline void ProcessingModule::clear_outputs() {
  outputs_.Clear();
}
inline ::ubii::processing::ModuleIO* ProcessingModule::mutable_outputs(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.outputs)
  return outputs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO >*
ProcessingModule::mutable_outputs() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.ProcessingModule.outputs)
  return &outputs_;
}
inline const ::ubii::processing::ModuleIO& ProcessingModule::_internal_outputs(int index) const {
  return outputs_.Get(index);
}
inline const ::ubii::processing::ModuleIO& ProcessingModule::outputs(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.outputs)
  return _internal_outputs(index);
}
inline ::ubii::processing::ModuleIO* ProcessingModule::_internal_add_outputs() {
  return outputs_.Add();
}
inline ::ubii::processing::ModuleIO* ProcessingModule::add_outputs() {
  // @@protoc_insertion_point(field_add:ubii.processing.ProcessingModule.outputs)
  return _internal_add_outputs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ModuleIO >&
ProcessingModule::outputs() const {
  // @@protoc_insertion_point(field_list:ubii.processing.ProcessingModule.outputs)
  return outputs_;
}

// .ubii.processing.ProcessingModule.Language language = 12;
inline void ProcessingModule::clear_language() {
  language_ = 0;
}
inline ::ubii::processing::ProcessingModule_Language ProcessingModule::_internal_language() const {
  return static_cast< ::ubii::processing::ProcessingModule_Language >(language_);
}
inline ::ubii::processing::ProcessingModule_Language ProcessingModule::language() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.language)
  return _internal_language();
}
inline void ProcessingModule::_internal_set_language(::ubii::processing::ProcessingModule_Language value) {
  
  language_ = value;
}
inline void ProcessingModule::set_language(::ubii::processing::ProcessingModule_Language value) {
  _internal_set_language(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.language)
}

// string on_processing_stringified = 13;
inline void ProcessingModule::clear_on_processing_stringified() {
  on_processing_stringified_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::on_processing_stringified() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.on_processing_stringified)
  return _internal_on_processing_stringified();
}
inline void ProcessingModule::set_on_processing_stringified(const std::string& value) {
  _internal_set_on_processing_stringified(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.on_processing_stringified)
}
inline std::string* ProcessingModule::mutable_on_processing_stringified() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.on_processing_stringified)
  return _internal_mutable_on_processing_stringified();
}
inline const std::string& ProcessingModule::_internal_on_processing_stringified() const {
  return on_processing_stringified_.GetNoArena();
}
inline void ProcessingModule::_internal_set_on_processing_stringified(const std::string& value) {
  
  on_processing_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_on_processing_stringified(std::string&& value) {
  
  on_processing_stringified_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.on_processing_stringified)
}
inline void ProcessingModule::set_on_processing_stringified(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  on_processing_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.on_processing_stringified)
}
inline void ProcessingModule::set_on_processing_stringified(const char* value, size_t size) {
  
  on_processing_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.on_processing_stringified)
}
inline std::string* ProcessingModule::_internal_mutable_on_processing_stringified() {
  
  return on_processing_stringified_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_on_processing_stringified() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.on_processing_stringified)
  
  return on_processing_stringified_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_on_processing_stringified(std::string* on_processing_stringified) {
  if (on_processing_stringified != nullptr) {
    
  } else {
    
  }
  on_processing_stringified_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), on_processing_stringified);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.on_processing_stringified)
}

// string on_created_stringified = 14;
inline void ProcessingModule::clear_on_created_stringified() {
  on_created_stringified_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::on_created_stringified() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.on_created_stringified)
  return _internal_on_created_stringified();
}
inline void ProcessingModule::set_on_created_stringified(const std::string& value) {
  _internal_set_on_created_stringified(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.on_created_stringified)
}
inline std::string* ProcessingModule::mutable_on_created_stringified() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.on_created_stringified)
  return _internal_mutable_on_created_stringified();
}
inline const std::string& ProcessingModule::_internal_on_created_stringified() const {
  return on_created_stringified_.GetNoArena();
}
inline void ProcessingModule::_internal_set_on_created_stringified(const std::string& value) {
  
  on_created_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_on_created_stringified(std::string&& value) {
  
  on_created_stringified_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.on_created_stringified)
}
inline void ProcessingModule::set_on_created_stringified(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  on_created_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.on_created_stringified)
}
inline void ProcessingModule::set_on_created_stringified(const char* value, size_t size) {
  
  on_created_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.on_created_stringified)
}
inline std::string* ProcessingModule::_internal_mutable_on_created_stringified() {
  
  return on_created_stringified_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_on_created_stringified() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.on_created_stringified)
  
  return on_created_stringified_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_on_created_stringified(std::string* on_created_stringified) {
  if (on_created_stringified != nullptr) {
    
  } else {
    
  }
  on_created_stringified_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), on_created_stringified);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.on_created_stringified)
}

// string on_halted_stringified = 15;
inline void ProcessingModule::clear_on_halted_stringified() {
  on_halted_stringified_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::on_halted_stringified() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.on_halted_stringified)
  return _internal_on_halted_stringified();
}
inline void ProcessingModule::set_on_halted_stringified(const std::string& value) {
  _internal_set_on_halted_stringified(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.on_halted_stringified)
}
inline std::string* ProcessingModule::mutable_on_halted_stringified() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.on_halted_stringified)
  return _internal_mutable_on_halted_stringified();
}
inline const std::string& ProcessingModule::_internal_on_halted_stringified() const {
  return on_halted_stringified_.GetNoArena();
}
inline void ProcessingModule::_internal_set_on_halted_stringified(const std::string& value) {
  
  on_halted_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_on_halted_stringified(std::string&& value) {
  
  on_halted_stringified_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.on_halted_stringified)
}
inline void ProcessingModule::set_on_halted_stringified(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  on_halted_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.on_halted_stringified)
}
inline void ProcessingModule::set_on_halted_stringified(const char* value, size_t size) {
  
  on_halted_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.on_halted_stringified)
}
inline std::string* ProcessingModule::_internal_mutable_on_halted_stringified() {
  
  return on_halted_stringified_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_on_halted_stringified() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.on_halted_stringified)
  
  return on_halted_stringified_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_on_halted_stringified(std::string* on_halted_stringified) {
  if (on_halted_stringified != nullptr) {
    
  } else {
    
  }
  on_halted_stringified_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), on_halted_stringified);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.on_halted_stringified)
}

// string on_destroyed_stringified = 16;
inline void ProcessingModule::clear_on_destroyed_stringified() {
  on_destroyed_stringified_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ProcessingModule::on_destroyed_stringified() const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModule.on_destroyed_stringified)
  return _internal_on_destroyed_stringified();
}
inline void ProcessingModule::set_on_destroyed_stringified(const std::string& value) {
  _internal_set_on_destroyed_stringified(value);
  // @@protoc_insertion_point(field_set:ubii.processing.ProcessingModule.on_destroyed_stringified)
}
inline std::string* ProcessingModule::mutable_on_destroyed_stringified() {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModule.on_destroyed_stringified)
  return _internal_mutable_on_destroyed_stringified();
}
inline const std::string& ProcessingModule::_internal_on_destroyed_stringified() const {
  return on_destroyed_stringified_.GetNoArena();
}
inline void ProcessingModule::_internal_set_on_destroyed_stringified(const std::string& value) {
  
  on_destroyed_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ProcessingModule::set_on_destroyed_stringified(std::string&& value) {
  
  on_destroyed_stringified_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ubii.processing.ProcessingModule.on_destroyed_stringified)
}
inline void ProcessingModule::set_on_destroyed_stringified(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  on_destroyed_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ubii.processing.ProcessingModule.on_destroyed_stringified)
}
inline void ProcessingModule::set_on_destroyed_stringified(const char* value, size_t size) {
  
  on_destroyed_stringified_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ubii.processing.ProcessingModule.on_destroyed_stringified)
}
inline std::string* ProcessingModule::_internal_mutable_on_destroyed_stringified() {
  
  return on_destroyed_stringified_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ProcessingModule::release_on_destroyed_stringified() {
  // @@protoc_insertion_point(field_release:ubii.processing.ProcessingModule.on_destroyed_stringified)
  
  return on_destroyed_stringified_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ProcessingModule::set_allocated_on_destroyed_stringified(std::string* on_destroyed_stringified) {
  if (on_destroyed_stringified != nullptr) {
    
  } else {
    
  }
  on_destroyed_stringified_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), on_destroyed_stringified);
  // @@protoc_insertion_point(field_set_allocated:ubii.processing.ProcessingModule.on_destroyed_stringified)
}

// -------------------------------------------------------------------

// ProcessingModuleList

// repeated .ubii.processing.ProcessingModule elements = 1;
inline int ProcessingModuleList::_internal_elements_size() const {
  return elements_.size();
}
inline int ProcessingModuleList::elements_size() const {
  return _internal_elements_size();
}
inline void ProcessingModuleList::clear_elements() {
  elements_.Clear();
}
inline ::ubii::processing::ProcessingModule* ProcessingModuleList::mutable_elements(int index) {
  // @@protoc_insertion_point(field_mutable:ubii.processing.ProcessingModuleList.elements)
  return elements_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ProcessingModule >*
ProcessingModuleList::mutable_elements() {
  // @@protoc_insertion_point(field_mutable_list:ubii.processing.ProcessingModuleList.elements)
  return &elements_;
}
inline const ::ubii::processing::ProcessingModule& ProcessingModuleList::_internal_elements(int index) const {
  return elements_.Get(index);
}
inline const ::ubii::processing::ProcessingModule& ProcessingModuleList::elements(int index) const {
  // @@protoc_insertion_point(field_get:ubii.processing.ProcessingModuleList.elements)
  return _internal_elements(index);
}
inline ::ubii::processing::ProcessingModule* ProcessingModuleList::_internal_add_elements() {
  return elements_.Add();
}
inline ::ubii::processing::ProcessingModule* ProcessingModuleList::add_elements() {
  // @@protoc_insertion_point(field_add:ubii.processing.ProcessingModuleList.elements)
  return _internal_add_elements();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::ubii::processing::ProcessingModule >&
ProcessingModuleList::elements() const {
  // @@protoc_insertion_point(field_list:ubii.processing.ProcessingModuleList.elements)
  return elements_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace processing
}  // namespace ubii

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::ubii::processing::ProcessingModule_Status> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ubii::processing::ProcessingModule_Status>() {
  return ::ubii::processing::ProcessingModule_Status_descriptor();
}
template <> struct is_proto_enum< ::ubii::processing::ProcessingModule_Language> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ubii::processing::ProcessingModule_Language>() {
  return ::ubii::processing::ProcessingModule_Language_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_proto_2fprocessing_2fprocessingModule_2eproto
